<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Symbol.RFID2.LLRP.Host</name>
    </assembly>
    <members>
        <member name="T:Symbol.RFID2.AntennaTemplate">
            <summary>
            Summary description for SystemAntennaTemplate.
            </summary>
        </member>
        <member name="T:Symbol.RFID2.ReaderXR400">
            <summary>
             Implements IRFIDReader interface for reader model XR400 as host based reader .
            </summary>
        </member>
        <member name="T:Symbol.RFID2.ReaderXRSeries">
            <summary>
             Implements IRFIDReader interface for reader model XR480 as host based reader .
            </summary>
        </member>
        <member name="T:Symbol.RFID2.Reader">
            <summary>
            Implementation of IRFIDReader.
            This is the base class which implements general functionality.
            Methods/properties from Reader class are overriden and used as 
            per specific requirement of the reader model.
            </summary>
        </member>
        <member name="T:Symbol.RFID2.IRFIDReader">
            <summary>
            Exposes methods and events to communicate with Symbol reader.
            Exposes properties to control Symbol reader.
            </summary>
        </member>
        <member name="M:Symbol.RFID2.IRFIDReader.GetAntennaNames">
            <summary>
            Get the antenna names and their count 
            </summary>
            <example>
            <code>
            private void GetAntennaNames(IRFIDReader reader)
            {
                try
                {
                    foreach (AntennaConfig ant in reader.Antennas)
                    {
                        Console.WriteLine("Antenna Configuration For : " + ant.antennaName.ToString());
                    }
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in getting Antenna Count : " + e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub GetAntennaNames(reader As IRFIDReader)
                Try
                    Dim ant As AntennaConfig
                    For Each ant In  reader.Antennas
                        Console.WriteLine(("Antenna Configuration For : " + ant.antennaName.ToString()))
                    Next ant
                Catch e As Exception
                    Console.WriteLine(("Error in getting Antenna Count : " + e.ToString()))
                End Try
            End Sub 'GetAntennaNames
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.IRFIDReader.GetAntennaConfiguration(System.String)">
             <summary>
             Get the antenna Configuration for a given Antenna
             AntennaConfig includes  antennaName,tagTypeSupported,
             txPower,rxPower,isConnected;
             </summary>
             <example>
             <code>
             private void RequestAntennaeConfig(IRFIDReader reader)
             {
                 try
                 {
                     AntennaConfig[] antennaConfig = reader.GetAntennaConfiguration("Antenna1");
            
                     Console.WriteLine("---Antenna Configuration for all Antennae---");
                     Console.WriteLine();
                     foreach (AntennaConfig antConfig in antennaConfig)
                     {
                         Console.WriteLine();
                         Console.WriteLine("Antenna Name :" + antConfig.AntennaName);
                         Console.WriteLine("Is Connected :" + antConfig.IsConnected.ToString());
                         Console.WriteLine("Port Number  :" + antConfig.PortNumber.ToString());
                         Console.WriteLine("RxPower      :" + antConfig.RxPower.ToString());
                         Console.WriteLine("TxPower      :" + antConfig.TxPower.ToString());
                         Console.WriteLine("Tag Types In Use");
                         foreach (TagType tagType in antConfig.TagTypesInUse)
                             Console.WriteLine("  " + tagType.ToString());
                         Console.WriteLine();
                     }
                     Console.WriteLine();
                     Console.WriteLine("---End Of Antennae Configuration---");
                 }
                 catch (Exception e)
                 {
                     Console.WriteLine("Error in getting Antenna Configuration ");
                     Console.WriteLine(e.ToString());
                 }
             }
             
             //  Visual Basic .NET
             
             Private Sub RequestAntennaeConfig(reader As IRFIDReader)
                 Try
                     Dim antennaConfig As AntennaConfig() = reader.GetAntennaConfiguration("Antenna1")
                   
                     Console.WriteLine("---Antenna Configuration for all Antennae---")
                     Console.WriteLine()
                     Dim antConfig As AntennaConfig
                     For Each antConfig In  antennaConfig
                         Console.WriteLine()
                         Console.WriteLine(("Antenna Name :" + antConfig.AntennaName))
                         Console.WriteLine(("Is Connected :" + antConfig.IsConnected.ToString()))
                         Console.WriteLine(("Port Number  :" + antConfig.PortNumber.ToString()))
                         Console.WriteLine(("RxPower      :" + antConfig.RxPower.ToString()))
                         Console.WriteLine(("TxPower      :" + antConfig.TxPower.ToString()))
                         Console.WriteLine("Tag Types In Use")
                         Dim tagType As TagType
                         For Each tagType In  antConfig.TagTypesInUse
                             Console.WriteLine(("  " + tagType.ToString()))
                         Next tagType
                         Console.WriteLine()
                     Next antConfig
                     Console.WriteLine()
                     Console.WriteLine("---End Of Antennae Configuration---")
                 Catch e As Exception
                     Console.WriteLine("Error in getting Antenna Configuration ")
                     Console.WriteLine(e.ToString())
                 End Try
             End Sub 'RequestAntennaeConfig
             </code>
             </example>
        </member>
        <member name="M:Symbol.RFID2.IRFIDReader.SetAntennaConfiguration(Symbol.RFID2.AntennaConfig)">
            <summary>
            Set the antenna Configuration for a given Antenna.
            This method does not fully support read point configuration in XR readers. XR version 2.4.x is supported. Later versions are not supportedby this method.
            To get XR reader to work in autonomous mode, manual intervention in the reader web interface may be required to configure read points (antennas) properly.
            </summary>
            <returns></returns>
            <example> 
            <code>
            public void SetAntennaConfig()
            {
               string antName = "Antenna1";
               TagType[] tagTypesInUse = new TagType[4];
               tagTypesInUse[0] = TagType.EPCClass0;
               tagTypesInUse[1] = TagType.EPCClass1;
               tagTypesInUse[2] = TagType.EPClass0_PLUS;
               tagTypesInUse[3] = TagType.EPCClass1_GEN2;
               AntennaConfig antCfg = new AntennaConfig(antName, tagTypesInUse, (uint)30,
                                                   (uint)0, true, true);
               SetAntennaConfiguration(antCfg);
            }
            
            //  Visual Basic .NET
            
            Public Sub SetAntennaConfig()
                Dim antName As String = "Antenna1"
                Dim tagTypesInUse(4) As TagType
                tagTypesInUse(0) = TagType.EPCClass0
                tagTypesInUse(1) = TagType.EPCClass1
                tagTypesInUse(2) = TagType.EPClass0_PLUS
                tagTypesInUse(3) = TagType.EPCClass1_GEN2
                Dim antCfg As New AntennaConfig(antName, tagTypesInUse, CType(30, System.UInt32), CType(0, System.UInt32), True, True)
                SetAntennaConfiguration(antCfg)
            End Sub 'SetAntennaConfig
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.IRFIDReader.Connect">
            <summary>
            This method with connect to reader based on the transport paramaters like IP address and port 
            or COM settings if serial communication is supported
            </summary>
            <example>
            <code>
            private void Connect(IRFIDReader reader)
            {
                try
                {
                    if (reader.ReaderStatus != ReaderStatus.ONLINE)
                    {
                        reader.Connect();
                    }
                    Console.WriteLine("Reader Status ONLINE");
                }
                catch(Exception ex)
                {
                    Console.WriteLine("Unable to Connect "+ ex.ToString());
                }
            }
             
            //  Visual Basic .NET
            
            Private Sub Connect(reader As IRFIDReader)
                Try 
                    If reader.ReaderStatus <![CDATA[ <> ]]> ReaderStatus.ONLINE Then
                        reader.Connect()
                    End If
                    Console.WriteLine("Reader Status ONLINE")
                Catch ex As Exception
                    Console.WriteLine(("Unable to Connect " + ex.ToString()))
                End Try
            End Sub 'Connect
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.IRFIDReader.Disconnect">
            <summary>
            This method with disconnect the reader object with the reader 
            </summary>
            <example>
            <code>
            private void Disconnect(IRFIDReader reader)
            {
                try
                {
                    if (reader.ReaderStatus != ReaderStatus.OFFLINE)
                    {
                        reader.Disconnect();
                    }
                    Console.WriteLine("Reader Status ONLINE");
                }
                catch(Exception ex)
                {
                    Console.WriteLine("Unable to Connect "+ ex.ToString());
                }
            }
             
            //  Visual Basic .NET
            
            Private Sub Disconnect(reader As IRFIDReader)
                Try  
                    If reader.ReaderStatus <![CDATA[ <> ]]> ReaderStatus.OFFLINE Then
                        reader.Disconnect()
                    End If
                    Console.WriteLine("Reader Status ONLINE")
                Catch ex As Exception
                    Console.WriteLine(("Unable to Connect " + ex.ToString()))
                End Try
            End Sub 'Disconnect
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.IRFIDReader.KillTag(Symbol.RFID2.TagType,System.Byte[])">
            <summary>
            Kill the tag based on the TAG ID. The kill password is hardcoded to zero.
            This method is supported only in Symbol.RFID2.Device and only with class1 tags.
            </summary>
            <param name="tagType">TagType</param>
            <param name="tagID">tagID byte array</param>
            <example > 
            <code> 
            private void KillTag(IRFIDReader reader)
            {
                try
                {
                    IRFIDTag[] tags = reader.GetTags();
                    if (tags == null || tags.Length == 0)
                        Console.WriteLine("No Tags");
                    else
                    {
                        foreach (IRFIDTag tag in tags)
                        {
                            Console.WriteLine("GetTags : ");
                            Console.WriteLine(tag.TagID);
                            Console.WriteLine(tag.AntennaName);
                            Console.WriteLine(tag.TagType);
                            Console.WriteLine(tag.LastSeen);
                            KillTag(tag.TagType, tag.TagID);
                        }
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine("Unable to Read or Kill Tag"+ e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub KillTag(reader As IRFIDReader)
                Try
                    Dim tags As IRFIDTag() = reader.GetTags()
                    If tags Is Nothing Or tags.Length = 0 Then
                        Console.WriteLine("No Tags")
                    Else
                        Dim tag As IRFIDTag
                        For Each tag In  tags
                            Console.WriteLine("GetTags : ")
                            Console.WriteLine(tag.TagID)
                            Console.WriteLine(tag.AntennaName)
                            Console.WriteLine(tag.TagType)
                            Console.WriteLine(tag.LastSeen)
                            KillTag(tag.TagType, tag.TagID)
                        Next tag
                    End If
                Catch e As Exception
                    Console.WriteLine(("Unable to Read or Kill Tag" + e.ToString()))
                End Try
            End Sub 'KillTag
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.IRFIDReader.EraseTag(Symbol.RFID2.TagType)">
            <summary>
            Erase the TAG ID and data.
            This method is supported only in Symbol.RFID2.Device and only with class1 tags.
            </summary>
            <example > 
            <code> 
            private void EraseTag(IRFIDReader reader)
            {
                try
                {
                    IRFIDTag[] tags = reader.GetTags();
                    if (tags == null || tags.Length == 0)
                        Console.WriteLine("No Tags");
                    else
                    {
                        foreach (IRFIDTag tag in tags)
                        {
                            Console.WriteLine("GetTags : ");
                            Console.WriteLine(tag.TagID);
                            Console.WriteLine(tag.AntennaName);
                            Console.WriteLine(tag.TagType);
                            Console.WriteLine(tag.LastSeen);
                            EraseTag(tag.TagType);
                        }
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine("Unable to Read or Erase Tag"+ e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub EraseTag(reader As IRFIDReader)
                Try
                    Dim tags As IRFIDTag() = reader.GetTags()
                    If tags Is Nothing Or tags.Length = 0 Then
                        Console.WriteLine("No Tags")
                    Else
                        Dim tag As IRFIDTag
                        For Each tag In  tags
                            Console.WriteLine("GetTags : ")
                            Console.WriteLine(tag.TagID)
                            Console.WriteLine(tag.AntennaName)
                            Console.WriteLine(tag.TagType)
                            Console.WriteLine(tag.LastSeen)
                            EraseTag(tag.TagType)
                        Next tag
                    End If
                Catch e As Exception
                    Console.WriteLine(("Unable to Read or Erase Tag" + e.ToString()))
                End Try
            End Sub 'EraseTag
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.IRFIDReader.GetTags">
            <summary>
            Inventory TAGS: Supports CLASS0, CLASS1 and GEN2 Tags
            </summary>
            <returns></returns>
            <example > 
            <code> 
            private void GetTags(IRFIDReader reader)
            {
                try
                {
                    IRFIDTag[] tags = reader.GetTags();
                    if (tags == null || tags.Length == 0)
                        Console.WriteLine("No Tags");
                    else
                    {
                        foreach (IRFIDTag tag in tags)
                        {
                            Console.WriteLine("GetTags : ");
                            Console.WriteLine(tag.TagID);
                            Console.WriteLine(tag.AntennaName);
                            Console.WriteLine(tag.TagType);
                            Console.WriteLine(tag.LastSeen);
                        }
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub GetTags(reader As IRFIDReader)
                Try
                    Dim tags As IRFIDTag() = reader.GetTags()
                    If tags Is Nothing Or tags.Length = 0 Then
                        Console.WriteLine("No Tags")
                    Else
                        Dim tag As IRFIDTag
                        For Each tag In  tags
                            Console.WriteLine("GetTags : ")
                            Console.WriteLine(tag.TagID)
                            Console.WriteLine(tag.AntennaName)
                            Console.WriteLine(tag.TagType)
                            Console.WriteLine(tag.LastSeen)
                        Next tag
                    End If
                Catch e As Exception
                    Console.WriteLine(e.Message)
                End Try
            End Sub 'GetTags
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.IRFIDReader.GetTags(System.Int32)">
             <summary>
             Reads the tags on the given antennaPort. Supported only in XR series readers
             </summary>
             <param name="antennaPort"></param>
             <returns>Array of IRFIDTag</returns>
             <example > 
             <code> 
             private void ReadTags(IRFIDReader reader)
             {
                 bool antennaFound=false;
             
                 try
                 {
                     AntennaConfig[] antcfg = reader.Antennas;
            
                     foreach (AntennaConfig ant in antcfg.Antennas)
                     {
                         if (ant.IsConnected == true)
                         {
                             if (ant.Enabled == true)
                             {
                                 antennaFound = true;
                                 break;
                             }
                         }
                     }//for
             
                     if (antennaFound==true)
                     {
            		        try
            			    {
            			        IRFIDTag[] tags = reader.GetTags(antConfig.PortNumber);
            						
            				    if (tags == null || tags.Length == 0)
            				    {
            				        Console.WriteLine("No Tags");
            					}
            				    else
            					{
            				        foreach (IRFIDTag tag in tags)
            						{
            						    Console.WriteLine("GetTags (port# = " +  antConfig.PortNumber.ToString()+ ") : ");
            						    Console.WriteLine(tag.TagID);
            						    Console.WriteLine(tag.AntennaName);
            						    Console.WriteLine(tag.TagType);
            						    Console.WriteLine(tag.LastSeen);
            						    break;
            				        }
            				    }
            			    }//try
            				catch (Exception e)
            			    {
            			        Console.WriteLine("Unable to Read Tag Using Port#"+ e.ToString());
            				}
            			}
                     else
                     {
                         Console.WriteLine("No Active Antenna !!!");
                     }
                 }
                 catch (Exception e)
                 {
                     Console.WriteLine("Error in getting Antenna Configuration ");
                     Console.WriteLine(e.ToString());
                 }
             }
              
             //  Visual Basic .NET
             
             Private Sub ReadTags(reader As IRFIDReader)
                 Dim antennaFound As Boolean = False
               
                 Try
                     Dim antcfg As AntennaConfig() = reader.Antennas
                  
                     Dim ant As AntennaConfig
                     For Each ant In  antcfg.Antennas
                         If ant.IsConnected = True Then
                             If ant.Enabled = True Then
                                 antennaFound = True
                                 Exit ForEach
                             End If
                         End If
                     Next ant 'for
                     If antennaFound = True Then
                         Try
                             Dim tags As IRFIDTag() = reader.GetTags(antConfig.PortNumber)
                        
                             If tags Is Nothing Or tags.Length = 0 Then
                                 Console.WriteLine("No Tags")
                             Else
                                 Dim tag As IRFIDTag
                                 For Each tag In  tags
                                     Console.WriteLine(("GetTags (port# = " + antConfig.PortNumber.ToString()")                  
                                     Console.WriteLine(tag.TagID) '
                                     Console.WriteLine(tag.AntennaName)
                                     Console.WriteLine(tag.TagType)
                                     Console.WriteLine(tag.LastSeen)
                                     Exit ForEach
                                 Next tag
                             End If
                         Catch e As Exception
                             Console.WriteLine(("Unable to Read Tag Using Port#" + e.ToString()))
                         End Try
                     Else
                         Console.WriteLine("No Active Antenna !!!")
                     End If
                 Catch e As Exception
                     Console.WriteLine("Error in getting Antenna Configuration ")
                     Console.WriteLine(e.ToString())
                 End Try
             End Sub 'ReadTags
             </code>
             </example>
        </member>
        <member name="M:Symbol.RFID2.IRFIDReader.GetTags(Symbol.RFID2.TagDataLoc)">
            <summary>
            IT IS NOT SUPPORTED YET
            </summary>
            <returns></returns>
            <example > 
            <code> 
            ...
            MemoryBank membk;
            byte wordCount=6;
            ushort wordPointer=2;
            // possible mem banks --> Reserved, EPC, TID, USER
            ...
            
            private void GetTagsDataLoc(IRFIDReader reader, byte memoryBank, ushort wordPointer, byte wordCount)
            {
                try
                {
            
                    TagDataLoc dataLoc = new TagDataLoc(wordPointer, wordCount, membk.USER);
                  
                    IRFIDTag[] tags = reader.GetTags(dataLoc);
                    if (tags == null || tags.Length == 0)
                        Console.WriteLine("No Tags");
                    else
                    {
                        foreach (IRFIDTag tag in tags)
                        {
                            Console.WriteLine("GetTags : ");
                            Console.WriteLine(tag.TagID);
                            Console.WriteLine(tag.AntennaName);
                            Console.WriteLine(tag.TagType);
                            Console.WriteLine(tag.LastSeen);
                        }
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub GetTagsDataLoc(reader As IRFIDReader, memoryBank As Byte, wordPointer As Int, wordCount As Byte) 
                Try
                 
                    Dim dataLoc As New TagDataLoc(wordPointer, wordCount, membk.USER)
                 
                    Dim tags As IRFIDTag() = reader.GetTags(dataLoc)
                    If tags Is Nothing Or tags.Length = 0 Then
                        Console.WriteLine("No Tags")
                    Else
                        Dim tag As IRFIDTag
                        For Each tag In  tags
                            Console.WriteLine("GetTags : ")
                            Console.WriteLine(tag.TagID)
                            Console.WriteLine(tag.AntennaName)
                            Console.WriteLine(tag.TagType)
                            Console.WriteLine(tag.LastSeen)
                        Next tag
                    End If
                Catch e As Exception
                    Console.WriteLine(e.Message)
                End Try
            End Sub 'GetTagsDataLoc
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.IRFIDReader.GetTags(Symbol.RFID2.TagDataLoc,Symbol.RFID2.Gen2Parameters,System.UInt32)">
            <summary>
            IT IS NOT SUPPORTED YET
            </summary>
            <param name="dataLoc"></param>
            <param name="gen2Params"></param>
            <param name="accessPassword"></param>
            <example>
            <code>
            private void GetTagsParms(IRFIDReader reader)
            {
                try
                {
            
                MemoryBank membk;
                byte wordCount=96;
                ushort wordPointer=32;
                Gen2Parameters g2Params = new Gen2Parameters(Ignore_SL, S0, Bit_A, 0);
                uint accPswd=0x12345678;
            
                // possible mem banks --> Reserved, EPC, TID, USER
                
                    TagDataLoc dataLoc = new TagDataLoc(wordPointer, wordCount, membk.USER);
                  
                    IRFIDTag[] tags = reader.GetTags(dataLoc,  g2Params, accPswd);
            
                    if (tags == null || tags.Length == 0)
                    {
                        Console.WriteLine("No Tags");
                    }
                    else
                    {
                        foreach (IRFIDTag tag in tags)
                        {
                            Console.WriteLine("GetTags : ");
                            Console.WriteLine(tag.TagID);
                            Console.WriteLine(tag.AntennaName);
                            Console.WriteLine(tag.TagType);
                            Console.WriteLine(tag.LastSeen);
                        }
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub GetTagsParms(reader As IRFIDReader)
                Try
                 
                    Dim membk As MemoryBank
                    Dim wordCount As Byte = 96
                    Dim wordPointer As Int = 32
                    Dim g2Params As New Gen2Parameters(Ignore_SL, S0, Bit_A, 0)
                    Dim accPswd As Int = <![CDATA[&]]>H12345678
                 
                    ' possible mem banks --> Reserved, EPC, TID, USER
                    Dim dataLoc As New TagDataLoc(wordPointer, wordCount, membk.USER)
                 
                    Dim tags As IRFIDTag() = reader.GetTags(dataLoc, g2Params, accPswd)
                 
                    If tags Is Nothing Or tags.Length = 0 Then
                        Console.WriteLine("No Tags")
                    Else
                        Dim tag As IRFIDTag
                        For Each tag In  tags
                            Console.WriteLine("GetTags : ")
                            Console.WriteLine(tag.TagID)
                            Console.WriteLine(tag.AntennaName)
                            Console.WriteLine(tag.TagType)
                            Console.WriteLine(tag.LastSeen)
                        Next tag
                    End If
                Catch e As Exception
                    Console.WriteLine(e.Message)
                End Try
            End Sub 'GetTagsParms
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.IRFIDReader.WriteTagID(System.String,System.Int32)">
             <summary>
             Writes tag Id on the RFID tag present on the given Antenna.
             The method is supported in Symbol.RFID2.Host assembly with XR series readers and RD5000 reader.
             The support for RD5000 is limited to Gen2.
             </summary>
             <param name="hexTagID">Tag ID string  in hex e.g.300833B2DDD9014035050002</param>
             <param name="antennaPort">antenna port (1 to 4)</param>
             <example> 
             <code> 
             private void MyWriteTagID(IRFIDReader reader)
             {
                 bool antennaFound=false;
                 string tagId="0011223344556677889900aabbccddeeff";
                 try
                 {
                     AntennaConfig[] antcfg = reader.Antennas;
            
                     foreach (AntennaConfig ant in antcfg.Antennas)
                     {
                         if (ant.IsConnected == true)
                         {
                             if (ant.Enabled == true)
                             {
                                 antennaFound = true;
                                 break;
                             }
                         }
                     }//for
             
                     if (antennaFound==true)
                     {
                         try
                         {
                             IRFIDTag[] tags = reader.WriteTagID(tagId, antConfig.PortNumber);
            
                         }//try
                         catch (Exception e)
                         {
                             Console.WriteLine("Unable to Read Tag Using Port#"+ e.ToString());
                         }
            			}
                     else
                     {
                         Console.WriteLine("No Active Antenna !!!");
                     }
                 }
                 catch (Exception e)
                 {
                     Console.WriteLine("Error in getting Antenna Configuration ");
                     Console.WriteLine(e.ToString());
                 }
             }
              
             //  Visual Basic .NET
             
             Private Sub MyWriteTagID(reader As IRFIDReader)
                 Dim antennaFound As Boolean = False
                 Dim tagId As String = "0011223344556677889900aabbccddeeff"
                 Try
                     Dim antcfg As AntennaConfig() = reader.Antennas
                  
                     Dim ant As AntennaConfig
                     For Each ant In  antcfg.Antennas
                         If ant.IsConnected = True Then
                             If ant.Enabled = True Then
                                 antennaFound = True
                                 Exit ForEach
                             End If
                         End If
                     Next ant 'for
                     If antennaFound = True Then
                         Try
                             Dim tags As IRFIDTag() = reader.WriteTagID(tagId, antConfig.PortNumber)
                     
                         'try
                         Catch e As Exception
                             Console.WriteLine(("Unable to Read Tag Using Port#" + e.ToString()))
                         End Try
                     Else
                         Console.WriteLine("No Active Antenna !!!")
                     End If
                 Catch e As Exception
                     Console.WriteLine("Error in getting Antenna Configuration ")
                     Console.WriteLine(e.ToString())
                 End Try
             End Sub 'MyWriteTagID
             </code>
             </example>
        </member>
        <member name="M:Symbol.RFID2.IRFIDReader.WriteTagID(System.String,Symbol.RFID2.AntennaConfig)">
             <summary>
             Writes tag Id on the RFID tag present on the given Antenna
             The method is supported in Symbol.RFID2.Host assembly with XR series readers and RD5000 reader.
             The support for RD5000 is limited to Gen2.
             </summary>
             <param name="hexTagID">Tag ID string in hex e.g.300833B2DDD9014035050002</param>
             <param name="antennaConfig">AntennaConfig</param>
             <example > 
             <code> 
             private void MyWriteTagIDHex(IRFIDReader reader)
             {
                 bool antennaFound=false;
                 string tagId="0011223344556677889900aabbccddeeff";
                 try
                 {
                     AntennaConfig[] antcfg = reader.Antennas;
            
                     foreach (AntennaConfig ant in antcfg.Antennas)
                     {
                         if (ant.IsConnected == true)
                         {
                             if (ant.Enabled == true)
                             {
                                 antennaFound = true;
                                 break;
                             }
                         }
                     }//for
             
                     if (antennaFound==true)
                     {
                         try
                         {
                             IRFIDTag[] tags = reader.WriteTagID(tagId, antConfig);
            
                         }//try
                         catch (Exception e)
                         {
                             Console.WriteLine("Unable to Read Tag Using Port#"+ e.ToString());
                         }
            			}
                     else
                     {
                         Console.WriteLine("No Active Antenna !!!");
                     }
                 }
                 catch (Exception e)
                 {
                     Console.WriteLine("Error in getting Antenna Configuration ");
                     Console.WriteLine(e.ToString());
                 }
             }
              
             //  Visual Basic .NET
             
             Private Sub MyWriteTagIDHex(reader As IRFIDReader)
                 Dim antennaFound As Boolean = False
                 Dim tagId As String = "0011223344556677889900aabbccddeeff"
                 Try
                     Dim antcfg As AntennaConfig() = reader.Antennas
                  
                     Dim ant As AntennaConfig
                     For Each ant In  antcfg.Antennas
                         If ant.IsConnected = True Then
                             If ant.Enabled = True Then
                                 antennaFound = True
                                 Exit ForEach
                             End If
                         End If
                     Next ant 'for
                     If antennaFound = True Then
                         Try
                             Dim tags As IRFIDTag() = reader.WriteTagID(tagId, antConfig)
                     
                         'try
                         Catch e As Exception
                             Console.WriteLine(("Unable to Read Tag Using Port#" + e.ToString()))
                         End Try
                     Else
                         Console.WriteLine("No Active Antenna !!!")
                     End If
                 Catch e As Exception
                     Console.WriteLine("Error in getting Antenna Configuration ")
                     Console.WriteLine(e.ToString())
                 End Try
             End Sub 'MyWriteTagIDHex
             </code>
             </example>
        </member>
        <member name="M:Symbol.RFID2.IRFIDReader.WriteTagID(Symbol.RFID2.TagType,System.Byte[])">
            <summary>
            Write  the TagId speicifying the tag type.
            This method is not supported in XR series readers.
            This method is supported in Symbol.RFID2.Host for RD5000 reader only.
            This method is supported in Symbol.RFID2.Device for class 0+, class 1, and Gen2 tags.
            <returns></returns>
            </summary>
            <param name="tagType">TagType</param>
            <param name="tagID">Tag ID</param>
            <example> 
            <code> 
            private void WriteTagID(IRFIDReader reader, TagType tagType, byte[] tagID)
            {
                try
                {
                    reader.WriteTagID(tagType, tagId);
                }
                catch(Exception e)
                {
                    Console.WriteLine(e.Message);
                }
                }
            
            //  Visual Basic .NET
            
            Private Sub WriteTagID(reader As IRFIDReader, tagType As TagType, tagID() As Byte)
                Try
                    reader.WriteTagID(tagType, tagId)
                Catch e As Exception
                    Console.WriteLine(e.Message)
                End Try
            End Sub 'WriteTagID
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.IRFIDReader.WriteTag(Symbol.RFID2.TagDataLoc,System.Byte[])">
            <summary>
            IT IS NOT SUPPORTED.
            </summary>
            <example > 
            <code> 
                ...
                MemoryBank membk;
                byte wordCount=96;
                ushort wordPointer=32;
                // possible mem banks --> Reserved, EPC, TID, USER
                ...
            
            private void WriteTagsDataLoc(IRFIDReader reader, byte memoryBank, ushort wordPointer, byte wordCount)
            {
                try
                {
                    byte tagId = “\x01\x02\x03\x04\x05\x06\x07\x08”;
                    TagDataLoc dataLoc = new TagDataLoc(wordPointer, wordCount, membk.USER);
                  
                    IRFIDTag[] tags = reader.Write(dataLoc, tagId);
                    if (tags == null || tags.Length == 0)
                        Console.WriteLine("No Tags");
                    else
                    {
                        foreach (IRFIDTag tag in tags)
                        {
                            Console.WriteLine("GetTags : ");
                            Console.WriteLine(tag.TagID);
                            Console.WriteLine(tag.AntennaName);
                            Console.WriteLine(tag.TagType);
                            Console.WriteLine(tag.LastSeen);
                        }
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub WriteTagsDataLoc(reader As IRFIDReader, memoryBank As Byte, wordPointer As System.UInt16, wordCount As Byte) 'ToDo: Unsigned Integers not ///supported
                Try
                    Dim TagID As String 
                    String tagId = “\x01\x02\x03\x04\x05\x06\x07\x08”;
                    string tagId = “\x01\x02\x03\x04\x05\x06\x07\x08”;
                    TagDataLoc dataLoc = new TagDataLoc(wordPointer, wordCount, membk.USER);
                    Dim tags As IRFIDTag() = reader.Write(dataLoc, tagId)
                    If tags Is Nothing Or tags.Length = 0 Then
                        Console.WriteLine("No Tags")
                    Else
                        Dim tag As IRFIDTag
                        For Each tag In  tags
                            Console.WriteLine("GetTags : ")
                            Console.WriteLine(tag.TagID)
                            Console.WriteLine(tag.AntennaName)
                            Console.WriteLine(tag.TagType)
                            Console.WriteLine(tag.LastSeen)
                        Next tag
                    End If
                Catch e As Exception
                    Console.WriteLine(e.Message)
                End Try
            End Sub 'WriteTagsDataLoc
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.IRFIDReader.WriteTag(Symbol.RFID2.Gen2Parameters,Symbol.RFID2.TagDataLoc,System.UInt32,System.Byte[])">
             <summary>
             IT IS NOT SUPPORTED.
             </summary>
             <param name="gen2Params"></param>
             <param name="dataLoc"></param>
             <param name="accessPassword"></param>
             <param name="tagData"></param>
             <returns></returns>
             <example> 
             <code>
             private void WriteTagParms(IRFIDReader reader)
             {
                 try
                 {
                     MemoryBank membk;
                     byte wordCount=96;
                     ushort wordPointer=32;
                     Gen2Parameters g2Params = new Gen2Parameters(Gen2Parameters.Ignore_SL, 
                                                                  Gen2Parameters.S0,
                                                                  Gen2Parameters.Bit_A,
                                                                  0);
                     uint accPswd=0x12345678;
                     byte *TagID = “\x01\x02\x03\x04\x05\x06\x07\x08”;
             
                     // possible mem banks --> Reserved, EPC, TID, USER
                 
                     TagDataLoc dataLoc = new TagDataLoc(wordPointer, wordCount, membk.USER);
                   
                     IRFIDTag[] tags = reader.WriteTag(dataLoc, g2Params, accPswd, TagID);
             
                     if (tags == null || tags.Length == 0)
                     {
                         Console.WriteLine("No Tags");
                     }
                     else
                     {
                         foreach (IRFIDTag tag in tags)
                         {
                             Console.WriteLine("GetTags : ");
                             Console.WriteLine(tag.TagID);
                             Console.WriteLine(tag.AntennaName);
                             Console.WriteLine(tag.TagType);
                             Console.WriteLine(tag.LastSeen);
                         }
                     }
                 }
                 catch (Exception e)
                 {
                     Console.WriteLine(e.Message);
                 }
             }
             
             //  Visual Basic .NET
             
             Private Sub WriteTagParms(reader As IRFIDReader)
                 Try    
                     Dim membk As MemoryBank
                     Dim wordCount As Byte = 96
                     Dim wordPointer As System.Int = 32
                     Dim g2Params As New Gen2Parameters(Gen2Parameters.Ignore_SL, Gen2Parameters.S0, Gen2Parameters.Bit_A, 0)
                     Dim accPswd As Int = <![CDATA[&]]>H12345678
            
                     ' possible mem banks --> Reserved, EPC, TID, USER
                     Dim dataLoc As New TagDataLoc(wordPointer, wordCount, membk.USER)
                  
                     Dim tags As IRFIDTag() = reader.WriteTag(dataLoc, g2Params, accPswd, TagID)
                  
                     If tags Is Nothing Or tags.Length = 0 Then
                         Console.WriteLine("No Tags")
                     Else
                         Dim tag As IRFIDTag
                         For Each tag In  tags
                             Console.WriteLine("GetTags : ")
                             Console.WriteLine(tag.TagID)
                             Console.WriteLine(tag.AntennaName)
                             Console.WriteLine(tag.TagType)
                             Console.WriteLine(tag.LastSeen)
                         Next tag
                     End If
                 Catch e As Exception
                     Console.WriteLine(e.Message)
                 End Try
             End Sub 'WriteTagParms
             </code>
             </example>
        </member>
        <member name="M:Symbol.RFID2.IRFIDReader.LockTag(System.String,System.Int32)">
             <summary>
             Locks tag Id on the RFID tag present on the given Antenna
             The method is supported only in XR series readers
             </summary>
             <param name="hexTagID">Tag ID string  in hex e.g.300833B2DDD9014035050002</param>
             <param name="antennaPort">antenna port (1 to 4)</param>
             <example > 
             <code> 
             private void MyLockTag(IRFIDReader reader)
             {
                 bool antennaFound=false;
                 string tagId="0011223344556677889900aabbccddeeff";
                 try
                 {
                     AntennaConfig[] antcfg = reader.Antennas;
            
                     foreach (AntennaConfig ant in antcfg.Antennas)
                     {
                         if (ant.IsConnected == true)
                         {
                             if (ant.Enabled == true)
                             {
                                 antennaFound = true;
                                 break;
                             }
                         }
                     }//for
             
                     if (antennaFound==true)
                     {
            		        try
            				{
            			        IRFIDTag[] tags = reader.LockTag(tagId, antConfig.PortNumber);
            				}//try
            				catch (Exception e)
            				{
            				    Console.WriteLine("Unable to Read Tag Using Port#"+ e.ToString());
            				}
            			}
                     else
                     {
                         Console.WriteLine("No Active Antenna !!!");
                     }
                 }
                 catch (Exception e)
                 {
                     Console.WriteLine("Error in getting Antenna Configuration ");
                     Console.WriteLine(e.ToString());
                 }
             }
              
             //  Visual Basic .NET
             
             Private Sub MyLockTag(reader As IRFIDReader)
                 Dim antennaFound As Boolean = False
                 Dim tagId As String = "0011223344556677889900aabbccddeeff"
                 Try
                     Dim antcfg As AntennaConfig() = reader.Antennas
                  
                     Dim ant As AntennaConfig
                     For Each ant In  antcfg.Antennas
                         If ant.IsConnected = True Then
                             If ant.Enabled = True Then
                                 antennaFound = True
                                 Exit ForEach
                             End If
                         End If
                     Next ant 'for
                     If antennaFound = True Then
                         Try
                             Dim tags As IRFIDTag() = reader.LockTag(tagId, antConfig.PortNumber)         
                         'try
                         Catch e As Exception
                         Console.WriteLine(("Unable to Read Tag Using Port#" + e.ToString()))
                         End Try
                     Else
                         Console.WriteLine("No Active Antenna !!!")
                     End If
                 Catch e As Exception
                     Console.WriteLine("Error in getting Antenna Configuration ")
                     Console.WriteLine(e.ToString())
                 End Try
             End Sub 'MyLockTag
             </code>
             </example>
        </member>
        <member name="M:Symbol.RFID2.IRFIDReader.LockTag(System.String,Symbol.RFID2.AntennaConfig)">
             <summary>
             Locks tag Id on the RFID tag present on the given Antenna
             The method is supported only in XR series readers
             </summary>
             <param name="hexTagID">Tag ID string in hex e.g.300833B2DDD9014035050002</param>
             <param name="antennaConfig">AntennaConfig</param>
             <example > 
             <code> 
             private void MyLockTagIDCfg(IRFIDReader reader)
             {
                 bool antennaFound=false;
                 string tagId="0011223344556677889900aabbccddeeff";
                 try
                 {
                     AntennaConfig[] antcfg = reader.Antennas;
            
                     foreach (AntennaConfig ant in antcfg.Antennas)
                     {
                         if (ant.IsConnected == true)
                         {
                             if (ant.Enabled == true)
                             {
                                 antennaFound = true;
                                 break;
                             }
                         }
                     }//for
             
                     if (antennaFound==true)
                     {
            		        try
            			    {
            			        IRFIDTag[] tags = reader.LockTag(tagId, antConfig);
            				}//try
            				catch (Exception e)
            				{
            			        Console.WriteLine("Unable to Read Tag Using Port#"+ e.ToString());
            				}
            			}
                     else
                     {
                         Console.WriteLine("No Active Antenna !!!");
                     }
                 }
                 catch (Exception e)
                 {
                     Console.WriteLine("Error in getting Antenna Configuration ");
                     Console.WriteLine(e.ToString());
                 }
             }
              
             //  Visual Basic .NET
             
             Private Sub MyLockTagIDCfg(reader As IRFIDReader)
                 Dim antennaFound As Boolean = False
                 Dim tagId As String = "0011223344556677889900aabbccddeeff"
                 Try
                     Dim antcfg As AntennaConfig() = reader.Antennas
                  
                     Dim ant As AntennaConfig
                     For Each ant In  antcfg.Antennas
                         If ant.IsConnected = True Then
                             If ant.Enabled = True Then
                                 antennaFound = True
                                 Exit ForEach
                             End If
                         End If
                     Next ant 'for
                     If antennaFound = True Then
                         Try
                             Dim tags As IRFIDTag() = reader.LockTag(tagId, antConfig)
                         'try
                         Catch e As Exception
                             Console.WriteLine(("Unable to Read Tag Using Port#" + e.ToString()))
                         End Try
                     Else
                         Console.WriteLine("No Active Antenna !!!")
                     End If
                 Catch e As Exception
                     Console.WriteLine("Error in getting Antenna Configuration ")
                     Console.WriteLine(e.ToString())
                 End Try
             End Sub 'MyLockTagIDCfg
             </code>
             </example>
        </member>
        <member name="M:Symbol.RFID2.IRFIDReader.GetIOStatus(System.Boolean[]@,System.Boolean[]@)">
            <summary>
            Gets the Status of specified Input and Output pins.
            status = true indicates pin is On and status = false indicates pin is Off.
            This method is supported for XR series readers only.
            </summary>
            <param name="inputPinsStatus"></param>
            <param name="outputPinsStatus"></param>
        </member>
        <member name="M:Symbol.RFID2.IRFIDReader.GetIOStatus(Symbol.RFID2.IOPinStatus[]@,Symbol.RFID2.IOPinStatus[]@)">
            <summary>
            Gets the Status of specified Input and Output pins.
            status = true indicates pin is On and status = false indicates pin is Off.
            This method is supported for XR series readers only.
            </summary>
            <param name="inputPinsStatus"></param>
            <param name="outputPinsStatus"></param>
            <example>
            <code>
            private void GetPinLevels(IRFIDReader reader)
            {
                try
                {
                    IOPinStatus[] inputPinsStatus;
                    IOPinStatus[] outputPinsStatus;
                    Console.WriteLine("----Pin Levels----");
                    Console.WriteLine();
                    reader.GetIOStatus(out inputPinsStatus, out outputPinsStatus);
                    Console.WriteLine("--Input Pin Levels---");
                    foreach (IOPinStatus pinStatus in inputPinsStatus)
                    {
                        try
                        {
                            Console.WriteLine("Pin Number :" + pinStatus.pin.ToString());
                            Console.WriteLine("PinStatus  :" + pinStatus.pinStatus.ToString());
                            Console.WriteLine();
                        }
                        catch { }
                    }
                    Console.WriteLine();
                    Console.WriteLine("--Output Pin Levels---");
                    foreach (IOPinStatus pinStatus in outputPinsStatus)
                    {
                        try
                        {
                            Console.WriteLine();
                            Console.WriteLine("Pin Number :" + pinStatus.pin.ToString());
                            Console.WriteLine("PinStatus  :" + pinStatus.pinStatus.ToString());
                            Console.WriteLine();
                        }
                        catch { }
                    }
                    Console.WriteLine("---End Of GetPinLevels---");
                }
                catch { }
            }
            
            //  Visual Basic .NET
            
            Private Sub GetPinLevels(reader As IRFIDReader)
                Try
                    Dim inputPinsStatus() As IOPinStatus
                    Dim outputPinsStatus() As IOPinStatus
                    Console.WriteLine("----Pin Levels----")
                    Console.WriteLine()
                    reader.GetIOStatus(inputPinsStatus, outputPinsStatus)
                    Console.WriteLine("--Input Pin Levels---")
                    Dim pinStatus As IOPinStatus
                    For Each pinStatus In  inputPinsStatus
                        Try
                            Console.WriteLine(("Pin Number :" + pinStatus.pin.ToString()))
                            Console.WriteLine(("PinStatus  :" + pinStatus.pinStatus.ToString()))
                            Console.WriteLine()
                        Catch
                        End Try
                    Next pinStatus
                    Console.WriteLine()
                    Console.WriteLine("--Output Pin Levels---")
                    Dim pinStatus As IOPinStatus
                    For Each pinStatus In  outputPinsStatus
                        Try
                            Console.WriteLine()
                            Console.WriteLine(("Pin Number :" + pinStatus.pin.ToString()))
                            Console.WriteLine(("PinStatus  :" + pinStatus.pinStatus.ToString()))
                            Console.WriteLine()
                        Catch
                        End Try
                    Next pinStatus
                    Console.WriteLine("---End Of GetPinLevels---")
                Catch
                End Try
            End Sub 'GetPinLevels
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.IRFIDReader.SetOutputStatus(System.Boolean[],System.Boolean[])">
             <summary>
             Sets the specified Output pins to values chosen by client.
             Selected pins corresponds to the outpput pin number that are to  be set.
             the corresponding value in SetValues specifies the value that is to be set for the pin
             This method is supported for XR series readers
             example: if SelectedPins[1] = true and SetValues[1] = true then 1st output pin is set to 1. 
             </summary>
             <param name="SelectedPins"></param>
             <param name="SetValues"></param>
             <example>
             <code>
             private void SetOutputPinLevel()
             {
                 try
                 {
                     /*set all output pins status true*/
                     bool[] outputPins = new bool[6];
                     bool[] pinValues = new bool[6];
                     outputPins[0] = true;
                     outputPins[1] = true;
                     outputPins[2] = true;
                     outputPins[3] = true;
                     outputPins[4] = true;
                     outputPins[5] = true;
                     pinValues[0] = true;
                     pinValues[1] = true;
                     pinValues[2] = true;
                     pinValues[3] = true;
                     pinValues[4] = true;
                     pinValues[5] = true;
                     reader.SetOutputStatus(outputPins,pinValues);
                 }
                 catch (Exception ex)
                 {
                     throw ex;
                 }
             }
            
             //  Visual Basic .NET
             
             Private Sub SetOutputPinLevel()
                 Try
                     'set all output pins status true
                     Dim outputPins(6) As Boolean
                     Dim pinValues(6) As Boolean
                     outputPins(0) = True
                     outputPins(1) = True
                     outputPins(2) = True
                     outputPins(3) = True
                     outputPins(4) = True
                     outputPins(5) = True
                     pinValues(0) = True
                     pinValues(1) = True
                     pinValues(2) = True
                     pinValues(3) = True
                     pinValues(4) = True
                     pinValues(5) = True
                     reader.SetOutputStatus(outputPins, pinValues)
                 Catch ex As Exception
                     Throw ex
                 End Try
             End Sub 'SetOutputPinLevel
             </code>
             </example>
        </member>
        <member name="M:Symbol.RFID2.IRFIDReader.SetOutputStatus(Symbol.RFID2.IOPinStatus[])">
            <summary>
            Sets the specified Output pins to values chosen by client.
            example: if outputPinStatus[1] = true then 1st output pin is set to 1. 
            This method is supported for XR series readers only.
            </summary>
            <param name="outputPinStatus"></param>
            <example>
            <code>
            private void SetOutputPinLevel(IRFIDReader reader)
            {
                try
                {
                    /* Set 1st pin true*/
                    IOPinStatus[] selectedOutPins = null;
                    selectedOutPins[0].pin = IOPins.PIN_0;
                    selectedOutPins[0].pinStatus = false;
                    reader.SetOutputStatus(selectedOutPins);
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
              
            //  Visual Basic .NET
            
            Private Sub SetOutputPinLevel(reader As IRFIDReader)
                Try
                    ' Set 1st pin true
                    Dim selectedOutPins As IOPinStatus() = Nothing
                    selectedOutPins(0).pin = IOPins.PIN_0
                    selectedOutPins(0).pinStatus = False
                    reader.SetOutputStatus(selectedOutPins)
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub 'SetOutputPinLevel
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.IRFIDReader.EnableInputStatusNotification(System.Boolean[],System.Int32)">
             <summary>
             This method enables periodic notification for any change in the input pin
             status of the selected pins and displays it at given interval.
             This method is supported for XR series readers only.
             </summary>
             <param name="SelectedPins">In the bool[] SelectedPins, only those pin numbers that are true will be 
             checked and notified for status change.
             interval specifies</param>
             <param name="interval">Time interval between consecutive checks,in miliseconds</param>
             <example>
             <code>
             private void IONotify(IRFIDReader reader)
             {
                 try
                 {
                     if (reader == null)
                         CreateReaderDefaultConfigString();
                     if (reader.ReaderStatus != ReaderStatus.ONLINE)
                         reader.Connect();
                     bool [] selectedPins = {0, 1, 0, 1, 0};
                     reader.InputStatusNotifyEvent +=new ReaderEventHandler(OnIONotify);
                     reader.EnableInputStatusNotification(selectedPins, 100);
                 }
                 catch (Exception e)
                 {
                     Console.WriteLine(e.Message);
                 }
             }
             
             private void OnIONotify(object sender, ReaderEventArgs arg)
             {
                 GPIStatusEventArgs args = (GPIStatusEventArgs)arg;
                 try
                 {
                     if (args.Equals(null))
                         return;
                     bool[] pins = args.InputStatus;
                     Console.WriteLine("On IO Notify");
                     for (int i = 0; i &lt; pins.Length; i++)
                     {
                         Console.WriteLine("Pin" + i + " = " + pins[i].ToString());
                     }
                 }
             }        
             
             //  Visual Basic .NET
             
             Private Sub IONotify(reader As IRFIDReader)
                 Try
                     If reader Is Nothing Then
                         CreateReaderDefaultConfigString()
                     End If
                     If reader.ReaderStatus <![CDATA[ <> ]]> ReaderStatus.ONLINE Then
                         reader.Connect()
                     End If
                     Dim selectedPins As Boolean() =  {0, 1, 0, 1, 0}
                     AddHandler reader.InputStatusNotifyEvent, AddressOf OnIONotify
                     reader.EnableInputStatusNotification(selectedPins, 100) '
                 Catch e As Exception
                     Console.WriteLine(e.Message)
                 End Try
             End Sub 'IONotify
            
             Private Sub OnIONotify(sender As Object, arg As ReaderEventArgs)
                 Dim args As GPIStatusEventArgs = CType(arg, GPIStatusEventArgs)
                 Try
                     If args.Equals(Nothing) Then
                         Return
                     End If
                     Dim pins As Boolean() = args.InputStatus
                     Console.WriteLine("On IO Notify")
                     Dim i As Integer
                  
                     While i And lt  And pins.Length > 0 
            	            i += 1
                         Console.WriteLine(("Pin" + i + " = " + pins(i).ToString()))
                     End While
                 End Try
             End Sub 'OnIONotify
             </code>
             </example>
        </member>
        <member name="M:Symbol.RFID2.IRFIDReader.EnableInputStatusNotification(Symbol.RFID2.IOPins[],System.Int32)">
             <summary>
             This method enables periodic notification for any change in the input pin
             status of the selected pins and displays it at given interval.
             This method is supported for XR series readers only.
             </summary>
             <param name="SelectedPins">In the IOPins[] SelectedPins, only those pin numbers that are true will be 
             checked and notified for status change.
             interval specifies</param>
             <param name="interval">Time interval between consecutive checks,in miliseconds</param>
             <example>
             <code>
             private void IONotify(IRFIDReader reader)
             {
                 try
                 {
                     if (reader == null)
                         CreateReaderDefaultConfigString();
                     if (reader.ReaderStatus != ReaderStatus.ONLINE)
                         reader.Connect();
                     IOPins[] selectedPins = null;
                     selectedPins = new IOPins[6] { IOPins.PIN_0, 
                                                    IOPins.PIN_1,
                                                    IOPins.PIN_2,
                                                    IOPins.PIN_3,    
                                                    IOPins.PIN_4,
                                                    IOPins.PIN_5 };
                     reader.InputStatusNotifyEvent +=new ReaderEventHandler(OnIONotify);
                     reader.EnableInputStatusNotification(selectedPins, 100);
                 }
                 catch (Exception e)
                 {
                     Console.WriteLine(e.Message);
                 }
             }
             
             private void OnIONotify(object sender, ReaderEventArgs arg)
             {
                 GPIStatusEventArgs args = (GPIStatusEventArgs)arg;
                 try
                 {
                     if (args.Equals(null))
                         return;
                     bool[] pins = args.InputStatus;
                     Console.WriteLine("On IO Notify");
                     for (int i = 0; i <![CDATA[&]]>lt; pins.Length; i++)
                     {
                         Console.WriteLine("Pin" + i + " = " + pins[i].ToString());
                     }
                 }
             }
             
             //  Visual Basic .NET
             
             Private Sub IONotify(reader As IRFIDReader)
                 Try
                     If reader Is Nothing Then
                         CreateReaderDefaultConfigString()
                     End If
                     If reader.ReaderStatus <![CDATA[ <> ]]>  ReaderStatus.ONLINE Then
                         reader.Connect()
                     End If
                     Dim selectedPins As IOPins() = Nothing
                     selectedPins = New IOPins(6) {IOPins.PIN_0, IOPins.PIN_1, IOPins.PIN_2, IOPins.PIN_3, IOPins.PIN_4, IOPins.PIN_5}
                     AddHandler reader.InputStatusNotifyEvent, AddressOf OnIONotify
                     reader.EnableInputStatusNotification(selectedPins, 100)
                 Catch e As Exception
                     Console.WriteLine(e.Message)
                 End Try
             End Sub 'IONotify
            
             Private Sub OnIONotify(sender As Object, arg As ReaderEventArgs)
                 Dim args As GPIStatusEventArgs = CType(arg, GPIStatusEventArgs)
                 Try
                     If args.Equals(Nothing) Then
                         Return
                     End If
                     Dim pins As Boolean() = args.InputStatus
                     Console.WriteLine("On IO Notify")
            			While i And lt  And pins.Length > 0 
            		        i += 1   
                         Console.WriteLine(("Pin" + i + " = " + pins(i).ToString()))
            			End While
            		End Try 
             End Sub 'OnIONotify 
             </code>
             </example>
        </member>
        <member name="M:Symbol.RFID2.IRFIDReader.DisableInputStatusNotification">
            <summary>
            This method stops the Pin notification started by EnableInputStatusNotification method
            This method is supported for XR series readers only.
            </summary>
            <example>
            <code>
            private void DisableIONotify(IRFIDReader reader)
            {
                try
                {
                    reader.DisableInputStatusNotification();
                    reader.InputStatusNotifyEvent -=new ReaderEventHandler(OnIONotify);
                    Console.WriteLine("Command Completed Successfully");
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
             }
             
            //  Visual Basic .NET
            
            Private Sub DisableIONotify(reader As IRFIDReader)
                Try
                    reader.DisableInputStatusNotification()
                    reader.InputStatusNotifyEvent -= New ReaderEventHandler(OnIONotify)
                    Console.WriteLine("Command Completed Successfully")
                Catch ex As Exception
                    Console.WriteLine(ex.Message)
                End Try
            End Sub 'DisableIONotify
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.IRFIDReader.EnableProximitySensor(System.Int32)">
             <summary>
             Enables sensor notification of changes in proximity
             This method is supported in RD5000 reader only.
             <returns></returns>
             </summary>
             <param name="timeIntervalMS">Time interval between consecutive checks,in miliseconds
             </param>
             <example> 
             <code> 
             private void EnableProximitySensor(IRFIDReader reader,int timeIntervalMS)
             {
                 try
                 {
                      reader.EnableProximitySensor(timeIntervalMS);
                      reader.ProximitySensorEvent += new ReaderEventHandler(OnProximitySensor);
                 }
                 catch(Exception e)
                 {
                     Console.WriteLine(e.Message);
                 }
              }
             
              private void OnProximitySensor(object sender, ReaderEventArgs args)
              {
                 try
                 {
                     ProximityEventArgs arg = (ProximityEventArgs)args;
            
                     if (arg == null)
                         return;
            
                     Console.WriteLine("Proximity : " + arg.Proximity.ToString());
                 }
                 catch (Exception ex)
                 {
                     Console.WriteLine(ex.Message);
                 }
              }
              
             //  Visual Basic .NET
             
             Private Sub EnableProximitySensor(reader As IRFIDReader, timeIntervalMS As Integer)
                 Try
                     reader.EnableProximitySensor(timeIntervalMS)
                     AddHandler reader.ProximitySensorEvent, AddressOf OnProximitySensor
                 Catch e As Exception
                     Console.WriteLine(e.Message)
                 End Try
             End Sub 'EnableProximitySensor
            
             Private Sub OnProximitySensor(sender As Object, args As ReaderEventArgs)
                 Try
                     Dim arg As ProximityEventArgs = CType(args, ProximityEventArgs)
                  
                     If arg Is Nothing Then
                         Return
                     End If 
                     Console.WriteLine(("Proximity : " + arg.Proximity.ToString()))
                 Catch ex As Exception
                     Console.WriteLine(ex.Message)
                 End Try
             End Sub 'OnProximitySensor
             </code>
             </example>
        </member>
        <member name="M:Symbol.RFID2.IRFIDReader.DisableProximitySensor">
            <summary>
            Disables sensor notification of changes in proximity
            This method is supported in RD5000 reader only.
            <returns></returns>
            </summary>
            <example > 
            <code> 
            private void DisableProximitySensor(IRFIDReader reader)
            {
                try
                {
                     reader.DisableProximitySensor();
                     reader.ProximitySensorEvent -= new ReaderEventHandler(OnProximitySensor);
                }
                catch(Exception e)
                {
                    Console.WriteLine(e.Message);
                }
            }
            
            //  Visual Basic .NET
                    
            Private Sub DisableProximitySensor(reader As IRFIDReader)
                Try
                    reader.DisableProximitySensor()
                    reader.ProximitySensorEvent -= New ReaderEventHandler(OnProximitySensor)
                Catch e As Exception
                    Console.WriteLine(e.Message)
                End Try
            End Sub 'DisableProximitySensor
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.IRFIDReader.EnableMotionSensor(System.Int32)">
             <summary>
             Enables sensor notification of changes in Motion
             This method is supported in RD5000 reader only.
             </summary>
             <param name="timeIntervalMS">Time interval between consecutive checks,in miliseconds
             </param>
             <example> 
             <code> 
             private void EnableMotionSensor(IRFIDReader reader,int timeIntervalMS)
             {
                 try
                 {
                     reader.EnableMotionSensor(timeIntervalMS);
                     reader.MotionSensorEvent += new ReaderEventHandler(OnMotionSensor);
                 }
                 catch(Exception e)
                 {
                     Console.WriteLine(e.Message);
                 }
             }
             
             private void OnMotionSensor(object sender, ReaderEventArgs args)
             {
                 try
                 {
                     MotionEventArgs arg = (MotionEventArgs)args;
            
                     if (arg == null)
                         return;
            
                     Console.WriteLine("Motion X : " +  arg.XMotion.ToString());
                     Console.WriteLine("Motion Y : " + arg.YMotion.ToString());
                     Console.WriteLine("Motion Z : " + arg.ZMotion.ToString());        
                 }
                 catch (Exception ex)
                 {
                     Console.WriteLine(ex.Message);
                 }
              }
              
             //  Visual Basic .NET
             
             Private Sub EnableMotionSensor(reader As IRFIDReader, timeIntervalMS As Integer)
                 Try
                     reader.EnableMotionSensor(timeIntervalMS)
                     AddHandler reader.MotionSensorEvent, AddressOf OnMotionSensor
                 Catch e As Exception
                     Console.WriteLine(e.Message)
                 End Try
             End Sub 'EnableMotionSensor
            
             Private Sub OnMotionSensor(sender As Object, args As ReaderEventArgs)
                 Try
                     Dim arg As MotionEventArgs = CType(args, MotionEventArgs)
                  
                     If arg Is Nothing Then
                         Return
                     End If 
                     Console.WriteLine(("Motion X : " + arg.XMotion.ToString()))
                     Console.WriteLine(("Motion Y : " + arg.YMotion.ToString()))
                     Console.WriteLine(("Motion Z : " + arg.ZMotion.ToString()))
               
                 Catch ex As Exception
                     Console.WriteLine(ex.Message)
                 End Try
             End Sub 'OnMotionSensor
             </code>
             </example>
        </member>
        <member name="M:Symbol.RFID2.IRFIDReader.DisableMotionSensor">
            <summary>
            Disables sensor notification of changes in Motion
            This method is supported in RD5000 reader only.
            </summary>
            <example > 
            <code> 
            private void DisableMotionSensor(IRFIDReader reader)
            {
                try
                {
                     reader.DisableMotionSensor();
                     reader.MotionSensorEvent -= new ReaderEventHandler(OnMotionSensor);
                }
               catch(Exception e)
               {
                   Console.WriteLine(e.Message);
               }
            }
            
            //  Visual Basic .NET
            
            Private Sub DisableMotionSensor(reader As IRFIDReader)
                Try
                    reader.DisableMotionSensor()
                    reader.MotionSensorEvent -= New ReaderEventHandler(OnMotionSensor)
                Catch e As Exception
                    Console.WriteLine(e.Message)
                End Try
            End Sub 'DisableMotionSensor
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.IRFIDReader.EnableRFIDModule">
            <summary>
            Reader aquires RFID Resources (i.e connects to the device comport and enables RFID functionality)
            This method is supported in Symbol.RFID2.Host assembly and only for the RD5000 reader.
            </summary>
            <example>
            <code>
            private void MyEnableRFIDModule(IRFIDReader reader)
            {
                try
                {
                    reader.EnableRFIDModule();
            
                    Console.WriteLine("Enabling RFID Module");
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error Attempting to Enable RFID Module: " + e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub MyEnableRFIDModule(reader As IRFIDReader)
                Try
                    reader.EnableRFIDModule()
                 
                    Console.WriteLine("Enabling RFID Module")
                Catch e As Exception
                    Console.WriteLine(("Error Attempting to Enable RFID Module: " + e.ToString()))
                End Try
            End Sub 'MyEnableRFIDModule
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.IRFIDReader.DisableRFIDModule">
            <summary>
            Reader releases RFID Resources (i.e. disconnects from the device comport and disables RFID functionality)
            This method is supported in Symbol.RFID2.Host assembly and only for the RD5000 reader.
            </summary>
            <example>
            <code>
            private void MyDisableRFIDModule(IRFIDReader reader)
            {
                try
                {
                    reader.DisableRFIDModule();
            
                    Console.WriteLine("Disabling RFID Module");
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error Attempting to Disable RFID Module: " + e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub MyDisableRFIDModule(reader As IRFIDReader)
                Try
                    reader.DisableRFIDModule()
                 
                    Console.WriteLine("Disabling RFID Module")
                Catch e As Exception
                    Console.WriteLine(("Error Attempting to Disable RFID Module: " + e.ToString()))
                End Try
            End Sub 'MyDisableRFIDModule
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.IRFIDReader.GetRFIDModuleStatus">
            <summary>
            Get Status of the RFID Resources 
            If true RFID functionality will be available.
            This method is supported in Symbol.RFID2.Host assembly and only for the RD5000 reader.
            </summary>
            <returns></returns>
            <example>
            <code>
            private void MyGetRFIDModuleStatus(IRFIDReader reader)
            {
                try
                {
                    Console.WriteLine("RFID Module Status : " + (reader.GetRFIDModuleStatus())? "Yes":"No");
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error Attempting to Get RFID Module Status: " + e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            private void MyGetRFIDModuleStatus(IRFIDReader reader)
                Try
                    Console.WriteLine("RFID Module Status : " + reader.GetRFIDModuleStatus)
                Catch e As Exception
                    Console.WriteLine("Error Attempting to Get RFID Module Status: " + e.ToString());
                End Try
            End Sub 'MyDisableRFIDModule
            </code>
            </example>
        </member>
        <member name="E:Symbol.RFID2.IRFIDReader.TagEvent">
            <summary>
            Event raised after each tag read when the reader is set in AUTONOMOUS mode.
            In case of device reader MC9090 the event is also raised when the reader is set in TRIGGERED mode.
            Data is passed using TagEventArgs
            </summary>
            <example>
            <code> 
            private void SampleTagEvt(IRFIDReader reader)
            {
                try
                {
                  reader.ReadMode = ReadMode.AUTONOMOUS;
                  reader.TagEvent += new ReaderEventHandler(OnTagEvent);
                  Console.WriteLine("Autonomous Mode Set");
                }
                catch (Exception e)
                {
                  Console.WriteLine("Error in Setting AutoMode" + e.Message);
                }
            }
            
            static void OnTagEvent(object sender, ReaderEventArgs args)
            {
                string tagIDStr = String.Empty;
                byte[] tagSN = null;
                
                TagEventArgs tagArgs = (TagEventArgs)args;
                
                IRFIDTag[] Tags = tagArgs.Tags;
                tagSN = Tags[0].TagID;
                
                foreach (byte b in tagSN)
                {
                  tagIDStr += b.ToString("X2");
                }
                Console.WriteLine(Tags[0].TagType +":"+"TagID:" + tagIDStr);
            } 
            
            //  Visual Basic .NET
            
            Private Sub SampleTagEvt(reader As IRFIDReader)
                Try
                    reader.ReadMode = ReadMode.AUTONOMOUS
                    AddHandler reader.TagEvent, AddressOf OnTagEvent
                    Console.WriteLine("Autonomous Mode Set")
                Catch e As Exception
                    Console.WriteLine(("Error in Setting AutoMode" + e.Message))
                End Try
            End Sub 'SampleTagEvt
            
            Shared Sub OnTagEvent(sender As Object, args As ReaderEventArgs)
                Dim tagIDStr As String = [String].Empty
                Dim tagSN As Byte() = Nothing
               
                Dim tagArgs As TagEventArgs = CType(args, TagEventArgs)
               
                Dim Tags As IRFIDTag() = tagArgs.Tags
                tagSN = Tags(0).TagID
               
                Dim b As Byte
                For Each b In  tagSN
                    tagIDStr += b.ToString("X2")
                Next b
                Console.WriteLine((Tags(0).TagType + ":" + "TagID:" + tagIDStr))
            End Sub 'OnReader_TagEvent
            </code>
            </example>
        </member>
        <member name="E:Symbol.RFID2.IRFIDReader.InputStatusNotifyEvent">
            <summary>
            Event notifies the change in status of any of the input pins.
            if reader is enabled for InputStatusNotification
            Data is passed using GPIStatusEventArgs
            It is supported in XR Series Readers only
            </summary>
            <example>
            <code> 
            private void SampleGPIOEvt(IRFIDReader reader)
            {
                try
                {
                  reader.ReadMode = ReadMode.AUTONOMOUS;
                  reader.InputStatusNotifyEvent += new ReaderEventHandler(OnGPIOEvt);
                  Console.WriteLine("Autonomous Mode Set");
                }
                catch (Exception e)
                {
                  Console.WriteLine("Error in Setting AutoMode" + e.Message);
                }
            }
            
            static void OnGPIOEvt(object sender, ReaderEventArgs args)
            {
                
                GPIStatusEventArgs GPIOArgs = (GPIStatusEventArgs)args;
                
                bool[] pins = GPIOArgs.inputPins;
                
                foreach (bool pin in pins)
                {
            			Console.WriteLine("GPIO Pins : " + (pin) ? "ON" : "OFF");
                }
            } 
            
            //  Visual Basic .NET
            
            Private Sub SampleGPIOEvt(reader As IRFIDReader)
                Try
                    reader.ReadMode = ReadMode.AUTONOMOUS
                    AddHandler reader.InputStatusNotifyEvent, AddressOf OnGPIOEvt
                    Console.WriteLine("Autonomous Mode Set")
                Catch e As Exception
                    Console.WriteLine(("Error in Setting AutoMode" + e.Message))
                End Try
            End Sub 'SampleGPIOEvt
            
            Shared Sub OnGPIOEvt(sender As Object, args As ReaderEventArgs)
               
                Dim GPIOArgs As GPIStatusEventArgs = CType(args, GPIStatusEventArgs)
               
                Dim pins As Boolean() = GPIOArgs.inputPins
               
                Dim pin As Boolean
                For Each pin In  pins
                    Console.WriteLine(("GPIO Pins = " + pin))
                Next pin
            End Sub 'OnGPIOEvt
            </code>
            </example>      
        </member>
        <member name="E:Symbol.RFID2.IRFIDReader.ManagementEvent">
             <summary>
             Event notifies the change in status(Active/Inactive) of reader if device is disconnected or reconnected.
             Data is passed using ManagementEventArgs.
             Supported in Symbol.RFID2.Host assembly.
             </summary>
             <example>
             <code> 
             private void SampleMgrEvt(IRFIDReader reader)
             {
                 try
                 {
                     reader.ReadMode = ReadMode.AUTONOMOUS;
                     reader.ManagementEvent += new ReaderEventHandler(OnMgrEvt);
                     Console.WriteLine("Autonomous Mode Set");
                 }
                 catch (Exception e)
                 {
                     Console.WriteLine("Error in Setting AutoMode" + e.Message);
                 }
             }
             
             static void OnMgrEvt(object sender, ReaderEventArgs args)
             {
                 int j=0;
                 string tagIDStr = String.Empty;
                 byte[] tagSN = null;
                 
                 ManagementEventArgs MgrArgs = (ManagementEventArgs)args;
                 
                 AntennaConfig[] AntStatus = MgrArgs.AntennaStatus;
                 
                 console.WriteLine("ReaderStatus : " + MgrArgs.readerStatus.ToString());
                 
                 foreach (AntennaConfig[] ant in AntStatus )
                 {
            	        ++j;
            		    Console.WriteLine("Antenna["+j.ToString()+"] Status: " + ant.ToString());
                 }
             } 
             
             //  Visual Basic .NET
             
             Private Sub SampleMgrEvt(reader As IRFIDReader)
                 Try
                     reader.ReadMode = ReadMode.AUTONOMOUS
                     AddHandler reader.ManagementEvent, AddressOf OnMgrEvt
                     Console.WriteLine("Autonomous Mode Set")
                 Catch e As Exception
                     Console.WriteLine(("Error in Setting AutoMode" + e.Message))
                 End Try
             End Sub 'SampleMgrEvt
            
             Shared Sub OnMgrEvt(sender As Object, args As ReaderEventArgs)
                 Dim j As Integer = 0
                 Dim tagIDStr As String = [String].Empty
                 Dim tagSN As Byte() = Nothing
               
                 Dim MgrArgs As ManagementEventArgs = CType(args, ManagementEventArgs)
               
                 Dim AntStatus As AntennaConfig() = MgrArgs.AntennaStatus
               
                 console.WriteLine(("ReaderStatus : " + MgrArgs.readerStatus.ToString()))
               
                 Dim ant As AntennaConfig()
                 For Each ant In  AntStatus
                     Console.WriteLine(("Antenna[" + j.ToString() + "] Status: " + ant.ToString()))
                 Next ant
             End Sub 'OnMgrEvt
             </code>
             </example>
        </member>
        <member name="E:Symbol.RFID2.IRFIDReader.MotionSensorEvent">
             <summary>
             Event notifies the change in relative motion 
             Data is passed using MotionEventArgs
             Supported for RD5000 Readers only.
             </summary>
             <example>
             <code> 
             private void SampleMotionEvt(IRFIDReader reader)
             {
                 try
                 {
            		    reader.ReadMode = ReadMode.AUTONOMOUS;
                     reader.MotionSensorEvent += new ReaderEventHandler(OnMotionEvt);
                     Console.WriteLine("Autonomous Mode Set");
                 }
                 catch (Exception e)
                 {
                     Console.WriteLine("Error in Setting AutoMode" + e.Message);
                 }
             }
             
             static void OnMotionEvt(object sender, ReaderEventArgs args)
             {
                 MotionEventArgs MotionArgs = (MotionEventArgs)args;
                 
                 UInt16  xMotion= MotionArgs.xMotion ;
                 UInt16  yMotion= MotionArgs.yMotion ;
                 UInt16  zMotion= MotionArgs.zMotion ;
                 console.WriteLine("X-Motion : " + MotionArgs.xMotion.ToString());
                 console.WriteLine("Y-Motion : " + MotionArgs.yMotion.ToString());
                 console.WriteLine("Z-Motion : " + MotionArgs.zMotion.ToString());
             } 
             
             //  Visual Basic .NET
             
             Private Sub SampleMotionEvt(reader As IRFIDReader)
                 Try
                     reader.ReadMode = ReadMode.AUTONOMOUS
                     AddHandler reader.MotionSensorEvent, AddressOf OnMotionEvt
                     Console.WriteLine("Autonomous Mode Set")
                 Catch e As Exception
                     Console.WriteLine(("Error in Setting AutoMode" + e.Message))
                 End Try
             End Sub 'SampleMotionEvt
            
             Shared Sub OnMotionEvt(sender As Object, args As ReaderEventArgs)
                 Dim MotionArgs As MotionEventArgs = CType(args, MotionEventArgs)
               
                 Dim xMotion As UInt16 = MotionArgs.xMotion
                 Dim yMotion As UInt16 = MotionArgs.yMotion
                 Dim zMotion As UInt16 = MotionArgs.zMotion
                 console.WriteLine(("X-Motion : " + MotionArgs.xMotion.ToString()))
                 console.WriteLine(("Y-Motion : " + MotionArgs.yMotion.ToString()))
                 console.WriteLine(("Z-Motion : " + MotionArgs.zMotion.ToString()))
             End Sub 'OnMotionEvt
             </code>
             </example>
        </member>
        <member name="E:Symbol.RFID2.IRFIDReader.ProximitySensorEvent">
             <summary>
             Event notifies the change in relative proximity
             Data is passed using ProximityEventArgs
             Supported for RD5000 Readers only
             </summary>
             <example>
             <code> 
             private void SampleProxEvt(IRFIDReader reader)
             {
                 try
                 {
            	        reader.ReadMode = ReadMode.AUTONOMOUS;
                     reader.ProximitySensorEvent += new ReaderEventHandler(OnProximityEvt);
                     Console.WriteLine("Autonomous Mode Set");
                 }
                 catch (Exception e)
                 {
                     Console.WriteLine("Error in Setting AutoMode" + e.Message);
                 }
             }
             
             static void OnProximityEvt(object sender, ReaderEventArgs args)
             {
                 int j=0;
                 
                 ProximityEventArgs PrxArgs = (ProximityEventArgs)args;
                 
                 UInt16 proximity = PrxArgs.proximity ;
                 
                 console.WriteLine("Proximity : " + proximity.ToString());
             } 
             
             //  Visual Basic .NET
             
             Private Sub SampleProxEvt(reader As IRFIDReader)
                 Try
                     reader.ReadMode = ReadMode.AUTONOMOUS
                     AddHandler reader.ProximitySensorEvent, AddressOf OnProximityEvt
                     Console.WriteLine("Autonomous Mode Set")
                 Catch e As Exception
                     Console.WriteLine(("Error in Setting AutoMode" + e.Message))
                 End Try
             End Sub 'SampleProxEvt
            
             Shared Sub OnProximityEvt(sender As Object, args As ReaderEventArgs)
                 Dim j As Integer = 0
               
                 Dim PrxArgs As ProximityEventArgs = CType(args, ProximityEventArgs)
               
                 Dim proximity As UInt16 = PrxArgs.proximity
               
                 console.WriteLine(("Proximity : " + proximity.ToString()))
             End Sub 'OnProximityEvt
             </code>
             </example>
        </member>
        <member name="E:Symbol.RFID2.IRFIDReader.TriggerPressedEvent">
             <summary>
             Event notifies that trigger has been pressed
             Data is passed using TriggerEventArgs 
             Supported for MC9090 Series Readers only
             </summary>
             <example>
             <code> 
             private void SampleTrigPEvt(IRFIDReader reader)
             {
                 try
                 {
                     reader.ReadMode = ReadMode.TRIGGERED;
                     reader.TriggerPressedEvent += new ReaderEventHandler(OnTriggerEvt);
                     Console.WriteLine("Autonomous Mode Set");
                 }
                 catch (Exception e)
                 {
                     Console.WriteLine("Error in Setting Triggered Mode" + e.Message);
                 }
             }
             
             static void OnTriggerEvt(object sender, ReaderEventArgs args)
             {
                 TriggerEventArgs TrigArgs = (TriggerEventArgs)args;
                 
                 TriggerState trigger = TrigArgs.TriggerState;
                 
                 console.WriteLine("Trigger : " + trigger.ToString());
             } 
             
             //  Visual Basic .NET
             
             Private Sub SampleTrigPEvt(reader As IRFIDReader)
                 Try
                     reader.ReadMode = ReadMode.TRIGGERED
                     AddHandler reader.TriggerPressedEvent, AddressOf OnTriggerEvt
                     Console.WriteLine("Autonomous Mode Set")
                 Catch e As Exception
                     Console.WriteLine(("Error in Setting Triggered Mode" + e.Message))
                 End Try
             End Sub 'SampleTrigPEvt
            
             Shared Sub OnTriggerEvt(sender As Object, args As ReaderEventArgs)
                 Dim TrigArgs As TriggerEventArgs = CType(args, TriggerEventArgs)
               
                 Dim trigger As TriggerState = TrigArgs.TriggerState
               
                 console.WriteLine(("Trigger : " + trigger.ToString()))
             End Sub 'OnTriggerEvt
             </code>
             </example>
        </member>
        <member name="E:Symbol.RFID2.IRFIDReader.RFIDStatusMonitorEvent">
             <summary>
             Event notifies the RFID status 
             Data is passed using RFIDStatusMonitorEventArgs 
             Supported in Symbol.RFID2.Host assembly.
             </summary>
             <example>
             <code> 
            private void SampleMonitorEvt(IRFIDReader reader)
            {
                 try
                 {
                     reader.ReadMode = ReadMode.AUTONOMOUS;
                     reader.TriggerPressedEvent += new ReaderEventHandler(OnMonitorEvt);
                     Console.WriteLine("Autonomous Mode Set");
                 }
                 catch (Exception e)
                 {
                     Console.WriteLine("Error in Setting AutoMode" + e.Message);
                 }
             }
             
             static void OnMonitorEvt(object sender, ReaderEventArgs args)
             {
                 RFIDStatusMonitorEventArgs MonitorArgs = (RFIDStatusMonitorEventArgs)args;
                 
                 bool enableRfid = MonitorArgs.enableRFID;
                 
                 console.WriteLine("RFID Enabled ? -- " + (enableRfid) ? "YES" : "NO");
             } 
             
             //  Visual Basic .NET
             
             Private Sub SampleMonitorEvt(reader As IRFIDReader)
                 Try
                     reader.ReadMode = ReadMode.AUTONOMOUS
                     AddHandler reader.TriggerPressedEvent, AddressOf OnMonitorEvt
                     Console.WriteLine("Autonomous Mode Set")
                 Catch e As Exception
                     Console.WriteLine(("Error in Setting AutoMode" + e.Message))
                 End Try
             End Sub 'SampleMonitorEvt
            
             Shared Sub OnMonitorEvt(sender As Object, args As ReaderEventArgs)
                 Dim MonitorArgs As RFIDStatusMonitorEventArgs = CType(args, RFIDStatusMonitorEventArgs)
               
                 Dim enableRfid As Boolean = MonitorArgs.enableRFID
               
                 console.WriteLine(("RFID Enabled ? -- " <![CDATA[ & ]]>enableRfid.ToString()))
             End Sub 'OnMonitorEvt
             </code>
             </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDReader.Model">
            <summary>
            Gets the Model Name of the reader
            </summary>
            <example>
            <code>
            private static void GetReaderModel(IRFIDReader reader)
            {
                try
                {
                    string readerModel = reader.Model;
                    Console.WriteLine("Reader Model:" + readerModel );
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in getting Reader Model : " + e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Shared Sub GetReaderModel(reader As IRFIDReader)
                Try
                    Dim readerModel As String = reader.Model
                    Console.WriteLine(("Reader Model:" + readerModel))
                Catch e As Exception
                    Console.WriteLine(("Error in getting Reader Model : " + e.ToString()))
                End Try
            End Sub 'GetReaderModel
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDReader.ReaderName">
            <summary>
            Gets the reader name
            </summary>
            <example>
            <code>
            private void GetReaderName(IRFIDReader reader)
            {
              try
                {
                    string readerName =  reader.ReaderName;
                    Console.WriteLine("Reader Name:" + readerName);
                }
              catch(Exception e)
               {
                    Console.WriteLine("Error in getting Reader Name : " + e.ToString());
               }
            }
            
            //  Visual Basic .NET
            
            Private Sub GetReaderName(reader As IRFIDReader)
                Try
                    Dim readerName As String = reader.ReaderName
                    Console.WriteLine(("Reader Name:" + readerName))
                Catch e As Exception
                    Console.WriteLine(("Error in getting Reader Name : " + e.ToString()))
                End Try
            End Sub 'GetReaderName
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDReader.ReaderDescription">
            <summary>
            Gets the reader description
            </summary>
            <example>
            <code>
            private void GetReaderDescription(IRFIDReader reader)
            {
                try
                {
                    string description = reader.ReaderDescription;
                    Console.WriteLine("Reader Description:" + description );
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in getting Reader Description : " + e.ToString());
                }
            
            }
            
            //  Visual Basic .NET
            
            Private Sub GetReaderDescription(reader As IRFIDReader)
                Try
                    Dim description As String = reader.ReaderDescription
                    Console.WriteLine(("Reader Description:" + description))
                Catch e As Exception
                    Console.WriteLine(("Error in getting Reader Description : " + e.ToString()))
                End Try
            End Sub 'GetReaderDescription 
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDReader.IpAddress">
            <summary>
            Gets IP address of the reader
            Supported in Symbol.RFID2.Host assembly.
            </summary>
            <example>
            <code>
            private void GetIPAddress(IRFIDReader reader)
            {
                try
                {
                    string ipAddress = reader.IpAddress;
                    Console.WriteLine("Reader IP Address:" + ipAddress);
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in getting IP Address : " + e.ToString());
                }
            
            }
            
            //  Visual Basic .NET
            
            Private Sub GetIPAddress(reader As IRFIDReader)
                Try
                    Dim ipAddress As String = reader.IpAddress
                    Console.WriteLine(("Reader IP Address:" + ipAddress))
                Catch e As Exception
                    Console.WriteLine(("Error in getting IP Address : " + e.ToString()))
                End Try
            End Sub 'GetIPAddress 
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDReader.TcpPort">
            <summary>
            Gets TCP port at which the reader is connected.
            Supported in Symbol.RFID2.Host assembly.
            </summary>
            <example>
            <code>
            private void GetTCPPort(IRFIDReader reader)
            {
                try
                {
                    string tcpPort = reader.TcpPort;
                    Console.WriteLine("Reader TCP Port:" + tcpPort);
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in getting TCP Port : " + e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub GetTCPPort(reader As IRFIDReader)
               Try
                  Dim tcpPort As String = reader.TcpPort
                  Console.WriteLine(("Reader TCP Port:" + tcpPort))
               Catch e As Exception
                  Console.WriteLine(("Error in getting TCP Port : " + e.ToString()))
               End Try
            End Sub 'GetTCPPort
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDReader.HttpPort">
            <summary>
            Gets HTTP port at which the reader is connected
            Supported in Symbol.RFID2.Host assembly for XR series.
            </summary>
            <example>
            <code>
            private void GetHTTPPort(IRFIDReader reader)
            {
                try
                {
                    string httpPort =  reader.HttpPort;
                    Console.WriteLine("Reader HTTP Port:" + httpPort);
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in getting HTTP Port : " + e.ToString());
                }
            
            }
            
            //  Visual Basic .NET
            
            Private Sub GetHTTPPort(reader As IRFIDReader)
                Try
                    Dim httpPort As String = reader.HttpPort
                    Console.WriteLine(("Reader HTTP Port:" + httpPort))
                Catch e As Exception
                    Console.WriteLine(("Error in getting HTTP Port : " + e.ToString()))
                End Try
            End Sub 'GetHTTPPort 
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDReader.NotificationPort">
            <summary>
            Gets the Notification port of the reader 
            Supported in Symbol.RFID2.Host assembly for XR series.
            </summary>
            <example>
            <code>
            private void GetNotificationPort(IRFIDReader reader)
            {
                try
                {
                    Console.WriteLine("Reader Notification Port:" + reader.NotificationPort);
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in getting Notification Port : " + e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub GetNotificationPort(reader As IRFIDReader)
                Try
                    Console.WriteLine(("Reader Notification Port:" + reader.NotificationPort))
                Catch e As Exception
                    Console.WriteLine(("Error in getting Notification Port : " + e.ToString()))
                End Try
            End Sub 'GetNotificationPort
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDReader.ComPort">
            <summary>
            Gets the Com port at which the reader is connected  (for serial communication)
            Supported in Symbol.RFID2.Device assembly.
            </summary>
            <example>
            <code>
            private void GetComPort(IRFIDReader reader)
            {
                try
                {
            		Console.WriteLine("Reader ComPort Port:" + reader.ComPort);
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in getting ComPort Port : " + e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub GetComPort(reader As IRFIDReader)
                Try
                    Console.WriteLine(("Reader ComPort Port:" + reader.ComPort))
                Catch e As Exception
                    Console.WriteLine(("Error in getting ComPort Port : " + e.ToString()))
                End Try
            End Sub 'GetComPort
            </code>
            </example> 
        </member>
        <member name="P:Symbol.RFID2.IRFIDReader.BaudRate">
            <summary>
            Gets the Baud Rate at which the reader is connected (for serial communication)
            Supported in Symbol.RFID2.Device assembly.
            </summary>
            <example>
            <code>
            private void GetBaudRate(IRFIDReader reader)
            {
                try
                {
                    Console.WriteLine("Reader BaudRate:" + reader.BaudRate);
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in getting BaudRate : " + e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub GetBaudRate(reader As IRFIDReader)
                Try
                    Console.WriteLine(("Reader BaudRate:" + reader.BaudRate))
                Catch e As Exception
                    Console.WriteLine(("Error in getting BaudRate : " + e.ToString()))
                End Try
            End Sub 'GetBaudRate
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDReader.NTPServer">
            <summary>
            Gets/Sets NTPServer name.
            Supported in Symbol.RFID2.Host for XR series readers.
            </summary>
            <example>
            <code>
            private void MyGetNTPServer(IXRSeriesReader reader)
            {
                try
                {
                    Console.WriteLine("NTPServer:" + reader.NTPServer);
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in getting NTPServer : " + e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub MyGetNTPServer(reader As IXRSeriesReader)
                Try
                    Console.WriteLine(("NTPServer:" + reader.NTPServer))
                Catch e As Exception
                    Console.WriteLine(("Error in getting NTPServer : " + e.ToString()))
                End Try
            End Sub 'MyGetNTPServer
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDReader.NotificationAddress">
            <summary>
             Gets the Notification server address from reader. 
            Supported in Symbol.RFID2.Host for XR series readers.
            </summary>
            <example>
            <code>
            private void GetNotificationAddress(IRFIDReader reader)
            {
                try
                {
                    Console.WriteLine("NotificationAddress:" + reader.NotificationAddress);
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in getting NotificationAddress : " + e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub GetNotificationAddress(reader As IRFIDReader)
                Try
                    Console.WriteLine(("NotificationAddress:" + reader.NotificationAddress))
                Catch e As Exception
                    Console.WriteLine(("Error in getting NotificationAddress : " + e.ToString()))
                End Try
            End Sub 'GetNotificationAddress
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDReader.ReaderCapability">
            <summary>
            Get Reader Capability. The capabilities returned includes 
            the reader mode, heartbeat, RF Survey, Hopping, GPIO, UTC Lock, NTP Client and Logging.
            </summary>
            <example>
            <code>
            private void GetReaderCapabilities(IRFIDReader reader)
            {
                try
                {
                    ReaderCapability readerCap = reader.ReaderCapability;
                    Console.WriteLine("---Reader Capabilities---");
                    Console.WriteLine();
                    Console.WriteLine("AutoModeSupported  :" + readerCap.AutoModeSupported.ToString());
                    Console.WriteLine("GPIOSupported      :" + readerCap.GPIOSupported.ToString());
                    Console.WriteLine("HeartBeatSupported :" + readerCap.HeartBeatSupported.ToString());
                    Console.WriteLine("HoppingSupported   :" + readerCap.HoppingSupported.ToString());
                    Console.WriteLine("LoggingSupported   :" + readerCap.LoggingSupported.ToString());
                    Console.WriteLine("NTPClientSupported :" + readerCap.NTPClientSupported.ToString());
                    Console.WriteLine("OnDemandSupported  :" + readerCap.OnDemandSupported.ToString());
                    Console.WriteLine("RFSurveySupported  :" + readerCap.RFSurveySupported.ToString());
                    Console.WriteLine("UTCClockSupported  :" + readerCap.UTCClockSupported.ToString());
                    Console.WriteLine();
                    Console.WriteLine("---End Of Reader Capabilities---");
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in Getting Reader Capability :");
                    Console.WriteLine(e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub GetReaderCapabilities(reader As IRFIDReader)
                Try
                    Dim readerCap As ReaderCapability = reader.ReaderCapability
                    Console.WriteLine("---Reader Capabilities---")
                    Console.WriteLine()
                    Console.WriteLine(("AutoModeSupported  :" + readerCap.AutoModeSupported.ToString()))
                    Console.WriteLine(("GPIOSupported      :" + readerCap.GPIOSupported.ToString()))
                    Console.WriteLine(("HeartBeatSupported :" + readerCap.HeartBeatSupported.ToString()))
                    Console.WriteLine(("HoppingSupported   :" + readerCap.HoppingSupported.ToString()))
                    Console.WriteLine(("LoggingSupported   :" + readerCap.LoggingSupported.ToString()))
                    Console.WriteLine(("NTPClientSupported :" + readerCap.NTPClientSupported.ToString()))
                    Console.WriteLine(("OnDemandSupported  :" + readerCap.OnDemandSupported.ToString()))
                    Console.WriteLine(("RFSurveySupported  :" + readerCap.RFSurveySupported.ToString()))
                    Console.WriteLine(("UTCClockSupported  :" + readerCap.UTCClockSupported.ToString()))
                    Console.WriteLine()
                    Console.WriteLine("---End Of Reader Capabilities---")
                Catch e As Exception
                    Console.WriteLine("Error in Getting Reader Capability :")
                    Console.WriteLine(e.ToString())
                End Try
            End Sub 'GetReaderCapabilities
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDReader.ReaderInfo">
             <summary>
             Get Reader Information.ReaderInfo includes Reader information like
             Serial Number, Model Number, Manufacturer, Manufacturing Date, 
             HW version, BL Version and FW version
             </summary>
             <example>
             <code>
             private void GetReaderInfo(IRFIDReader reader)
             {
                 try
                 {
                     ReaderInfo readerInfo = reader.ReaderInfo;
                     Console.WriteLine("---ReaderInfo---");
                     Console.WriteLine("BootLoader Version  :" + readerInfo.BootLoaderVersion);
                     Console.WriteLine("Device Model Number :" + readerInfo.DeviceModelNumber);
                     Console.WriteLine("Device Serial Number:" + readerInfo.DeviceSerialNumber);
                     Console.WriteLine("Firmware Version    :" + readerInfo.FirmwareVersion);
                     Console.WriteLine("HardwareVersion     :" + readerInfo.HardwareVersion);
                     Console.WriteLine("Manufacture Date    :" + readerInfo.ManufactureDate);
                     Console.WriteLine("Manufacturer Name   :" + readerInfo.ManufacturerName);
                     Console.WriteLine();
                     Console.WriteLine("---End Of ReaderInfo---");
                 }
                 catch (Exception e)
                 {
                     Console.WriteLine("Error in Getting Reader Info");
                     Console.WriteLine(e.ToString());
                 }
             }
             
             //  Visual Basic .NET
            
             Private Sub GetReaderInfo(reader As IRFIDReader)
                 Try
                     Dim readerInfo As ReaderInfo = reader.ReaderInfo
                     Console.WriteLine("---ReaderInfo---")
                     Console.WriteLine(("BootLoader Version  :" + readerInfo.BootLoaderVersion))
                     Console.WriteLine(("Device Model Number :" + readerInfo.DeviceModelNumber))
                     Console.WriteLine(("Device Serial Number:" + readerInfo.DeviceSerialNumber))
                     Console.WriteLine(("Firmware Version    :" + readerInfo.FirmwareVersion))
                     Console.WriteLine(("HardwareVersion     :" + readerInfo.HardwareVersion))
                     Console.WriteLine(("Manufacture Date    :" + readerInfo.ManufactureDate))
                     Console.WriteLine(("Manufacturer Name   :" + readerInfo.ManufacturerName))
                     Console.WriteLine()
                     Console.WriteLine("---End Of ReaderInfo---")
                 Catch e As Exception
                     Console.WriteLine("Error in Getting Reader Info")
                     Console.WriteLine(e.ToString())
                 End Try
             End Sub 'GetReaderInfo
             </code>
             </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDReader.NumberOfGPIs">
             <summary>
             Get Number Of GPIs
             </summary>
             <example>
             <code>
             private void GetNumberOfGPIs (IRFIDReader reader)
             {
                 try
                 {
                     Console.WriteLine("NumberOfGPIs: " + reader.NumberOfGPIs);
                 }
                 catch(Exception e)
                 {
                     Console.WriteLine("Error in getting NumberOfGPIs : " + e.ToString());
                 }
             }
             
             //  Visual Basic .NET
            
             Private Sub GetNumberOfGPIs(reader As IRFIDReader)
                 Try
                     Console.WriteLine(("NumberOfGPIs: " + reader.NumberOfGPIs))
                 Catch e As Exception
                     Console.WriteLine(("Error in getting NumberOfGPIs : " + e.ToString()))
                 End Try
             End Sub 'GetNumberOfGPIs
             </code>
             </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDReader.NumberOfGPOs">
             <summary>
             Get Number Of GPOs.
             Supported in Symbol.RFID2.Host and for XR series only.
             </summary>
             <example>
             <code>
             private void GetNumberOfGPOs (IRFIDReader reader)
             {
                 try
                 {
                     Console.WriteLine("NumberOfGPOs: " + reader.NumberOfGPOs);
                 }
                 catch(Exception e)
                 {
                     Console.WriteLine("Error in getting NumberOfGPOs : " + e.ToString());
                 }
             }
             
             //  Visual Basic .NET
            
             Private Sub GetNumberOfGPOs(reader As IRFIDReader)
                 Try
                     Console.WriteLine(("NumberOfGPOs: " + reader.NumberOfGPOs))
                 Catch e As Exception
                     Console.WriteLine(("Error in getting NumberOfGPOs : " + e.ToString()))
                 End Try
             End Sub 'GetNumberOfGPOs
             </code>
             </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDReader.SDKVersionNumber">
             <summary>
             Returns Assembly Version as SDK Version
             </summary>
             <example>
             <code>
             private void GetSDKVersion(IRFIDReader reader)
             {
                 try
                 {
                     Console.WriteLine("SDK version Number:" + reader.SDKVersionNumber);
                 }
                 catch(Exception e)
                 {
                     Console.WriteLine("Error in getting SDK version Number : " + e.ToString());
                 }
             }
             
             //  Visual Basic .NET
            
             Private Sub GetSDKVersion(reader As IRFIDReader)
                 Try
                     Console.WriteLine(("SDK version Number:" + reader.SDKVersionNumber))
                 Catch e As Exception
                     Console.WriteLine(("Error in getting SDK version Number : " + e.ToString()))
                 End Try
             End Sub 'GetSDKVersion
             </code>
             </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDReader.TagTypesSupported">
            <summary>
            Returns array of TagTypes Supported by the reader model
            </summary>
            <example>
            <code>
            private void GetTagTypesSupported(IRFIDReader reader)
            {
                try
                {
                    foreach (TagType type in reader.TagTypesSupported)
                    {
                        Console.WriteLine("Tag Types:" + type.ToString());
                    }
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in getting Tag Types : " + e.ToString());
                }
            }
            
            //  Visual Basic .NET
               
            Private Sub GetTagTypesSupported(reader As IRFIDReader)
                Try
                    Dim type As TagType
                    For Each type In  reader.TagTypesSupported
                        Console.WriteLine(("Tag Types:" + type.ToString()))
                    Next type
                Catch e As Exception
                    Console.WriteLine(("Error in getting Tag Types : " + e.ToString()))
                End Try
            End Sub 'GetTagTypesSupported
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDReader.DateTime">
            <summary>
            Returns Current Date Time  of the reader.
            Supported in Symbol.RFID2.Host assembly
            </summary>
            <example>
            <code>
            private void GetDateAndTime(IRFIDReader reader)
            {
                try
                {
                    Console.WriteLine("Date and Time:" + reader.DateTime.Now);
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in getting Date and Time : " + e.ToString());
                }
            }
            
            DateTime tym = new DateTime(2007, 05, 31, 12, 41, 50, 50);
            
            private void SetDateAndTime(IRFIDReader reader, DateTime tym)
            {
                try
                {
                    reader.DateTime = tym;
            
                    Console.WriteLine("Date and Time:" + reader.DateTime.Now);
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in getting Date and Time : " + e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub GetDateAndTime(reader As IRFIDReader)
                Try
                    Console.WriteLine(("Date and Time:" + reader.DateTime.Now))
                Catch e As Exception
                    Console.WriteLine(("Error in getting Date and Time : " + e.ToString()))
                End Try
            End Sub 'GetDateAndTime
            
            Dim tym As New DateTime(2007, 5, 31, 12, 41, 50, 50)
            
            Private Sub SetDateAndTime(reader As IRFIDReader, tym As DateTime)
                Try
                    reader.DateTime = tym
                  
                    Console.WriteLine(("Date and Time:" + reader.DateTime.Now))
                Catch e As Exception
                    Console.WriteLine(("Error in getting Date and Time : " + e.ToString()))
                End Try
            End Sub 'SetDateAndTime
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDReader.CommandTimeout">
            <summary>
            Gets/Sets the timeout of the readercommands in milliseconds.
            Supported in Symbol.RFID2.Host assembly
            </summary>
            <example>
            <code>
            private void GetCommandTimeout(IRFIDReader reader)
            {
                try
                {
                    Console.WriteLine("Command Timeout:" + reader.CommandTimeout);
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in getting CommandTimeout : " + e.ToString());
                }
            }
            
            int cyctym=666;
            
            private void SetCommandTimeout(IRFIDReader reader, int cyctym)
            {
                try
                {
                    reader.CommandTimeout = tymout;
            
                    Console.WriteLine("Command Timeout:" + reader.CommandTimeout);
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in getting CommandTimeout : " + e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub GetCommandTimeout(reader As IRFIDReader)
                Try
                    Console.WriteLine(("Command Timeout:" + reader.CommandTimeout))
                Catch e As Exception
                    Console.WriteLine(("Error in getting CommandTimeout : " + e.ToString()))
                End Try
            End Sub 'GetCommandTimeout
            
            Dim cyctym As Integer = 666
            
            Private Sub SetCommandTimeout(reader As IRFIDReader, cyctym As Integer)
                Try
                    reader.CommandTimeout = tymout
                  
                    Console.WriteLine(("Command Timeout:" + reader.CommandTimeout))
                Catch e As Exception
                    Console.WriteLine(("Error in getting CommandTimeout : " + e.ToString()))
                End Try
            End Sub 'SetCommandTimeout
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDReader.NoOfAntenna">
             <summary>
             Get the count of Antenna (Sources) that can be addressed
             </summary>
             <example>
             <code>
             private void GetNoOfAntenna(IRFIDReader reader)
             {
                 try
                 {
                     Console.WriteLine("Command Timeout:" + reader.NoOfAntenna);
                 }
                 catch(Exception e)
                 {
                     Console.WriteLine("Error in getting Number Of Antenna : " + e.ToString());
                 }
             }
             
             //  Visual Basic .NET
            
             Private Sub GetNoOfAntenna(reader As IRFIDReader)
                 Try
                     Console.WriteLine(("Command Timeout:" + reader.NoOfAntenna))
                 Catch e As Exception
                     Console.WriteLine(("Error in getting Number Of Antenna : " + e.ToString()))
                 End Try
             End Sub 'GetNoOfAntenna 
             </code>
             </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDReader.Antennas">
             <summary>
             Get Antenna Configurations for all antennas.
             </summary>
             <example>
             <code>
             private void GetAntennaConfig(IRFIDReader reader)
             {
               try
               {
                 AntennaConfig[] antcfg = reader.Antennas;
             
                 foreach (AntennaConfig ant in antcfg.Antennas)
                 {
                   Console.WriteLine("Antenna Configuration For : " + ant.AntennaName.ToString());
                   Console.WriteLine("  Port.......... " + ant.PortNumber.ToString());
                   Console.WriteLine("  TagTypes...... ");
                   foreach (TagType type in ant.AntennasTagTypesSupported)
                   {
                     Console.WriteLine("    " + Type.ToString());
                   }
                   Console.WriteLine("  txPower...... " + ant.TxPower.ToString());
                   Console.WriteLine("  rxPower...... " + ant.RxPower.ToString());
                   Console.WriteLine("  Connected?... " + ant.IsConnected.ToString());
                   Console.WriteLine("  Enabled?..... " + ant.IsEnabled.ToString());
                 }
               }
               catch(Exception e)
               {
                     Console.WriteLine("Error in getting Antenna Config : " + e.ToString());
               }
             }
             
             //  Visual Basic .NET
            
             Private Sub GetAntennaConfig(reader As IRFIDReader)
                 Try
                     Dim antcfg As AntennaConfig() = reader.Antennas
                   
                     Dim ant As AntennaConfig
                     For Each ant In  antcfg.Antennas
                         Console.WriteLine(("Antenna Configuration For : " + ant.AntennaName.ToString()))
                         Console.WriteLine(("  Port.......... " + ant.PortNumber.ToString()))
                         Console.WriteLine("  TagTypes...... ")
                         Dim type As TagType
                         For Each type In  ant.AntennasTagTypesSupported
                             Console.WriteLine(("    " + Type.ToString()))
                         Next type
                         Console.WriteLine(("  txPower...... " + ant.TxPower.ToString()))
                         Console.WriteLine(("  rxPower...... " + ant.RxPower.ToString()))
                         Console.WriteLine(("  Connected?... " + ant.IsConnected.ToString()))
                         Console.WriteLine(("  Enabled?..... " + ant.IsEnabled.ToString()))
                     Next ant
                 Catch e As Exception
                     Console.WriteLine(("Error in getting Antenna Config : " + e.ToString()))
                 End Try
             End Sub 'GetAntennaConfig
             </code>
             </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDReader.ReaderCycleTimeInMS">
             <summary>
             Gets/Sets reader cycle interval (in miliseconds) in autonomous read mode
             Applicatble only for XR series readers
             </summary>
             <example>
             <code>
             private void GetReaderCycleTimeInMS(IRFIDReader reader)
             {
                 try
                 {
                     Console.WriteLine("Reader Cycle Time In msec:" + reader.ReaderCycleTimeInMS);
                 }
                 catch(Exception e)
                 {
                     Console.WriteLine("Error in getting Reader Cycle Time In msec : " + e.ToString());
                 }
             }
             
             int cyctym=666;
             
             private void SetCommandTimeout(IRFIDReader reader, int cyctym)
             {
                 try
                 {
                     reader.ReaderCycleTimeInMS = tymout;
             
                     Console.WriteLine("Command Timeout:" + reader.ReaderCycleTimeInMS);
                 }
                 catch(Exception e)
                 {
                     Console.WriteLine("Error in getting CommandTimeout : " + e.ToString());
                 }
             }
             
             //  Visual Basic .NET
            
             Private Sub GetReaderCycleTimeInMS(reader As IRFIDReader)
                 Try
                     Console.WriteLine(("Reader Cycle Time In msec:" + reader.ReaderCycleTimeInMS))
                 Catch e As Exception
                     Console.WriteLine(("Error in getting Reader Cycle Time In msec : " + e.ToString()))
                 End Try
             End Sub 'GetReaderCycleTimeInMS
             
             Dim cyctym As Integer = 666
             
             Private Sub SetCommandTimeout(reader As IRFIDReader, cyctym As Integer)
                 Try
                     reader.ReaderCycleTimeInMS = tymout
                   
                     Console.WriteLine(("Command Timeout:" + reader.ReaderCycleTimeInMS))
                 Catch e As Exception
                     Console.WriteLine(("Error in getting CommandTimeout : " + e.ToString()))
                 End Try
             End Sub 'SetCommandTimeout
             </code>
             </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDReader.MaxTxPower">
            <summary>
            Get the maximum TxPower.
            </summary>
            <example>
            <code> 
            private void GetTxPowerRange(IRFIDReader reader)
            {
                try
                {
                    int txMax = reader.MaxTxPower;
                    int txMin = reader.MinTxPower;
            
                    Console.WriteLine("The maximum TX power :" + txMax);
                    Console.WriteLine("The minimum TX power :" + txMin);
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error in getting Maximum/Minimun TX Power level");
                    Console.WriteLine(e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub GetTxPowerRange(reader As IRFIDReader)
               Try
                  Dim txMax As Integer = reader.MaxTxPower
                  Dim txMin As Integer = reader.MinTxPower
                  
                  Console.WriteLine(("The maximum TX power :" + txMax))
                  Console.WriteLine(("The minimum TX power :" + txMin))
               Catch e As Exception
                  Console.WriteLine("Error in getting Maximum/Minimun TX Power level")
                  Console.WriteLine(e.ToString())
               End Try
            End Sub 'GetTxPowerRange
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDReader.MinTxPower">
            <summary>
            Get the minimum TxPower.
            </summary>
            <example>
            <code> 
            private void GetTxPowerRange(IRFIDReader reader)
            {
                try
                {
                    int txMax = reader.MaxTxPower;
                    int txMin = reader.MinTxPower;
            
                    Console.WriteLine("The maximum TX power :" + txMax);
                    Console.WriteLine("The minimum TX power :" + txMin);
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error in getting Maximum/Minimun TX Power level");
                    Console.WriteLine(e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub GetTxPowerRange(reader As IRFIDReader)
               Try
                  Dim txMax As Integer = reader.MaxTxPower
                  Dim txMin As Integer = reader.MinTxPower
                  
                  Console.WriteLine(("The maximum TX power :" + txMax))
                  Console.WriteLine(("The minimum TX power :" + txMin))
               Catch e As Exception
                  Console.WriteLine("Error in getting Maximum/Minimun TX Power level")
                  Console.WriteLine(e.ToString())
               End Try
            End Sub 'GetTxPowerRange
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDReader.ReadMode">
             <summary>
             The property will set the reader into Continuous Read mode. By setting the reader Mode to AUTONOMOUS,
             the reader will start reading the tags and throw new TAG event. The application should register with
             TagEvent event handler to receive the events
             In case of model MCxx ,readerMode can be set to TRIGGERED mode.
             It allows to read tags on trigger press ,
             The application should register with TagEvent event handler to receive the events
             </summary>
             <example>
             <code> 
             private void SetAutonomousMode(IRFIDReader reader)
             {
                 try
                 {
                     reader.ReadMode = ReadMode.AUTONOMOUS;
                     reader.TagEvent += new ReaderEventHandler(Reader_TagEvent); ;
                     Console.WriteLine("Autonomous Mode Set");
                 }
                 catch (Exception e)
                 {
                     Console.WriteLine("Error in Setting AutoMode" + e.Message);
                 }
             }
             
             private void SetTriggeredMode(IRFIDReader reader)
             {
                 //triggered mode is supported only for MC9090
                 try
                 {
                     if (reader.Model == ReaderModel.MC9090)
                     {
                         reader.ReadMode = ReadMode.TRIGGERED;
                         reader.TagEvent += new ReaderEventHandler(Reader_TagEvent); ;
                         Console.WriteLine("Triggered Mode Set");
                     }
                     else
                         Console.WriteLine("Triggered Mode is applicable for Model MC9090 only");
                 }
                 catch (Exception e)
                 {
                     Console.WriteLine("Error in Setting Triggered Mode" + e.Message);
                 }
             }
             
             static void Reader_TagEvent(object sender, ReaderEventArgs args)
             {
                 string tagIDStr = String.Empty;
                 byte[] tagSN = null;
                 TagEventArgs tagArgs = (TagEventArgs)args;
                 IRFIDTag[] Tags = tagArgs.Tags;
                 tagSN = Tags[0].TagID;
                 foreach (byte b in tagSN)
                     tagIDStr += b.ToString("X2");
                 Console.WriteLine(Tags[0].TagType +":"+"TagID:" + tagIDStr);
             } 
             
             private void SetOnDemandMode(IRFIDReader reader)
             {
                 try
                 {
                     reader.ReadMode = ReadMode.ONDEMAND;
                     reader.TagEvent -= new ReaderEventHandler(Reader_TagEvent); ;
                     Console.WriteLine("On Demand Mode Set");
                 }
                 catch (Exception e)
                 {
                     Console.WriteLine("Error in Setting Triggered Mode" + e.Message);
                 }
             } 
              
             //  Visual Basic .NET
             
             Private Sub SetAutonomousMode(reader As IRFIDReader)
                 Try
                     reader.ReadMode = ReadMode.AUTONOMOUS
                     AddHandler reader.TagEvent, AddressOf Reader_TagEvent
                     Console.WriteLine("Autonomous Mode Set")
                 Catch e As Exception
                     Console.WriteLine(("Error in Setting AutoMode" + e.Message))
                 End Try
             End Sub 'SetAutonomousMode
            
             Private Sub SetTriggeredMode(reader As IRFIDReader)
                 'triggered mode is supported only for MC9090
                 Try
                     If reader.Model = ReaderModel.MC9090 Then
                         reader.ReadMode = ReadMode.TRIGGERED
                         AddHandler reader.TagEvent, AddressOf Reader_TagEvent
                         Console.WriteLine("Triggered Mode Set")
                     Else
                         Console.WriteLine("Triggered Mode is applicable for Model MC9090 only")
                     End If
                 Catch e As Exception
                     Console.WriteLine(("Error in Setting Triggered Mode" + e.Message))
                 End Try
             End Sub 'SetTriggeredMode
            
             Shared Sub Reader_TagEvent(sender As Object, args As ReaderEventArgs)
                 Dim tagIDStr As String = [String].Empty
                 Dim tagSN As Byte() = Nothing
                 Dim tagArgs As TagEventArgs = CType(args, TagEventArgs)
                 Dim Tags As IRFIDTag() = tagArgs.Tags
                 tagSN = Tags(0).TagID
                 Dim b As Byte
                 For Each b In  tagSN
                     tagIDStr += b.ToString("X2")
                 Next b
                 Console.WriteLine((Tags(0).TagType + ":" + "TagID:" + tagIDStr))
             End Sub 'Reader_TagEvent
            
             Private Sub SetOnDemandMode(reader As IRFIDReader)
                 Try
                     reader.ReadMode = ReadMode.ONDEMAND
                     reader.TagEvent -= New ReaderEventHandler(Reader_TagEvent)
                     Console.WriteLine("On Demand Mode Set")
                 Catch e As Exception
                     Console.WriteLine(("Error in Setting Triggered Mode" + e.Message))
                 End Try
             End Sub 'SetOnDemandMode 
             </code>
             </example>\
        </member>
        <member name="P:Symbol.RFID2.IRFIDReader.ReaderStatus">
            <summary>
            Get the current Status of the reader 
            ReaderStatus can be : ONLINE,OFFLINE,ERROR
            </summary>
            <example>
            <code>
            private void GetReaderStatus(IRFIDReader reader)
            {
                try
                {
                    Console.WriteLine("Reader Status:" + reader.ReaderStatus.ToString());
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error in getting Reader Status");
                    Console.WriteLine(e.ToString());
                }
            }
              
            //  Visual Basic .NET
            
            Private Sub GetReaderStatus(reader As IRFIDReader)
                Try
                    Console.WriteLine(("Reader Status:" + reader.ReaderStatus.ToString()))
                Catch e As Exception
                    Console.WriteLine("Error in getting Reader Status")
                    Console.WriteLine(e.ToString())
                End Try
            End Sub 'GetReaderStatus
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDReader.IsProximitySensorOn">
            <summary>
            Returns the status(On/OFF) of ProximitySensor
            This method is supported in RD5000 reader only.
            </summary>
            <example>
            <code>
            private void GetProximitySensor(IRFIDReader reader)
            {
                try
                {
                    Console.WriteLine("Is Proximity Sensor On? : " + (reader.IsProximitySensorOn)? "Yes":"No");
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in getting Proximity Sensor On status: " + e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub GetProximitySensor(reader As IRFIDReader)
                Try
                    Console.WriteLine(("Is Proximity Sensor On? : " + reader.IsProximitySensorOn))
                Catch e As Exception
                    Console.WriteLine(("Error in getting Proximity Sensor On status: " + e.ToString()))
                End Try
            End Sub 'GetProximitySensor
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDReader.IsMotionSensorOn">
            <summary>
            Returns the status(On/OFF) of MotionSensor
            This method is supported in RD5000 reader only.
            </summary>
            <example>
            <code>
            private void GetMotionSensor(IRFIDReader reader)
            {
                try
                {
                    Console.WriteLine("Is Motion Sensor On? : " + (reader.IsMotionSensorOn)? "Yes":"No");
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in getting Motion Sensor On status: " + e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub GetMotionSensor(reader As IRFIDReader)
                Try
                    Console.WriteLine((If "Is Motion Sensor On? : " + reader.IsMotionSensorOn Then "Yes" Else "No")) 'ToDo: Unsupported feature: conditional (?) operator.
                Catch e As Exception
                    Console.WriteLine(("Error in getting Motion Sensor On status: " + e.ToString()))
                End Try
            End Sub 'GetMotionSensor
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDReader.ProximityTimeIntervalMS">
            <summary>
            Returns the TimeInterval in milliseconds 
            at which the proximity value is notified
            This method is supported in RD5000 reader only.
            </summary>
            <example>
            <code>
            private void GetProxTimeIntervalMS(IRFIDReader reader)
            {
                try
                {
                    Console.WriteLine("Proximity Time Interval MS:" + reader.ProximityTimeIntervalMS);
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in getting Proximity Time Interval MS: " + e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub GetProxTimeIntervalMS(reader As IRFIDReader)
                Try
                    Console.WriteLine(("Proximity Time Interval MS:" + reader.ProximityTimeIntervalMS))
                Catch e As Exception
                    Console.WriteLine(("Error in getting Proximity Time Interval MS: " + e.ToString()))
                End Try
            End Sub 'GetProxTimeIntervalMS
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDReader.MotionTimeIntervalMS">
            <summary>
            Returns the TimeInterval in milliseconds 
            at which the motion values are notified
            This method is supported in RD5000 reader only.
            </summary>
            <example>
            <code>
            private void GetMotionTimeIntervalMS(IRFIDReader reader)
            {
                try
                {
                    Console.WriteLine("Motion Time Interval MS:" + reader.MotionTimeIntervalMS);
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in getting Motion Time Interval MS: " + e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub GetMotionTimeIntervalMS(reader As IRFIDReader)
                Try
                    Console.WriteLine(("Motion Time Interval MS:" + reader.MotionTimeIntervalMS))
                Catch e As Exception
                    Console.WriteLine(("Error in getting Motion Time Interval MS: " + e.ToString()))
                End Try
            End Sub 'GetMotionTimeIntervalMS
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.Reader.#ctor(System.String,System.IO.Stream)">
            <summary>
            initializes an instance of symbol reader using the specified config details
            and reader name.s
            </summary>
            <param name="readerName"></param>
            <param name="configStream"></param>
        </member>
        <member name="M:Symbol.RFID2.Reader.CheckReaderStatus">
            <summary>
            CheckReaderStatus in derived classes with model based cmds.
            Throw CommunicationException if unsuccessful
            </summary>
            <returns></returns>
        </member>
        <member name="M:Symbol.RFID2.Reader.Connect">
            <summary>
            Connects with the reader
            </summary>
        </member>
        <member name="M:Symbol.RFID2.Reader.Disconnect">
            <summary>
            Disconnects from the reader
            </summary>
        </member>
        <member name="M:Symbol.RFID2.Reader.KillTag(Symbol.RFID2.TagType,System.Byte[])">
            <summary>
            Kill the tag based on the TAG ID and passcode. Applicable for CLASS0, CLASS1 and GEN2 tags(based on its default paramaters) 
            </summary>
            <param name="tagType"></param>
            <param name="tag"></param>
        </member>
        <member name="M:Symbol.RFID2.Reader.EraseTag(Symbol.RFID2.TagType)">
            <summary>
            Erase the TAG ID and data. Applicable for all the tag types including class0, class1 and GEn2
            </summary>
        </member>
        <member name="M:Symbol.RFID2.Reader.GetTags">
            <summary>
            Read the TAGS  for CLASS0, CLASS1 and GEN2 based on default parameters
            </summary>
            <returns></returns>
        </member>
        <member name="M:Symbol.RFID2.Reader.WriteTagID(Symbol.RFID2.TagType,System.Byte[])">
            <summary>
            Rewrites the tag id 
            </summary>
            <param name="tagType"></param>
            <param name="tagID"></param>
        </member>
        <member name="M:Symbol.RFID2.Reader.WriteTag(Symbol.RFID2.TagDataLoc,System.Byte[])">
            <summary>
            Write  the TAG ID/ data. Applicable for all Gen2 tags 
            </summary>
        </member>
        <member name="M:Symbol.RFID2.Reader.EnableProximitySensor(System.Int32)">
            <summary>
            Enables sensor notification of changes in proximity
            </summary>
        </member>
        <member name="M:Symbol.RFID2.Reader.DisableProximitySensor">
            <summary>
            Disables sensor notification of changes in proximity
            </summary>
        </member>
        <member name="M:Symbol.RFID2.Reader.EnableMotionSensor(System.Int32)">
            <summary>
            Enables sensor notification of changes in Motion
            </summary>
        </member>
        <member name="M:Symbol.RFID2.Reader.DisableMotionSensor">
            <summary>
            Disables sensor notification of changes in Motion
            </summary>
        </member>
        <member name="M:Symbol.RFID2.Reader.EnableRFIDModule">
            <summary>
            RD5000 specific :Enable WJReader
            </summary>
        </member>
        <member name="M:Symbol.RFID2.Reader.DisableRFIDModule">
            <summary>
             RD5000 specific :Disable WJReader
            </summary>
        </member>
        <member name="M:Symbol.RFID2.Reader.GetRFIDModuleStatus">
            <summary>
             RD5000 specific :Get WJReader Status
            </summary>
            <returns></returns>
        </member>
        <member name="P:Symbol.RFID2.Reader.SDKVersionNumber">
            <summary>
            Gets the Assembly Version number
            </summary>
        </member>
        <member name="P:Symbol.RFID2.Reader.Model">
            <summary>
            
            </summary>
        </member>
        <member name="P:Symbol.RFID2.Reader.StatusMonitorIntervalSec">
            <summary>
            The time period for which the reader waits each time while monitoring the 
            status periodically
            </summary>
        </member>
        <member name="P:Symbol.RFID2.Reader.IsProximitySensorOn">
            <summary>
            Returns the status(On/OFF) of ProximitySensor
            </summary>
        </member>
        <member name="P:Symbol.RFID2.Reader.IsMotionSensorOn">
            <summary>
            Returns the status(On/OFF) of MotionSensor
            </summary>
        </member>
        <member name="P:Symbol.RFID2.Reader.ProximityTimeIntervalMS">
            <summary>
            Returns the TimeInterval in milliseconds 
            at which the proximity value is notified
            </summary>
        </member>
        <member name="P:Symbol.RFID2.Reader.MotionTimeIntervalMS">
            <summary>
            Returns the TimeInterval in milliseconds 
            at which the motion values are notified
            </summary>
        </member>
        <member name="P:Symbol.RFID2.Reader.DebugMode">
            <summary>
            Gets or sets the debug mode.If DebugMode is true log file is generated.
            </summary>
        </member>
        <member name="T:Symbol.RFID2.ReaderFactory">
            <summary>
            Used to create,manage and delete reader objects .
            </summary>
        </member>
        <member name="F:Symbol.RFID2.ReaderFactory.m_ReaderHash">
            <summary>
            Hashtable containing pairs of deviceId and device objects.
            </summary>
        </member>
        <member name="M:Symbol.RFID2.ReaderFactory.CreateReader(System.String,Symbol.RFID2.ReaderModel,System.IO.Stream)">
            <summary>
            Create a reader object specifying reader name and based on connected state and using  configuration stream
            The readerName and model parameter overwrite the ReaderInfo section in configuration stream.
            ReaderInfo section in configuration file is optional except for MC9090. For MC9090 reader, the model parameter and the Model section in configuration file must be provided, and they must have the same value.
            </summary>
            <param name="readerName"> Reader Name (Should be unique)</param>
            <param name="model"> Reader Model </param>
            <param name="configStream">Reader configuration stream</param>
            <returns></returns>
            <example>
            <code>
            private static void CreateReader(string configNmWithPath)
            {
                StreamReader streamReader = new StreamReader(configNmWithPath);
                Stream configStream =  streamReader.BaseStream;
                configStream.Seek(0, SeekOrigin.Begin);
              
                try
                {
                    reader = ReaderFactory.CreateReader("Reader1",ReaderModel.XR480,configStream);
                    reader.TagEvent += new ReaderEventHandler(OnTagRead);
                    Console.WriteLine("Reader created");
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }
            }
             
            //  Visual Basic .NET
            
            Private Shared Sub CreateReader(configNmWithPath As String)
                Dim streamReader As New StreamReader(configNmWithPath)
                Dim configStream As Stream = streamReader.BaseStream
                configStream.Seek(0, SeekOrigin.Begin)
              
                Try
                    reader = ReaderFactory.CreateReader("Reader1", ReaderModel.XR480, configStream)
                    AddHandler reader.TagEvent, AddressOf OnTagRead
                    Console.WriteLine("Reader created")
                Catch e As Exception
                    Console.WriteLine(e.Message)
                End Try
            End Sub 'CreateReader
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.ReaderFactory.CreateReader(System.String,Symbol.RFID2.ReaderModel,System.String)">
            <summary>
            Create a host based reader object based on in connected state using  XML configuration string
            The readerName and model parameter overwrite the ReaderInfo section in configuration stream.
            ReaderInfo section in configuration file is optional except for MC9090. For MC9090 reader, the model parameter and the Model section in configuration file must be provided, and they must have the same value.
            </summary>
            <param name="readerName">Reader Name (unique)</param>
            <param name="model">ReaderModel</param>
            <param name="configString">Reader Configuration XML string</param>
            <example>
            <code>
            private static void CreateReader()
            {
                string configStr = @"&lt;?xml version='1.0' encoding='utf-8' ?&gt; 
                                      &lt;ReaderConfig xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'&gt; 
                                         &lt;CommunicationSettings&gt; 
                                             &lt;IPAddress&gt;192.168.0.95&lt;/IPAddress&gt; 
                                             &lt;TcpPort&gt;3000&lt;/TcpPort&gt; 
                                             &lt;HttpPort&gt;80&lt;/HttpPort&gt; 
                                             &lt;NotificationPort&gt;4000&lt;/NotificationPort&gt; 
                                         &lt;/CommunicationSettings&gt; 
                                         &lt;Authentification&gt; 
                                              &lt;UserName&gt;admin&lt;/UserName&gt; 
                                              &lt;Password&gt;change&lt;/Password&gt; 
                                         &lt;/Authentification&gt; 
                                         &lt;ReaderInfo&gt; 
                                              &lt;ReaderName&gt;Reader1&lt;/ReaderName&gt; 
                                              &lt;Description&gt;Symbol XR480 Reader&lt;/Description&gt; 
                                              &lt;Model&gt;XR480&lt;/Model&gt; 
                                        &lt;/ReaderInfo&gt; 
                                      &lt;/ReaderConfig&gt; ";
                try
                {
                    reader = ReaderFactory.CreateReader("Reader1", ReaderModel.XR480, configStr);
                    reader.TagEvent += new ReaderEventHandler(OnTagRead);
                    Console.WriteLine("Reader created");
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }
            }
            
            //  Visual Basic .NET
            
            Private Shared Sub CreateReader()
                Dim vers  As String = "?xml version=""1.0"" "
                Dim encod As String = "encoding=""utf-8"" "
                Dim rdcfg As String = "ReaderConfig  xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" "
                Dim comm1 As String = "CommunicationSettings IPAddress 192.168.0.95 /IPAddress TcpPort 3000 /TcpPort "
                Dim comm2 As String = "HttpPort 80 / HttpPort NotificationPort 3000 /NotificationPort /CommunicationSettings "
                Dim auth  As String = "Authentification UserName admin /UserName Password change /Password /Authentification "
                Dim rdIf  As String = "ReaderInfo ReaderName Reader /ReaderName Description Motorola XR480 Reader /Description "
                Dim type  As String = "Model XR480 /Model /ReaderIinfo /ReaderConfig"
              
                Dim config As String = vers + encod + rdcfg + comm1 + comm2 + auth + rdIf + type
                Try
                    reader = ReaderFactory.CreateReader("Reader1", ReaderModel.XR480, config)
                    AddHandler reader.TagEvent, AddressOf OnTagRead
                    Console.WriteLine("Reader created")
                Catch e As Exception
                    Console.WriteLine(e.Message)
                End Try
            End Sub 'CreateReader
            </code> 
            </example>
        </member>
        <member name="M:Symbol.RFID2.ReaderFactory.CreateReader(System.String,Symbol.RFID2.ReaderModel,System.String,System.Boolean)">
             <summary>
             Create a host based reader object in  state using  configuration string
             Reader can be created in disconnected state using setting offLine to true.
             The readerName and model parameter overwrite the ReaderInfo section in configuration stream.
             ReaderInfo section in configuration file is optional except for MC9090. For MC9090 reader, the model parameter and the Model section in configuration file must be provided, and they must have the same value.
             </summary>
             <param name="readerName"></param>
             <param name="model"></param>
             <param name="configParamsStr"></param>
             <param name="offLine"></param>
             <returns></returns>
             <example>
             <code>
             private static void CreateReader()
             {
                 string configStr = @"&lt;?xml version='1.0' encoding='utf-8' ?&gt; 
                                      &lt;ReaderConfig xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'&gt; 
                                         &lt;CommunicationSettings&gt; 
                                             &lt;IPAddress&gt;192.168.0.95&lt;/IPAddress&gt; 
                                             &lt;TcpPort&gt;3000&lt;/TcpPort&gt; 
                                             &lt;HttpPort&gt;80&lt;/HttpPort&gt; 
                                             &lt;NotificationPort&gt;4000&lt;/NotificationPort&gt; 
                                         &lt;/CommunicationSettings&gt; 
                                         &lt;Authentification&gt; 
                                              &lt;UserName&gt;admin&lt;/UserName&gt; 
                                              &lt;Password&gt;change&lt;/Password&gt; 
                                         &lt;/Authentification&gt; 
                                         &lt;ReaderInfo&gt; 
                                              &lt;ReaderName&gt;Reader1&lt;/ReaderName&gt; 
                                              &lt;Description&gt;Symbol XR480 Reader&lt;/Description&gt; 
                                              &lt;Model&gt;XR480&lt;/Model&gt; 
                                        &lt;/ReaderInfo&gt; 
                                      &lt;/ReaderConfig&gt; ";
                 try
                 {
                     reader = ReaderFactory.CreateReader("Reader1",ReaderModel.XR480 , config,true);
                     reader.TagEvent += new ReaderEventHandler(OnTagRead);
                     Console.WriteLine("Reader created");
                 }
                 catch (Exception e)
                 {
                     Console.WriteLine(e.Message);
                 }
             }
            
             //  Visual Basic .NET
             
             Private Shared Sub CreateReader()
                 Dim vers  As String = "?xml version=""1.0"" "
                 Dim encod As String = "encoding=""utf-8"" "
                 Dim rdcfg As String = "ReaderConfig  xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" "
                 Dim comm1 As String = "CommunicationSettings IPAddress 192.168.0.95 /IPAddress TcpPort 3000 /TcpPort "
                 Dim comm2 As String = "HttpPort 80 / HttpPort NotificationPort 3000 /NotificationPort /CommunicationSettings "
                 Dim auth  As String = "Authentification UserName admin /UserName Password change /Password /Authentification "
                 Dim rdIf  As String = "ReaderInfo ReaderName Reader /ReaderName Description Motorola XR480 Reader /Description "
                 Dim type  As String = "Model XR480 /Model /ReaderIinfo /ReaderConfig"
               
                 Dim config As String = vers + encod + rdcfg + comm1 + comm2 + auth + rdIf + type
                 Try
                     reader = ReaderFactory.CreateReader("Reader1", ReaderModel.XR480, config, true)
                     AddHandler reader.TagEvent, AddressOf OnTagRead
                     Console.WriteLine("Reader created")
                 Catch e As Exception
                     Console.WriteLine(e.Message)
                 End Try
             End Sub 'CreateReader
             </code>
             </example>
        </member>
        <member name="M:Symbol.RFID2.ReaderFactory.CreateReader(System.String,Symbol.RFID2.ReaderModel,System.IO.Stream,System.Boolean)">
            <summary>
            Create a host based reader object in  state using  configuration stream
            Reader can be created in disconnected state using setting offLine to true
            The readerName and model parameter overwrite the ReaderInfo section in configuration stream.
            ReaderInfo section in configuration file is optional except for MC9090. For MC9090 reader, the model parameter and the Model section in configuration file must be provided, and they must have the same value.
            </summary>
            <param name="readerName"> Reader Name (Should be unique)</param>
            <param name="model"> ReaderModel</param>
            <param name="configStream"> Reader Configuration stream </param>
            <param name="offLine">Create reader in offline mode (No connected to reader)</param>
            <example>
            <code>
            private static void CreateReader(string fileNmWithPath)
            {
                StreamReader streamReader = new StreamReader(fileNmWithPath);
                Stream configStream =  streamReader.BaseStream;
                configStream.Seek(0, SeekOrigin.Begin);
                try
                {
                    reader = ReaderFactory.CreateReader("Reader1",ReaderModel.XR480,configStream,true);
                    reader.TagEvent += new ReaderEventHandler(OnTagRead);
                    Console.WriteLine("Reader created");
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }
            }
            
            //  Visual Basic .NET
            
            Private Shared Sub CreateReader(fileNmWithPath As String)
                Dim streamReader As New StreamReader(fileNmWithPath)
                Dim configStream As Stream = streamReader.BaseStream
                configStream.Seek(0, SeekOrigin.Begin)
                Try
                    reader = ReaderFactory.CreateReader("Reader1", ReaderModel.XR480, configStream, True)
                    AddHandler reader.TagEvent, AddressOf OnTagRead
                    Console.WriteLine("Reader created")
                Catch e As Exception
                    Console.WriteLine(e.Message)
                End Try
            End Sub 'CreateReader
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.ReaderFactory.CreateReader(System.String,Symbol.RFID2.ReaderModel,System.String,System.Int32,System.Int32,System.String,System.Int32,System.String,System.String)">
            <summary>
            Creates host based Reader with the given parameters and connects with the RFID reader.
            It is only supported for XR series readers.
            </summary>
            <param name="readerName"></param>
            <param name="model"></param>
            <param name="ipAddress"></param>
            <param name="httpPort"></param>
            <param name="tcpPort"></param>
            <param name="notificationAddress"></param>
            <param name="notificationPort"></param>
            <param name="userName"></param>
            <param name="password"></param>
            <returns></returns>
            <example>
            <code>
            private static void CreateReader()
            {
                try
                {
                    ReaderModel model;
                    reader = ReaderFactory.CreateReader("Reader1",model.XR480,"192.168.0.95","80","3000",
                                                             "4000","admin","change");
                    reader.TagEvent += new ReaderEventHandler(OnTagRead);
                    Console.WriteLine("Reader created");
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }
            }
            
            //  Visual Basic .NET
            
            Private Shared Sub CreateReader()
                Try
                    Dim model As ReaderModel
                    reader = ReaderFactory.CreateReader("Reader1", model.XR480, "192.168.0.95", "80", "3000", "4000", "admin", "change")
                    AddHandler reader.TagEvent, AddressOf OnTagRead
                    Console.WriteLine("Reader created")
                Catch e As Exception
                    Console.WriteLine(e.Message)
                End Try
            End Sub 'CreateReader
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.ReaderFactory.CreateReader(System.String,Symbol.RFID2.ReaderModel,System.String,System.Int32,System.Int32,System.String,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Creates host based Reader with the given parameters and connects with the RFID reader.
            Reader can be created in Disconnected state by setting  offLine to true.
            It is only supported for XR series readers.
            </summary>
            <param name="readerName"></param>
            <param name="model"></param>
            <param name="ipAddress"></param>
            <param name="httpPort"></param>
            <param name="tcpPort"></param>
            <param name="notificationAddress"></param>
            <param name="notificationPort"></param>
            <param name="userName"></param>
            <param name="password"></param>
            <param name="offLine"></param>
            <returns></returns>
            <example>
            <code>
            private static void CreateReader()
            {
                try
                {
                    ReaderModel model;
                    reader = ReaderFactory.CreateReader("Reader1",model.XR480,"192.168.0.95","80","3000",
                                                        "4000","admin","change",true);
                    reader.TagEvent += new ReaderEventHandler(OnTagRead);
                    Console.WriteLine("Reader created");
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }
            }
            
            //  Visual Basic .NET
            
            Private Shared Sub CreateReader()
                Try
                    Dim model As ReaderModel
                    reader = ReaderFactory.CreateReader("Reader1", model.XR480, "192.168.0.95", "80", "3000", "4000", "admin", "change", True)
                    AddHandler reader.TagEvent, AddressOf OnTagRead
                    Console.WriteLine("Reader created")
                Catch e As Exception
                    Console.WriteLine(e.Message)
                End Try
            End Sub 'CreateReader
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.ReaderFactory.CreateReader(System.String,Symbol.RFID2.ReaderModel,System.String,System.Int32)">
            <summary>
            Creates host based Reader with the given parameters and connects with the RFID reader.
            It is supported only in Symbol.RFID2.Host assembly.
            </summary>
            <param name="readerName"></param>
            <param name="model"></param>
            <param name="ipAddress"></param>
            <param name="tcpPort"></param>
            <returns></returns>
            <example>
            <code>
            private static void CreateReader()
            {
                try
                {
                    ReaderModel model;
                    reader = ReaderFactory.CreateReader("Reader1",model.XR480,"192.168.0.95","3000");
                    reader.TagEvent += new ReaderEventHandler(OnTagRead);
                    Console.WriteLine("Reader created");
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }
            }
            //  Visual Basic .NET
            
            Private Shared Sub CreateReader()
                Try
                    Dim model As ReaderModel
                    reader = ReaderFactory.CreateReader("Reader1", model.XR480, "192.168.0.95", "3000")
                    AddHandler reader.TagEvent, AddressOf OnTagRead
                    Console.WriteLine("Reader created")
                Catch e As Exception
                    Console.WriteLine(e.Message)
                End Try
            End Sub 'CreateReader
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.ReaderFactory.CreateReader(System.String,Symbol.RFID2.ReaderModel,System.String,System.Int32,System.Boolean)">
            <summary>
            Creates host based Reader with the given parameters and connects with the RFID reader.
            Reader can be created in Disconnected state by setting  offLine to true
            It is supported only in Symbol.RFID2.Host assembly.
            </summary>
            <param name="readerName"></param>
            <param name="model"></param>
            <param name="ipAddress"></param>
            <param name="tcpPort"></param>
            <param name="offLine"></param>
            <returns></returns>
            <example>
            <code>
            private static void CreateReader()
            {
                try
                {
                    ReaderModel model;
                    reader = ReaderFactory.CreateReader("Reader1",model.XR480,"192.168.0.95","3000",true);
                    reader.TagEvent += new ReaderEventHandler(OnTagRead);
                    Console.WriteLine("Reader created");
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }
            }
            
            //  Visual Basic .NET
            
            Private Shared Sub CreateReader()
                Try
                    Dim model As ReaderModel
                    reader = ReaderFactory.CreateReader("Reader1", model.XR480, "192.168.0.95", "3000", True)
                    AddHandler reader.TagEvent, AddressOf OnTagRead
                    Console.WriteLine("Reader created")
                Catch e As Exception
                    Console.WriteLine(e.Message)
                End Try
            End Sub 'CreateReader
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.ReaderFactory.GetReader(System.String)">
             <summary>
             Get  reader instance by Name  
             </summary>
             <returns>Returns an object of IRFIDReader which has the specified reader name</returns>
             <example>
             <code>
             private static IRFIDReader GetReader()
             {
                 string readerName = "Reader1";
                 try
                 {
                     IRFIDReader rfidReader = ReaderFactory.GetReader(readerName);
                     return rfidReader;
                 }
                 catch (ReaderException ex)
                 {
                     Console.WriteLine("Could not find reader:" + readerName);
                     return null;
                 }
             }
            
             //  Visual Basic .NET
             
             Private Shared Function GetReader() As IRFIDReader
                 Dim readerName As String = "Reader1"
                 Try
                     Dim rfidReader As IRFIDReader = ReaderFactory.GetReader(readerName)
                     Return rfidReader
                 Catch ex As ReaderException
                     Console.WriteLine(("Could not find reader:" + readerName))
                     Return Nothing
                 End Try
             End Function 'GetReader
             </code>
             </example>
        </member>
        <member name="M:Symbol.RFID2.ReaderFactory.GetReaderStatus(System.String)">
             <summary>
             Get the reader status (ONline, Offline, Operator offline ) 
             </summary>
             <param name="readerName">Reader Name</param>
             <returns>Returns ReaderStatus</returns>
             <example>
             <code>
             private static ReaderStatus GetReaderStatus()
             {
                 string readerName = string.Empty;
                 try
                 {
                     string[] readerNames = ReaderFactory.GetAllReaderNames();
                     readerName = readerNames[0];
                     ReaderStatus readerStatus = ReaderFactory.GetReaderStatus(readerName);
                     return readerStatus;
                 }
                 catch (ReaderException ex)
                 {
                     Console.WriteLine("Could not get reader status" + readerName);
                     Console.WriteLine(ex.Message);
                     return ReaderStatus.ERROR;
                 }
             }
            
             //  Visual Basic .NET
             
             Private Shared Function GetReaderStatus() As ReaderStatus
                 Dim readerName As String = String.Empty
                 Try
                     Dim readerNames As String() = ReaderFactory.GetAllReaderNames()
                     readerName = readerNames(0)
                     Dim readerStatus As ReaderStatus = ReaderFactory.GetReaderStatus(readerName)
                     Return readerStatus
                 Catch ex As ReaderException
                     Console.WriteLine(("Could not get reader status" + readerName))
                     Console.WriteLine(ex.Message)
                     Return ReaderStatus.ERROR
                 End Try
             End Function 'GetReaderStatus
             </code>
             </example>
        </member>
        <member name="M:Symbol.RFID2.ReaderFactory.DeleteReader(System.String)">
            <summary>
            Delete the reader object identified by a unique reader NAme
            </summary>
            <param name="readerName">Reader Name</param>
            <example>
            <code>
            private static void DeleteReader()
            {
                try
                {
                    string[] readerNames = ReaderFactory.GetAllReaderNames();
                    ReaderFactory.DeleteReader(readerNames[0]);
                }
                catch (ReaderException ex)
                {
                    Console.WriteLine(ex.Message); 
                }
            }
            
            //  Visual Basic .NET
            
            Private Shared Sub DeleteReader()
                Try
                    Dim readerNames As String() = ReaderFactory.GetAllReaderNames()
                    ReaderFactory.DeleteReader(readerNames(0))
                Catch ex As ReaderException
                    Console.WriteLine(ex.Message)
                End Try
            End Sub 'DeleteReader
            </code> 
            </example>
        </member>
        <member name="M:Symbol.RFID2.ReaderFactory.GetAllReaderNames">
            <summary>
            Get the reader names.
            </summary>
            <returns>List of Reader Names</returns>
            <example>
            <code> 
            private static string[] GetAllReaderNames()
            {
                try
                {
                    string[] readerNames = ReaderFactory.GetAllReaderNames();
                    if (readerNames == null || readerNames.Length == 0)
                        Console.WriteLine("Could not find any reader");
                    return readerNames;
                }
                catch (ReaderException ex)
                {
                    Console.WriteLine(ex.Message);
                    return null;
                }
            }
            
            //  Visual Basic .NET
            
            Private Shared Function GetAllReaderNames() As String()
                Try
                    Dim readerNames As String() = ReaderFactory.GetAllReaderNames()
                    If readerNames Is Nothing Or readerNames.Length = 0 Then
                        Console.WriteLine("Could not find any reader")
                    End If
                    Return readerNames
                Catch ex As ReaderException
                    Console.WriteLine(ex.Message)
                    Return Nothing
                End Try
            End Function 'GetAllReaderNames
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.ReaderFactory.Dispose">
            <summary>
            Disposes the ReaderFactory object
            </summary>
            <example>
            <code>
            private void MyDispose()
            {
                try
                {
                    reader = ReaderFactory.CreateReader("Reader1",ReaderModel.XR480,"192.168.0.95","3000",true);
                    reader.TagEvent += new ReaderEventHandler(OnTagRead);
                    Console.WriteLine("Reader created");
            		try
            		{
            	        Console.WriteLine("Disposing of Readers!");
            			
            			ReaderFactory.Dispose);
            		}
            		catch(Exception e)
            		{
            		    Console.WriteLine("Error in Disposing of Readers : " + e.ToString());
            		}
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub MyDispose()
                Try
                    reader = ReaderFactory.CreateReader("Reader1", ReaderModel.XR480, "192.168.0.95", "3000", True)
                    AddHandler reader.TagEvent, AddressOf OnTagRead
                    Console.WriteLine("Reader created")
                    Try
                        Console.WriteLine("Disposing of Readers!")
                        ReaderFactory.Dispose();
                    Catch e As Exception
                        Console.WriteLine(("Error in Disposing of Readers : " + e8ToString()))
                    End Try
                Catch e As Exception
                    Console.WriteLine(e.Message)
                End Try
            End Sub 'MyDispose
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.ReaderFactory.DeleteAllReaders">
            <summary>
            Deletes all reader objects
            </summary>
            <example> 
            <code>
            private static void DeleteAllReaders()
            {
                try
                {
                    ReaderFactory.DeleteAllReaders();
                }
                catch (ReaderException ex)
                {
                    Console.WriteLine("Could not delete reader");
                    Console.WriteLine(ex.Message);
                }
            }
            
            //  Visual Basic .NET
            
            Private Shared Sub DeleteAllReaders()
                Try
                    ReaderFactory.DeleteAllReaders()
                Catch ex As ReaderException
                    Console.WriteLine("Could not delete reader")
                    Console.WriteLine(ex.Message)
                End Try
            End Sub 'DeleteAllReaders
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.ReaderFactory.SDKVersion">
            <summary>
            Gets the Assembly Version number
            </summary>
            <example>
            <code>
            private void MyGetSDKVersion()
            {
                try
                {
                    ReaderModel model;
                    reader = ReaderFactory.CreateReader("Reader1",model.XR480,"192.168.0.95","3000",true);
                    reader.TagEvent += new ReaderEventHandler(OnTagRead);
                    Console.WriteLine("Reader created");
                
            		try
            		{
            	        Console.WriteLine("SDK version Number : " + ReaderFactory.SDKVersionNumber);
            		}
            		catch(Exception e)
            		{
            		    Console.WriteLine("Error in getting SDK version Number : " + e.ToString());
            		}
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub MyGetSDKVersion()
                Try
                    Dim model As ReaderModel
                    reader = ReaderFactory.CreateReader("Reader1", model.XR480, "192.168.0.95", "3000", True)
                    AddHandler reader.TagEvent, AddressOf OnTagRead
                    Console.WriteLine("Reader created")
                 
                    Try
                        Console.WriteLine(("SDK version Number : " + ReaderFactory.SDKVersionNumber))
                    Catch e As Exception
                        Console.WriteLine(("Error in getting SDK version Number : " + e.ToString()))
                    End Try
                Catch e As Exception
                    Console.WriteLine(e.Message)
                End Try
            End Sub 'MyGetSDKVersion
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.ReaderFactory.NoOfReaders">
            <summary>
            Get total number of readers in the factory
            </summary>
            <example>
            <code>
            private void MyGetNoOfReaders()
            {
                try
                {
                    reader = ReaderFactory.CreateReader("Reader1",ReaderModel.XR480,"192.168.0.95","3000",true);
                    reader.TagEvent += new ReaderEventHandler(OnTagRead);
                    Console.WriteLine("Reader created");
            		try
            		{
            	        Console.WriteLine("Number Of Readers : " + ReaderFactory.NoOfReaders);
            		}
            		catch(Exception e)
            		{
            		    Console.WriteLine("Error in getting Number Of Readers : " + e.ToString());
            		}
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub MyGetNoOfReaders()
                Try
                    reader = ReaderFactory.CreateReader("Reader1", ReaderModel.XR480, "192.168.0.95", "3000", True)
                    AddHandler reader.TagEvent, AddressOf OnTagRead
                    Console.WriteLine("Reader created")
                    Try
                        Console.WriteLine(("Number Of Readers : " + ReaderFactory.NoOfReaders))
                    Catch e As Exception
                        Console.WriteLine(("Error in getting Number Of Readers : " + e.ToString()))
                    End Try
                Catch e As Exception
                    Console.WriteLine(e.Message)
                End Try
            End Sub 'MyGetNoOfReaders
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.ReaderFactory.LogLevel">
             <summary>
             Sets /Gets the log level according to which logs are added to log file.
             </summary>
             <example>
             <code>
             private void MySetLogLevel(Level newLogLevel)
             {
                 try
                 {
                     reader = ReaderFactory.CreateReader("Reader1",ReaderModel.XR480,"192.168.0.95","3000",true);
                     reader.TagEvent += new ReaderEventHandler(OnTagRead);
                     Console.WriteLine("Reader created");
            			try
            			{
            				ReaderFactory.LogLevel(newLogLevel);
            				
            				Console.WriteLine("Log Level is set to : " + ReaderFactory.LogLevel.ToString());
            			}
            			catch(Exception e)
            			{
            			 Console.WriteLine("Error in Setting Log Level : " + e.ToString());
            			}
                 }
                 catch (Exception e)
                 {
                     Console.WriteLine(e.Message);
                 }
             }
             
             private void MyGetLogLevel()
             {
                 try
                 {
                     reader = ReaderFactory.CreateReader("Reader1",ReaderModel.XR480,"192.168.0.95","3000",true);
                     reader.TagEvent += new ReaderEventHandler(OnTagRead);
                     Console.WriteLine("Reader created");
            			try
            			{
            				Console.WriteLine("Log Level is : " + ReaderFactory.LogLevel.ToString());
            			}
            			catch(Exception e)
            			{
            			    Console.WriteLine("Error in Getting Log Level : " + e.ToString());
            			}
                 }
                 catch (Exception e)
                 {
                     Console.WriteLine(e.Message);
                 }
             }
             
             //  Visual Basic .NET
             
             Private Sub MySetLogLevel(newLogLevel As Level)
                 Try
                     reader = ReaderFactory.CreateReader("Reader1", ReaderModel.XR480, "192.168.0.95", "3000", True)
                     AddHandler reader.TagEvent, AddressOf OnTagRead
                     Console.WriteLine("Reader created")
                     Try
                         ReaderFactory.LogLevel(newLogLevel)
                     
                         Console.WriteLine(("Log Level is set to : " + ReaderFactory.LogLevel.ToString())) '
                     Catch e As Exception
                         Console.WriteLine(("Error in Setting Log Level : " + e.ToString()))
                     End Try
                 Catch e As Exception
                     Console.WriteLine(e.Message)
                 End Try
             End Sub 'MySetLogLevel
            
             Private Sub MyGetLogLevel()
                 Try
                     reader = ReaderFactory.CreateReader("Reader1", ReaderModel.XR480, "192.168.0.95", "3000", True)
                     AddHandler reader.TagEvent, AddressOf OnTagRead
                     Console.WriteLine("Reader created")
                     Try
                         Console.WriteLine(("Log Level is : " + ReaderFactory.LogLevel.ToString()))
                     Catch e As Exception
                         Console.WriteLine(("Error in Getting Log Level : " + e.ToString()))
                     End Try
                 Catch e As Exception
                     Console.WriteLine(e.Message)
                 End Try
             End Sub 'MyGetLogLevel
             </code>
             </example>
        </member>
        <member name="T:Symbol.RFID2.TransportException">
            <summary>
            This exception is thrown by Transport commands.
            </summary>
        </member>
        <member name="T:Symbol.RFID2.ReaderXR440">
            <summary>
             Implements IRFIDReader interface for reader model XR440 as host based reader .
            </summary>
        </member>
        <member name="T:Symbol.RFID2.EPCTag">
            <summary>
            Implements IRFIDTag ,holds tag related data 
            </summary>
        </member>
        <member name="T:Symbol.RFID2.TagBase">
            <summary>
            Implements IRFIDTag ,holds all the information about the tag
            </summary>
        </member>
        <member name="T:Symbol.RFID2.IRFIDTag">
            <summary>
            Exposes properties of the tag read by the Symbol reader
            </summary>
        </member>
        <member name="P:Symbol.RFID2.IRFIDTag.TagData">
            <summary>
            The tag data based on the Tag Selection Criterion. The data will start from WordPointer page and it 
            will be of WordCount pages. The page size is also provided in TagDataLoc of GetDataLocation() of 
            TagDataSelector. The ReadPAgeSize may NOT be one byte. Always calculate the size on PageSize.
            </summary>
            <example > 
            <code> 
            private void MyGetTagDataTD(IRFIDReader reader)
            {
                try
                {
                    IRFIDTag[] tags = reader.GetTags();
                    if (tags == null || tags.Length == 0)
                    {
                        Console.WriteLine("No Tags");
                    }
                    else
                    {
                        foreach (IRFIDTag tag in tags)
                        {
                            Console.WriteLine("Tag Data : " + tags.TagData.ToString());
                        }
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine("Unable to Get Read Tag for TagData"+ e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub MyGetTagDataTD(reader As IRFIDReader)
                Try
                    Dim tags As IRFIDTag() = reader.GetTags()
                    If tags Is Nothing Or tags.Length = 0 Then
                        Console.WriteLine("No Tags")
                    Else
                        Dim tag As IRFIDTag
                        For Each tag In  tags
                        Console.WriteLine(("Tag Data : " + tags.TagData.ToString()))
                        Next tag
                    End If
                Catch e As Exception
                    Console.WriteLine(("Unable to Get Read Tag for TagData" + e.ToString()))
                End Try
            End Sub 'MyGetTagDataTD
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDTag.TagID">
            <summary>
            The Tag ID 8 or 12 bytes based on the EPC format. 
            </summary>
            <example > 
            <code> 
            private void MyGetTagDataTagID(IRFIDReader reader)
            {
                try
                {
                    IRFIDTag[] tags = reader.GetTags();
            
                    if (tags == null || tags.Length == 0)
                    {
                        Console.WriteLine("No Tags");
                    }
                    else
                    {
                        foreach (IRFIDTag tag in tags)
                        {
                            Console.WriteLine("Tag ID : " + tags.TagID.ToString());
                        }
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine("Unable to Get Read Tag for TagID"+ e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub MyGetTagDataTagID(reader As IRFIDReader)
                Try
                    Dim tags As IRFIDTag() = reader.GetTags()
                 
                    If tags Is Nothing Or tags.Length = 0 Then
                        Console.WriteLine("No Tags")
                    Else
                        Dim tag As IRFIDTag
                        For Each tag In  tags
                            Console.WriteLine(("Tag ID : " + tags.TagID.ToString()))
                        Next tag
                    End If
                Catch e As Exception
                    Console.WriteLine(("Unable to Get Read Tag for TagID" + e.ToString()))
                End Try
            End Sub 'MyGetTagDataTagID
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDTag.EpcURI">
            <summary>
            This is pure EPC URN of the tag ID. This field could be null if not selected in TagDataSelector.
            </summary>
            <example > 
            <code> 
            private void MyGetTagInfoEpcURI(IRFIDReader reader)
            {
                try
                {
                    IRFIDTag[] tags = reader.GetTags();
                    if (tags == null || tags.Length == 0)
                    {
                        Console.WriteLine("No Tags");
                    }
                    else
                    {
                        foreach (IRFIDTag tag in tags)
                        {
                            Console.WriteLine("EpcURI : " + tags.EpcURI);
                            Console.WriteLine(tag.TagID);
                            Console.WriteLine(tag.AntennaName);
                            Console.WriteLine(tag.TagType);
                            Console.WriteLine(tag.LastSeen);
                        }
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine("Unable to Get Read Tag for EpcURI"+ e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub MyGetTagInfoEpcURI(reader As IRFIDReader)
                Try
                    Dim tags As IRFIDTag() = reader.GetTags()
                    If tags Is Nothing Or tags.Length = 0 Then
                        Console.WriteLine("No Tags")
                    Else
                        Dim tag As IRFIDTag
                        For Each tag In  tags
                            Console.WriteLine(("EpcURI : " + tags.EpcURI))
                            Console.WriteLine(tag.TagID)
                            Console.WriteLine(tag.AntennaName)
                            Console.WriteLine(tag.TagType)
                            Console.WriteLine(tag.LastSeen)
                        Next tag
                    End If
                Catch e As Exception
                    Console.WriteLine(("Unable to Get Read Tag for EpcURI" + e.ToString()))
                End Try
            End Sub 'MyGetTagInfoEpcURI
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDTag.ReadPageSize">
            <summary>
            The Read Page size in bytes ( 2 for GEN2 tags ) 
            </summary>
            <example > 
            <code> 
            private void MyGetTagInfoRdPgSz(IRFIDReader reader)
            {
                try
                {
                    IRFIDTag[] tags = reader.GetTags();
                    if (tags == null || tags.Length == 0)
                    {
                        Console.WriteLine("No Tags");
                    }
                    else
                    {
                        foreach (IRFIDTag tag in tags)
                        {
                            Console.WriteLine("ReadPageSize : " + tags.ReadPageSize.ToString());
                        }
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine("Unable to Get Read Tag for Read Page Size"+ e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub MyGetTagInfoRdPgSz(reader As IRFIDReader)
                Try
                    Dim tags As IRFIDTag() = reader.GetTags()
                    If tags Is Nothing Or tags.Length = 0 Then
                        Console.WriteLine("No Tags")
                    Else
                        Dim tag As IRFIDTag
                        For Each tag In  tags
                            Console.WriteLine(("ReadPageSize : " + tags.ReadPageSize.ToString()))
                        Next tag
                    End If
                Catch e As Exception
                    Console.WriteLine(("Unable to Get Read Tag for Read Page Size" + e.ToString()))
                End Try
            End Sub 'MyGetTagInfoRdPgSz
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDTag.WritePageSize">
            <summary>
            The Write Page Size ( 2 for GEN2 Tags) 
            </summary>
            <example > 
            <code> 
            private void MyGetTagInfoWtPgSz(IRFIDReader reader)
            {
                try
                {
                    IRFIDTag[] tags = reader.GetTags();
                    if (tags == null || tags.Length == 0)
                    {
                        Console.WriteLine("No Tags");
                    }
                    else
                    {
                        foreach (IRFIDTag tag in tags)
                        {
                            Console.WriteLine("WritePageSize : " + tags.WritePageSize.ToString());
                        }
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine("Unable to Write Page Size"+ e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub MyGetTagInfoWtPgSz(reader As IRFIDReader)
                Try
                    Dim tags As IRFIDTag() = reader.GetTags()
                    If tags Is Nothing Or tags.Length = 0 Then
                        Console.WriteLine("No Tags")
                    Else
                        Dim tag As IRFIDTag
                        For Each tag In  tags
                            Console.WriteLine("WritePageSize : " + tags.WritePageSize.ToString());
                        Next tag
                    End If
                Catch e As Exception
                    Console.WriteLine(("Unable to WritePageSize" + e.ToString()))
                End Try
            End Sub 'MyGetTagInfoWtPgSz
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDTag.IsEPC96TagID">
            <summary>
            DEPRECATED. It will be removed in the future. TagIDLength should be used instead.
            The Tag Size 12 bytes ( EPC 96 bit tag ) 
            </summary>
            <returns>bool</returns>
            <example > 
            <code> 
            private void MyGetTagInfoEPC96Ln(IRFIDReader reader)
            {
                try
                {
                    IRFIDTag[] tags = reader.GetTags();
                    if (tags == null || tags.Length == 0)
                    {
                        Console.WriteLine("No Tags");
                    }
                    else
                    {
                        foreach (IRFIDTag tag in tags)
                        {
                            Console.WriteLine("EPC Tag ID Is" + (tags.IsEPC96TagID) ? "":" NOT " + " 96 Bits");
                        }
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine("Unable to Get Read Tag for TIsEPC64TagID"+ e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub MyGetTagInfoEPC96Ln(reader As IRFIDReader)
                Try
                    Dim tags As IRFIDTag() = reader.GetTags()
                    If tags Is Nothing Or tags.Length = 0 Then
                        Console.WriteLine("No Tags")
                    Else
                        Dim tag As IRFIDTag
                        For Each tag In  tags
                            Console.WriteLine((If "EPC Tag ID Is" + tags.IsEPC96TagID Then "" Else " NOT " + " 96 Bits")) 'ToDo: Unsupported ///feature: conditional (?) operator.
                        Next tag
                    End If
                Catch e As Exception
                    Console.WriteLine(("Unable to Get Read Tag for TIsEPC64TagID" + e.ToString()))
                End Try
            End Sub 'MyGetTagInfoEPC96Ln
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDTag.IsEPC64TagID">
            <summary>
            DEPRECATED. It will be removed in the future. TagIDLength should be used instead.
            EPC 64 bit tag  TagID size is 8 bytes 
            </summary>
            <returns>bool</returns>
            <example > 
            <code> 
            private void MyGetTagInfoEPC64Ln(IRFIDReader reader)
            {
                try
                {
                    IRFIDTag[] tags = reader.GetTags();
                    if (tags == null || tags.Length == 0)
                    {
                        Console.WriteLine("No Tags");
                    }
                    else
                    {
                        foreach (IRFIDTag tag in tags)
                        {
                            Console.WriteLine("EPC Tag ID Is" + (tags.IsEPC64TagID) ? "":" NOT " + " 64 Bits");
                        }
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine("Unable to Get Read Tag for EPC64 Tag Id"+ e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub MyGetTagInfoEPC64Ln(reader As IRFIDReader)
                Try
                    Dim tags As IRFIDTag() = reader.GetTags()
                    If tags Is Nothing Or tags.Length = 0 Then
                        Console.WriteLine("No Tags")
                    Else
                        Dim tag As IRFIDTag
                        For Each tag In  tags
                            Console.WriteLine(("EPC Tag ID Is" + tags.IsEPC64TagID))
                        Next tag
                    End If
                Catch e As Exception
                    Console.WriteLine(("Unable to Get Read Tag for EPC64 Tag Id" + e.ToString()))
                End Try
            End Sub 'MyGetTagInfoEPC64Ln
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDTag.TagIDLength">
            <summary>
            To retrieve the tag ID length in bit.
            It deprecates IsEPC96TagID and IsEPC64TagID.
            </summary>
            <returns>int</returns>
            <example > 
            <code> 
            private void MyGetTagInfoLen(IRFIDReader reader)
            {
                try
                {
                    IRFIDTag[] tags = reader.GetTags();
                    if (tags == null || tags.Length == 0)
                    {
                        Console.WriteLine("No Tags");
                    }
                    else
                    {
                        foreach (IRFIDTag tag in tags)
                        {
                            Console.WriteLine("Tag Id Len: " + tags.TagIDLength.ToString());
                        }
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine("Unable to Get Read for Tag Id Len"+ e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub MyGetTagInfoLen(reader As IRFIDReader)
                Try
                    Dim tags As IRFIDTag() = reader.GetTags()
                    If tags Is Nothing Or tags.Length = 0 Then
                        Console.WriteLine("No Tags")
                    Else
                        Dim tag As IRFIDTag
                        For Each tag In  tags
                            Console.WriteLine(("Tag Id Len: " + tags.TagIDLength.ToString())
                        Next tag 
                    End If
                Catch e As Exception
                    Console.WriteLine(("Unable to Get Read for Tag Id Len" + e.ToString()))
                End Try
            End Sub 'MyGetTagInfoLen
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDTag.IsIDInit">
            <summary>
            If the tag data is initialized from actual Tag read. 
            </summary>
            <returns>bool</returns>
            <example > 
            <code> 
            private void MyGetTagInfoInit(IRFIDReader reader)
            {
                try
                {
                    IRFIDTag[] tags = reader.GetTags();
                    if (tags == null || tags.Length == 0)
                    {
                        Console.WriteLine("No Tags");
                    }
                    else
                    {
                        foreach (IRFIDTag tag in tags)
                        {
                            Console.WriteLine("Tag Is Init From Read? -- " + (tags.IsIDInit) ? "YES":"NO");
                        }
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine("Unable to Get Read Tag for Init Src"+ e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub MyGetTagInfoInit(reader As IRFIDReader)
                Try
                    Dim tags As IRFIDTag() = reader.GetTags()
                    If tags Is Nothing Or tags.Length = 0 Then
                        Console.WriteLine("No Tags")
                    Else
                        Dim tag As IRFIDTag
                        For Each tag In  tags
                            Console.WriteLine(("Tag Is Init From Read? -- " + tags.IsIDInit))
                        Next tag
                    End If
                Catch e As Exception
                    Console.WriteLine(("Unable to Get Read Tag for Init Src" + e.ToString()))
                End Try
            End Sub 'MyGetTagInfoInit
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDTag.LastSeen">
            <summary>
            The Time stamp of the last tag seen 
            </summary>
            <returns>DateTime</returns>
            <example > 
            <code> 
            private void MyGetTagInfoLastSeen(IRFIDReader reader)
            {
                try
                {
                    IRFIDTag[] tags = reader.GetTags();
                    if (tags == null || tags.Length == 0)
                    {
                        Console.WriteLine("No Tags");
                    }
                    else
                    {
                        foreach (IRFIDTag tag in tags)
                        {
                            Console.WriteLine("Date Last Seen: " + tags.LastSeen.ToString()");
                        }
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine("Unable to Get Read Tag for Last Seen"+ e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub MyGetTagInfoLastSeen(reader As IRFIDReader)
                Try
                    Dim tags As IRFIDTag() = reader.GetTags()
                    If tags Is Nothing Or tags.Length = 0 Then
                        Console.WriteLine("No Tags")
                    Else
                        Dim tag As IRFIDTag
                        For Each tag In  tags
                            Console.WriteLine(("Date Last Seen: " + tags.LastSeen.ToString()))
                        Next tag
                    End If
                Catch e As Exception
                    Console.WriteLine(("Unable to Get Read Tag for Last Seen" + e.ToString()))
                End Try
            End Sub 'MyGetTagInfoLastSeen
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDTag.ReaderName">
            <summary>
            The Reader Name that returned the tag.
            </summary>
            <returns>string</returns>
            <example > 
            <code> 
            private void MyGetTagInfoReaderName(IRFIDReader reader)
            {
                try
                {
                    IRFIDTag[] tags = reader.GetTags();
                    if (tags == null || tags.Length == 0)
                    {
                        Console.WriteLine("No Tags");
                    }
                    else
                    {
                        foreach (IRFIDTag tag in tags)
                        {
                            Console.WriteLine("Reader Name: " + tags.ReaderName.ToString()");
                        }
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine("Unable to Get Read Tag for LReader Name"+ e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub MyGetTagInfoReaderName(reader As IRFIDReader)
                Try
                    Dim tags As IRFIDTag() = reader.GetTags()
                    If tags Is Nothing Or tags.Length = 0 Then
                        Console.WriteLine("No Tags")
                    Else
                        Dim tag As IRFIDTag
                        For Each tag In  tags
                            Console.WriteLine(("Reader Name: " + tags.ReaderName.ToString()))
                        Next tag
                    End If
                Catch e As Exception
                    Console.WriteLine(("Unable to Get Read Tag for LReader Name" + e.ToString()))
                End Try
            End Sub 'MyGetTagInfoReaderName
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDTag.AntennaName">
            <summary>
            The Antenna Name where tag was seen. 
            </summary>
            <returns>string</returns>
            <example > 
            <code> 
            private void MyGetTagInfoAntennaName(IRFIDReader reader)
            {
                try
                {
                    IRFIDTag[] tags = reader.GetTags();
                    if (tags == null || tags.Length == 0)
                    {
                        Console.WriteLine("No Tags");
                    }
                    else
                    {
                        foreach (IRFIDTag tag in tags)
                        {
                            Console.WriteLine("Antenna Name: " + tags.AntennaName.ToString());
                        }
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine("Unable to Get Read Tag for Antenna Name"+ e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub MyGetTagInfoAntennaName(reader As IRFIDReader)
                Try
                    Dim tags As IRFIDTag() = reader.GetTags()
                    If tags Is Nothing Or tags.Length = 0 Then
                        Console.WriteLine("No Tags")
                    Else
                        Dim tag As IRFIDTag
                        For Each tag In  tags
                            Console.WriteLine(("Antenna Name: " + tags.AntennaName.ToString()))
                        Next tag
                    End If
                Catch e As Exception
                    Console.WriteLine(("Unable to Get Read Tag for Antenna Name" + e.ToString()))
                End Try
            End Sub 'MyGetTagInfoAntennaName
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDTag.RawTagID">
            <summary>
            The Raw tag Id. Present only if selected in TagDataSelector.
            </summary>
            <returns>byte[]</returns>
            <example > 
            <code> 
            private void MyGetTagInfoRawID(IRFIDReader reader)
            {
                try
                {
                    IRFIDTag[] tags = reader.GetTags();
                    if (tags == null || tags.Length == 0)
                    {
                        Console.WriteLine("No Tags");
                    }
                    else
                    {
                        foreach (IRFIDTag tag in tags)
                        {
                            Console.WriteLine("Raw Tag ID: " + tags.RawTagID.ToString());
                        }
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine("Unable to Get Read Tag for Raw Tag ID"+ e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub MyGetTagInfoRawID(reader As IRFIDReader)
                Try
                    Dim tags As IRFIDTag() = reader.GetTags()
                    If tags Is Nothing Or tags.Length = 0 Then
                        Console.WriteLine("No Tags")
                    Else
                        Dim tag As IRFIDTag
                        For Each tag In  tags
                            Console.WriteLine(("Raw Tag ID: " + tags.RawTagID.ToString()))
                        Next tag
                    End If
                Catch e As Exception
                    Console.WriteLine(("Unable to Get Read Tag for Raw Tag ID" + e.ToString()))
                End Try
            End Sub 'MyGetTagInfoRawID
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.IRFIDTag.TagType">
            <summary>
            The TAG type of the TAG read. 
            </summary>
            <returns>TagType</returns>
            <example > 
            <code> 
            private void MyGetTagInfoTagType(IRFIDReader reader)
            {
                try
                {
                    IRFIDTag[] tags = reader.GetTags();
                    if (tags == null || tags.Length == 0)
                    {
                        Console.WriteLine("No Tags");
                    }
                    else
                    {
                        foreach (IRFIDTag tag in tags)
                        {
                            Console.WriteLine("Tag Type: " + tags.TagType.ToString()");
                        }
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine("Unable to Get Read Tag for Tag Type"+ e.ToString());
                }
            }
            
            //  Visual Basic .NET
                    
            Private Sub MyGetTagInfoTagType(reader As IRFIDReader)
                Try
                    Dim tags As IRFIDTag() = reader.GetTags()
                 
                    If tags Is Nothing Or tags.Length = 0 Then
                        Console.WriteLine("No Tags")
                    Else
                        Dim tag As IRFIDTag
                        For Each tag In  tags
                            Console.WriteLine(("Tag Type: " + tags.TagType.ToString()))
                        Next tag
                    End If
                Catch e As Exception
                    Console.WriteLine(("Unable to Get Read Tag for Tag Type" + e.ToString()))
                End Try
            End Sub 'MyGetTagInfoTagType
            </code>
            </example>
        </member>
        <member name="F:Symbol.RFID2.TagBase.lastSeen">
            <summary>
            The Time stamp of the last tag seen 
            </summary>        
        </member>
        <member name="F:Symbol.RFID2.TagBase.tagDataArray">
            <summary>
            Byte array representating the tag data Complete / PArtial ( based on  the TagDataSelector for exact location) 
            </summary>
        </member>
        <member name="F:Symbol.RFID2.TagBase.tagSNArray">
            <summary>
            Byte array representating the tag serial number 
            </summary>
        </member>
        <member name="F:Symbol.RFID2.TagBase.tagPureURI">
            <summary>
            Parsed tag serial number in xml format.
            </summary>
        </member>
        <member name="F:Symbol.RFID2.TagBase.snLengthInBytes">
            <summary>
            Indicates the length of serial number in Bytes.
            </summary>
        </member>
        <member name="F:Symbol.RFID2.TagBase.tagType">
            <summary>
            Index which is used to set tagFamily of the current Tag.
            </summary>
        </member>
        <member name="F:Symbol.RFID2.TagBase.isTagIdInitialized">
            <summary>
            Flag that indicates whether the tag id of the current tag 
            is initialized.
            </summary>
        </member>
        <member name="F:Symbol.RFID2.TagBase.lockable">
            <summary>
            A flag indicating whether this tag is lockable.
            </summary>
        </member>
        <member name="F:Symbol.RFID2.TagBase.maxDataLength">
            <summary>
            Maximum number of PageSizes which can be accessed .
            </summary>
        </member>
        <member name="F:Symbol.RFID2.TagBase.minDataLength">
            <summary>
            Minimum number of PageSizes which can be accessed.
            </summary>
        </member>
        <member name="F:Symbol.RFID2.TagBase.readPageSize">
            <summary>
            Read page size for the tag.
            </summary>
        </member>
        <member name="F:Symbol.RFID2.TagBase.writePageSize">
            <summary>
            Write page size for the tag.
            </summary>
        </member>
        <member name="F:Symbol.RFID2.TagBase.canRead">
            <summary>
            A flag indicating whether the current tag supports reading.
            </summary>
        </member>
        <member name="F:Symbol.RFID2.TagBase.canWrite">
            <summary>
            A flag indicating whether the current tag supports writing.
            </summary>
        </member>
        <member name="F:Symbol.RFID2.TagBase.isProprietary">
            <summary>
            A flag indicating whether the current tag is proprietary.
            </summary>
        </member>
        <member name="F:Symbol.RFID2.TagBase.isISO15693_2Compliant">
            <summary>
            A flag indicating whether the current tag is ISO15693-2 Compliant.
            </summary>
        </member>
        <member name="F:Symbol.RFID2.TagBase.isISO15693_3Compliant">
            <summary>
            A flag indicating whether the current tag is ISO15693-3 Compliant.
            </summary>
        </member>
        <member name="F:Symbol.RFID2.TagBase.isISO14443_TypeACompliant">
            <summary>
            A flag indicating whether the current tag is ISO14443-TypeA Compliant.
            </summary>
        </member>
        <member name="F:Symbol.RFID2.TagBase.supportsAnticollision">
            <summary>
            A flag indicating whether the current tag supports anticollision.
            </summary>
        </member>
        <member name="F:Symbol.RFID2.TagBase.vendorName">
            <summary>
            Tag vendor name.
            </summary>
        </member>
        <member name="F:Symbol.RFID2.TagBase.description">
            <summary>
            Tag description.
            </summary>
        </member>
        <member name="F:Symbol.RFID2.TagBase.isEPCComplaint">
            <summary>
            True in case of EPC tags ex. EPC64, EPC96 and gen2 tags else flase
            </summary>
        </member>
        <member name="F:Symbol.RFID2.TagBase.antennaName">
            <summary>
            Name of the antenna where this tag was detected.
            </summary>
        </member>
        <member name="F:Symbol.RFID2.TagBase.readerName">
            <summary>
            Name of the RFIDReader that read this tag.
            </summary>
        </member>
        <member name="F:Symbol.RFID2.TagBase.tagReadCount">
            <summary>
            Tag read count.
            </summary>
        </member>
        <member name="P:Symbol.RFID2.TagBase.TagData">
            <summary>
            The tag data based on the Tag Selection Criterion. The data will start from WordPointer page and it 
            will be of WordCount pages. The page size is also provided in TagDataLoc of GetDataLocation() of 
            TagDataSelector. The ReadPAgeSize may NOT be one byte. Always calculate the size on PageSize.
            </summary>
        </member>
        <member name="P:Symbol.RFID2.TagBase.TagID">
            <summary>
            The Tag ID 8 or 12 bytes based on the EPC format. 
            </summary>
        </member>
        <member name="P:Symbol.RFID2.TagBase.ReadPageSize">
            <summary>
            The Read Page size in bytes ( 2 for GEn2 tags ) 
            </summary>
        </member>
        <member name="P:Symbol.RFID2.TagBase.WritePageSize">
            <summary>
            The Write Page Size ( 2 for GEn2 Tags) 
            </summary>
        </member>
        <member name="P:Symbol.RFID2.TagBase.IsEPC96TagID">
            <summary>
            DEPRECATED. It will be removed in the future. TagIDLength should be used instead.
            The Tag Size 12 bytes ( EPc 96 bit tag ) 
            </summary>
            <returns></returns>
        </member>
        <member name="P:Symbol.RFID2.TagBase.IsEPC64TagID">
            <summary>
            DEPRECATED. It will be removed in the future. TagIDLength should be used instead.
            EPC 64 bit tag tag ID size is 8 bytes 
            </summary>
            <returns></returns>
        </member>
        <member name="P:Symbol.RFID2.TagBase.TagIDLength">
            <summary>
            To retrieve the tag ID length in bit  
            It deprecates IsEPC96TagID and IsEPC64TagID
            </summary>
            <returns></returns>
        </member>
        <member name="P:Symbol.RFID2.TagBase.IsIDInit">
            <summary>
            If the tag data is initialized from actual Tag read. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:Symbol.RFID2.TagBase.LastSeen">
            <summary>
            The Time stamp of the last tag seen 
            </summary>
            <returns></returns>
        </member>
        <member name="P:Symbol.RFID2.TagBase.ReaderName">
            <summary>
            The reader Name that returned the tag.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Symbol.RFID2.TagBase.AntennaName">
            <summary>
            The Antenna NAme where tag was seen. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:Symbol.RFID2.TagBase.RawTagID">
            <summary>
            The Raw tag Id. Present only if selected in TagDataSelector.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Symbol.RFID2.TagBase.TagType">
            <summary>
            The TAG type of the TAG read. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:Symbol.RFID2.TagBase.EpcURI">
            <summary>
            This Pune EPC URN of the tag ID. This field could be null if not selected in TagDataSelector.
            </summary>
        </member>
        <member name="M:Symbol.RFID2.EPCTag.#ctor(System.Byte[])">
            <summary>
            Intializes an instance of  EPCTag .
            </summary>
        </member>
        <member name="M:Symbol.RFID2.EPCTag.#ctor(System.Byte[],System.String)">
            <summary>
            Intializes an instance of  EPCTag .
            </summary>
        </member>
        <member name="M:Symbol.RFID2.EPCTag.#ctor(System.Byte[],System.String,System.Byte[])">
            <summary>
            Intializes an instance of EPCTag with data.
            </summary>
        </member>
        <member name="T:Symbol.RFID2.AntennaConfig">
            <summary>
            Used to Get/Set Antenna Configuration details
            Antenna Configuration cannot be changed when ReadMode is Autonomous
            The value of txPower is in DB.
            </summary>
        </member>
        <member name="M:Symbol.RFID2.AntennaConfig.#ctor(System.String,Symbol.RFID2.TagType[],System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Initializes a new instance of the AntennaConfig.
            </summary>
            <param name="antName">Name of the Antenna</param>
            <param name="tx">Transmitter Power </param>
            <param name="rx">Receiver Power</param>
            <param name="isconnected">Connection state whether connected or disconnected</param>
            <param name="tagTypesInUse">Tag types in inventory which supports EPCClass0/EPCClass1/EPCClass1_GEN2, EPClass0_PLUS tag is combined with EPCClass0 tag</param>
            <example>
            <code>
            private void GetAntennaConfig(IRFIDReader reader)
            {
                try
                {
                    AntennaConfig[] antcfg = reader.Antennas;
            
            		AntennaConfig newcfg = new (AntennaConfig(newcfg[0].AntennaName,
            		                            newcfg[0].TagType,
            									newcfg[0].TxPower-1,
            									newcfg[0].RxPower-1,
            									newcfg[0].IsConnected);
            																              
                    Console.WriteLine("Antenna Configuration For : " + newcfg.AntennaName.ToString());
                    Console.WriteLine("  Port.......... " + newcfg.PortNumber.ToString());
                    Console.WriteLine("  TagTypes...... ");
                    foreach (TagType type in newcfg.AntennasTagTypesSupported)
                    {
                        Console.WriteLine("    " + Type.ToString());
                    }
                    Console.WriteLine("  txPower...... " + newcfg.TxPower.ToString());
                    Console.WriteLine("  rxPower...... " + newcfg.RxPower.ToString());
                    Console.WriteLine("  Connected?... " + newcfg.IsConnected.ToString());
                  
                catch(Exception e)
                {
                    Console.WriteLine("Error in getting Antenna Config : " + e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub GetAntennaConfig(reader As IRFIDReader)
                Try
                    Dim antcfg As AntennaConfig() = reader.Antennas
                 
                    Dim newcfg = New AntennaConfig(newcfg(0).AntennaName, newcfg(0).TagType, newcfg(0).TxPower - 1, newcfg(0).RxPower - 1, newcfg(0).IsConnected)) '
                 
                    Console.WriteLine(("Antenna Configuration For : " + newcfg.AntennaName.ToString()))
                    Console.WriteLine(("  Port.......... " + newcfg.PortNumber.ToString()))
                    Console.WriteLine("  TagTypes...... ")
                    Dim type As TagType
                    For Each type In  newcfg.AntennasTagTypesSupported
                        Console.WriteLine(("    " + Type.ToString()))
                    Next type
                    Console.WriteLine(("  txPower...... " + newcfg.TxPower.ToString()))
                    Console.WriteLine(("  rxPower...... " + newcfg.RxPower.ToString()))
                    Console.WriteLine(("  Connected?... " + newcfg.IsConnected.ToString()))
                Catch
                    Console.WriteLine(("Error in getting Antenna Config : " + e.ToString()))
                End Try
            End Sub 'GetAntennaConfig
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.AntennaConfig.#ctor(System.String,Symbol.RFID2.TagType[],System.UInt32,System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AntennaConfig.
            </summary>
            <param name="antName">Name of the Antenna</param>
            <param name="tx">Transmitter Power </param>
            <param name="rx">Receiver Power</param>
            <param name="isconnected">Connection state whether connected or disconnected</param>
            <param name="isEnabled">Antenna enabled or disabled by the user</param>
            <param name="tagTypesInUse">Tag types in use</param>
            <example>
            <code>
            private void GetAntennaConfig(IRFIDReader reader)
            {
                try
                {
                    AntennaConfig[] antcfg = reader.Antennas;
            
            		AntennaConfig newcfg = new (AntennaConfig(newcfg[0].AntennaName,
            						            newcfg[0].TagType,
            									newcfg[0].TxPower-1,
            									newcfg[0].RxPower-1,
            									newcfg[0].IsConnected,
            									newcfg[0].IsEnabled);
            
                    Console.WriteLine("Antenna Configuration For : " + newcfg.AntennaName.ToString());
                    Console.WriteLine("  Port.......... " + newcfg.PortNumber.ToString());
                    Console.WriteLine("  TagTypes...... ");
                    foreach (TagType type in newcfg.AntennasTagTypesSupported)
                    {
                        Console.WriteLine("    " + Type.ToString());
                    }
                    Console.WriteLine("  txPower...... " + newcfg.TxPower.ToString());
                    Console.WriteLine("  rxPower...... " + newcfg.RxPower.ToString());
                    Console.WriteLine("  Connected?... " + newcfg.IsConnected.ToString());
                    Console.WriteLine("  Enabled?..... " + newcfg.IsEnabled.ToString());
                  
                catch(Exception e)
                {
                    Console.WriteLine("Error in getting Antenna Config : " + e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub GetAntennaConfig(reader As IRFIDReader)
                Try
                    Dim antcfg As AntennaConfig() = reader.Antennas
                 
                    Dim newcfg = New AntennaConfig(newcfg(0).AntennaName, newcfg(0).TagType, newcfg(0).TxPower - 1, newcfg(0).RxPower - 1, newcfg(0).IsConnected)) '
                 
                    Console.WriteLine(("Antenna Configuration For : " + newcfg.AntennaName.ToString()))
                    Console.WriteLine(("  Port.......... " + newcfg.PortNumber.ToString()))
                    Console.WriteLine("  TagTypes...... ")
                    Dim type As TagType
                    For Each type In  newcfg.AntennasTagTypesSupported
                        Console.WriteLine(("    " + Type.ToString()))
                    Next type
                    Console.WriteLine(("  txPower...... " + newcfg.TxPower.ToString()))
                    Console.WriteLine(("  rxPower...... " + newcfg.RxPower.ToString()))
                    Console.WriteLine(("  Connected?... " + newcfg.IsConnected.ToString()))
                    Console.WriteLine("  Enabled?..... " + newcfg.IsEnabled.ToString());
                Catch
                    Console.WriteLine(("Error in getting Antenna Config : " + e.ToString()))
                End Try
            End Sub 'GetAntennaConfig
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.AntennaConfig.SetTagTypesInUse(Symbol.RFID2.TagType[])">
            <summary>
            Sets Tagtypes in use by the antenna
            </summary>
            <param name="tagTypesInUse"></param>
        </member>
        <member name="P:Symbol.RFID2.AntennaConfig.SetPortNo">
            <summary>
            Sets the portNumber on the basis of antenna name
            </summary>
        </member>
        <member name="P:Symbol.RFID2.AntennaConfig.AntennaName">
            <summary>
            Gets the Antenna Name
            </summary>
            <example>
            <code>
            private void GetAntennaConfig(IRFIDReader reader)
            {
                try
                {
                    AntennaConfig[] antcfg in reader.Antennas;
            
                    foreach (AntennaConfig ant in antcfg.Antennas)
                    {
                        Console.WriteLine("Antenna Configuration For : " + ant.antennaName.ToString());
                    }
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in getting Antenna Config : " + e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub GetAntennaConfig(reader As IRFIDReader)
                Try
                    Dim antcfg() As AntennaConfig    
                    For Each ant In  antcfg.Antennas
                        Console.WriteLine(("Antenna Configuration For : " + ant.antennaName.ToString()))
                    Next ant
                Catch e As Exception
                    Console.WriteLine(("Error in getting Antenna Config : " + e.ToString()))
                End Try
            End Sub 'GetAntennaConfig
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.AntennaConfig.TagTypesInUse">
            <summary>
            Gets the array of tag types in use of the antenna
            </summary>
            <example>
            <code>
            private void GetAntennaConfig(IRFIDReader reader)
            {
                try
                {
                    AntennaConfig[] antcfg = reader.Antennas;
            
                    foreach (AntennaConfig ant in antcfg.Antennas)
                    {
                        foreach (TagType type in ant.AntennasTagTypesSupported)
                        {
                            Console.WriteLine("    " + type.ToString());
                        }
                    }
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in getting Antenna Config : " + e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub GetAntennaConfig(reader As IRFIDReader)
                Try
                    Dim antcfg As AntennaConfig() = reader.Antennas
                 
                    Dim ant As AntennaConfig
                    For Each ant In  antcfg.Antennas
                        Dim type As TagType
                        For Each type In  ant.AntennasTagTypesSupported
                            Console.WriteLine(("    " + type.ToString()))
                        Next type
                    Next ant
                Catch e As Exception
                    Console.WriteLine(("Error in getting Antenna Config : " + e.ToString()))
                End Try
            End Sub 'GetAntennaConfig
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.AntennaConfig.TxPower">
            <summary>
            Gets the transmit power for the antenna
            </summary>
            <example>
            <code>
            private void GSetAntennaConfig(IRFIDReader reader)
            {
                try
                {
                    AntennaConfig[] antcfg = reader.Antennas;
                
                    foreach (AntennaConfig ant in antcfg.Antennas)
                    {
            	        Console.WriteLine(" txPower...... " + ant.TxPower.ToString());
            			ant.TxPower = reader.Antennas -1;
            		}
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in getting Antenna Config : " + e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub GSetAntennaConfig(reader As IRFIDReader)
                Try
                    Dim antcfg As AntennaConfig() = reader.Antennas
                 
                    Dim ant As AntennaConfig
                    For Each ant In  antcfg.Antennas
                        Console.WriteLine((" txPower...... " + ant.TxPower.ToString()))
                        ant.TxPower = reader.Antennas - 1
                    Next ant
                Catch e As Exception
                    Console.WriteLine(("Error in getting Antenna Config : " + e.ToString()))
                End Try
            End Sub 'GSetAntennaConfig
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.AntennaConfig.RxPower">
            <summary>
            Gets the receive power for the antenna
            </summary>
            <example>
            <code>
            private void GSetAntennaConfig(IRFIDReader reader)
            {
                try
                {
                    AntennaConfig[] antcfg = reader.Antennas;
            
                    foreach (AntennaConfig ant in antcfg.Antennas)
                    {
                        Console.WriteLine(" Rx Power...... " + ant.RxPower.ToString());
            			ant.RxPower = reader.Antennas -1;
                    }
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in getting Antenna Config : " + e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub GSetAntennaConfig(reader As IRFIDReader)
                Try
                    Dim antcfg As AntennaConfig() = reader.Antennas
                 
                    Dim ant As AntennaConfig
                    For Each ant In  antcfg.Antennas
                        Console.WriteLine((" Rx Power...... " + ant.RxPower.ToString()))
                        ant.RxPower = reader.Antennas - 1
                    Next ant
                Catch e As Exception
                    Console.WriteLine(("Error in getting Antenna Config : " + e.ToString())
                End Try '
            End Sub 'GSetAntennaConfig
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.AntennaConfig.IsConnected">
            <summary>
            Gets a bool value indicating whether the antennaa is connected
            </summary>
            <example>
            <code>
            private void GetAntennaConfig(IRFIDReader reader)
            {
                try
                {
                    AntennaConfig[] antcfg = reader.Antennas;
            
                    foreach (AntennaConfig ant in antcfg.Antennas)
                    {
                        Console.WriteLine("  Connected?... " + ant.isConnected.ToString());
                    }
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in getting Antenna Config : " + e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub GetAntennaConfig(reader As IRFIDReader)
                Try
                    Dim antcfg As AntennaConfig() = reader.Antennas
                 
                    Dim ant As AntennaConfig
                    For Each ant In  antcfg.Antennas
                        Console.WriteLine(("  Connected?... " + ant.isConnected.ToString()))
                    Next ant
                Catch e As Exception
                    Console.WriteLine(("Error in getting Antenna Config : " + e.ToString())
                End Try '
            End Sub 'GetAntennaConfig
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.AntennaConfig.IsEnabled">
            <summary>
            Gets a bool value indicating whether the antennaa is enabled
            </summary>
            <example>
            <code>
            private void GSetAntennaConfig(IRFIDReader reader)
            {
                try
                {
                    AntennaConfig[] antcfg = reader.Antennas;
            
                    foreach (AntennaConfig ant in antcfg.Antennas)
                    {
                        Console.WriteLine("  Enabled?..... " + ant.Enabled.ToString());
                        ant.Enabled=false;
                    }
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in getting Antenna Config : " + e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub GSetAntennaConfig(reader As IRFIDReader)
                Try
                    Dim antcfg As AntennaConfig() = reader.Antennas
                 
                    Dim ant As AntennaConfig
                    For Each ant In  antcfg.Antennas
                        Console.WriteLine(("  Enabled?..... " + ant.Enabled.ToString()))
                        ant.Enabled = False
                    Next ant
                Catch e As Exception
                    Console.WriteLine(("Error in getting Antenna Config : " + e.ToString()))
                End Try
            End Sub 'GSetAntennaConfig
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.AntennaConfig.PortNumber">
            <summary>
            Gets the port number at which the antenna is connected
            </summary>
            <example>
            <code>
            private void GetAntennaConfig(IRFIDReader reader)
            {
                try
                {
                    AntennaConfig[] antcfg = reader.Antennas;
            
                    foreach (AntennaConfig ant in antcfg.Antennas)
                    {
                        Console.WriteLine("  Port.......... " + ant.PortNumber.ToString());
                    }
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in getting Antenna Config : " + e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub GSetAntennaConfig(reader As IRFIDReader)
                Try
                    Dim antcfg As AntennaConfig() = reader.Antennas
                 
                    Dim ant As AntennaConfig
                    For Each ant In  antcfg.Antennas
                        Console.WriteLine(("  Enabled?..... " + ant.Enabled.ToString()))
                        ant.Enabled = False
                    Next ant
                Catch e As Exception
                    Console.WriteLine(("Error in getting Antenna Config : " + e.ToString()))
                End Try
            End Sub 'GSetAntennaConfig
            </code>
            </example>
        </member>
        <member name="T:Symbol.RFID2.ReaderEventArgs">
            <summary>
            Base class for all the EventArgs classes provided by the SDK
            </summary>
            <example>
            <code>    
            private void SampleRdEvt(IRFIDReader reader)
            {
                try
                {
                    reader.ReadMode = ReadMode.AUTONOMOUS;
                    reader.TagEvent += new ReaderEventHandler(OnRdEvent);
                    Console.WriteLine("Autonomous Mode Set");
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error in Setting AutoMode" + e.Message);
                }
            }
            
            static void OnRdEvent(object sender, ReaderEventArgs args)
            {
                ReaderEventArgs RdEvtArgs = (ReaderEventArgs)args;
                
                string ReaderName = RdEvtArgs.readerName;
                
                Console.WriteLine("Reader Name : " + ReaderName);
            } 
            
            //  Visual Basic .NET
            
            Private Sub SampleRdEvt(reader As IRFIDReader)
               Try
                  reader.ReadMode = ReadMode.AUTONOMOUS
                  AddHandler reader.TagEvent, AddressOf OnRdEvent
                  Console.WriteLine("Autonomous Mode Set")
               Catch e As Exception
                  Console.WriteLine(("Error in Setting AutoMode" + e.Message))
               End Try
            End Sub 'SampleRdEvt
            
            Shared Sub OnRdEvent(sender As Object, args As ReaderEventArgs)
               Dim RdEvtArgs As ReaderEventArgs = CType(args, ReaderEventArgs)
               
               Dim ReaderName As String = RdEvtArgs.readerName
               
               Console.WriteLine(("Reader Name : " + ReaderName))
            End Sub 'OnRdEvent
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.ReaderEventArgs.#ctor(System.String)">
            <summary>
            Initializes the object of ReaderEventArgs
            </summary>
            <param name="readerName">string</param>
            <example>
            <code> 
            static void OnRdEvent(object sender, ReaderEventArgs args)
            {
                ReaderEventArgs RdEvtArgs = (ReaderEventArgs)args;
                
                string ReaderName = RdEvtArgs.readerName;
                
                Console.WriteLine("Reader Name : " + ReaderName);
            } 
            
            //  Visual Basic .NET
            
            Shared Sub OnRdEvent(sender As Object, args As ReaderEventArgs)
                Dim RdEvtArgs As ReaderEventArgs = CType(args, ReaderEventArgs)
               
                Dim ReaderName As String = RdEvtArgs.readerName
                
                Console.WriteLine(("Reader Name : " + ReaderName))
            End Sub 'OnRdEvent    
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.ReaderEventArgs.ReaderName">
            <summary>
            Gets readerName
            </summary>
            <example>
            <code> 
            static void OnRdEvent(object sender, ReaderEventArgs args)
            {
                ReaderEventArgs RdEvtArgs = (ReaderEventArgs)args;
                
                string ReaderName = RdEvtArgs.readerName;
                
                Console.WriteLine("Reader Name : " + RdEvtArgs.readerName);
            } 
            
            //  Visual Basic .NET
            
            Shared Sub OnRdEvent(sender As Object, args As ReaderEventArgs)
                Dim RdEvtArgs As ReaderEventArgs = CType(args, ReaderEventArgs)
              
                Dim ReaderName As String = RdEvtArgs.readerName
              
                Console.WriteLine(“Reader Name : " + RdEvtArgs.readerName);
            End Sub 'OnRdEvent '
            </code>
            </example>
        </member>
        <member name="T:Symbol.RFID2.TagEventArgs">
             <summary>
             Provides data for the  TagEvent notify events
             </summary>
             <example>
             <code> 
             private void SampleTagEvt(IRFIDReader reader)
             {
                 try
                 {
                     reader.ReadMode = ReadMode.AUTONOMOUS;
                     reader.TagEvent += new ReaderEventHandler(OnTagEvent);
                     Console.WriteLine("Autonomous Mode Set");
                 }
                 catch (Exception e)
                 {
                     Console.WriteLine("Error in Setting AutoMode" + e.Message);
                 }
             }
             
             static void OnReader_TagEvent(object sender, ReaderEventArgs args)
             {
                 string tagIDStr = String.Empty;
                 byte[] tagSN = null;
                 
                 TagEventArgs tagArgs = (TagEventArgs)args;
                 
                 IRFIDTag[] Tags = tagArgs.Tags;
                 tagSN = Tags[0].TagID;
                 
                 foreach (byte b in tagSN)
                 {
                   tagIDStr += b.ToString("X2");
                 }
                 Console.WriteLine("Tags[0].TagType +":"+"TagID:" + tagIDStr);
             } 
             
             //  Visual Basic .NET
             
             Private Sub SampleTagEvt(reader As IRFIDReader)
                 Try
                     reader.ReadMode = ReadMode.AUTONOMOUS
                     AddHandler reader.TagEvent, AddressOf OnTagEvent
                     Console.WriteLine("Autonomous Mode Set")
                 Catch e As Exception
                     Console.WriteLine(("Error in Setting AutoMode" + e.Message))
                 End Try
             End Sub 'SampleTagEvt
            
             Shared Sub OnReader_TagEvent(sender As Object, args As ReaderEventArgs)
                 Dim tagIDStr As String = [String].Empty
                 Dim tagSN As Byte() = Nothing
               
                 Dim tagArgs As TagEventArgs = CType(args, TagEventArgs)
               
                 Dim Tags As IRFIDTag() = tagArgs.Tags
                 tagSN = Tags(0).TagID
               
                 Dim b As Byte
                 For Each b In  tagSN
                     tagIDStr += b.ToString("X2")
                 Next b
                 Console.WriteLine((Tags(0).TagType + ":" + "TagID:" + tagIDStr))
             End Sub 'OnReader_TagEvent '
             </code>
             </example>
        </member>
        <member name="M:Symbol.RFID2.TagEventArgs.#ctor(System.String,Symbol.RFID2.IRFIDTag[])">
             <summary>
             Initializes the object of TagEventArgs
             </summary>
             <param name="readerName">string</param>
             <param name="tags">IRFIDTag</param>
             <example>
             <code> 
             static void OnTagEvent(object sender, ReaderEventArgs args)
             {
                 string tagIDStr = String.Empty;
                 byte[] tagSN = null;
                 
                 TagEventArgs tagArgs = (TagEventArgs)args;
                 
                 IRFIDTag[] Tags = tagArgs.Tags;
                 tagSN = Tags[0].TagID;
                 
                 foreach (byte b in tagSN)
                 {
                   tagIDStr += b.ToString("X2");
                 }
                 Console.WriteLine(Tags[0].TagType +":"+"TagID:" + tagIDStr);
             } 
             
             // or...stand alone...
             
             static OnTagEvent(Object sender, new TagEventArgs(reader.ReaderName), reader.GetTags()))
             {
              //   ...
             }
             
             //  Visual Basic .NET
             
             Shared Sub OnTagEvent(sender As Object, args As ReaderEventArgs)
                 Dim tagIDStr As String = [String].Empty
                 Dim tagSN As Byte() = Nothing
               
                 Dim tagArgs As TagEventArgs = CType(args, TagEventArgs)
               
                 Dim Tags As IRFIDTag() = tagArgs.Tags
                 tagSN = Tags(0).TagID
               
                 Dim b As Byte
                 For Each b In  tagSN
                     tagIDStr += b.ToString("X2")
                 Next b
                 Console.WriteLine((Tags(0).TagType + ":" + "TagID:" + tagIDStr))
             End Sub 'OnTagEvent
            
             Shared Sub New(sender As [Object], New TagEventArgs(reader.ReaderName, reader.GetTags()))
             ‘        …
             End Sub 'New
             </code>
             </example>
        </member>
        <member name="P:Symbol.RFID2.TagEventArgs.Tags">
            <summary>
            Array of IRFIDTag read by the reader
            </summary>
            <example>
            <code>
            static void OnTagEvent(object sender, ReaderEventArgs args)
            {
                string tagIDStr = String.Empty;
                byte[] tagSN = null;
                
                TagEventArgs tagArgs = (TagEventArgs)args;
                
                IRFIDTag[] Tags = tagArgs.Tags;
                tagSN = Tags[0].TagID;
                
                foreach (IRFIDTag[] tags in tagArgs.Tags)
                {
            			Console.WriteLine("TagID : " + tags.ToString());
                }
            } 
            
            //  Visual Basic .NET
            
            Shared Sub OnTagEvent(sender As Object, arg As ReaderEventArgs)
                Dim tagIDStr As String = [String].Empty
                Dim tagSN As Byte() = Nothing
              
                Dim tagArgs As TagEventArgs = CType(args, TagEventArgs)
              
                Dim Tags As IRFIDTag() = tagArgs.Tags
                tagSN = Tags(0).TagID
              
                Dim tags As IRFIDTag()
                For Each tags In  tagArgs.Tags
                    Console.WriteLine(("TagID : " + tags.ToString()))
                Next tags
            End Sub 'OnTagEvent
            </code>
            </example>
        </member>
        <member name="T:Symbol.RFID2.GPIStatusEventArgs">
             <summary>
             Provides data for the  InputStatus notify events
             </summary>
             <example>
             <code> 
             private void SampleGPIOEvt(IRFIDReader reader)
             {
                 try
                 {
                     reader.ReadMode = ReadMode.AUTONOMOUS;
                     reader.InputStatusNotifyEvent += new ReaderEventHandler(OnGPIOEvt);
                     Console.WriteLine("Autonomous Mode Set");
                 }
                 catch (Exception e)
                 {
                     Console.WriteLine("Error in Setting AutoMode" + e.Message);
                 }
             }
             
             static void OnGPIOEvt(object sender, ReaderEventArgs args)
             {
                 
                 GPIStatusEventArgs GPIOArgs = (GPIStatusEventArgs)args;
                 
                 bool[] pins = GPIOArgs.inputPins;
                 
                 foreach (bool pin in pins)
                 {
            		    Console.WriteLine("GPIO Pins : " + pin.ToString());
                 }
             } 
             
             //  Visual Basic .NET
             
             Private Sub SampleGPIOEvt(reader As IRFIDReader)
                 Try
                     reader.ReadMode = ReadMode.AUTONOMOUS
                     AddHandler reader.InputStatusNotifyEvent, AddressOf OnGPIOEvt
                     Console.WriteLine("Autonomous Mode Set")
                 Catch e As Exception
                     Console.WriteLine(("Error in Setting AutoMode" + e.Message))
                 End Try
             End Sub 'SampleGPIOEvt
            
             Shared Sub OnGPIOEvt(sender As Object, args As ReaderEventArgs)
               
                 Dim GPIOArgs As GPIStatusEventArgs = CType(args, GPIStatusEventArgs)
               
                 Dim pins As Boolean() = GPIOArgs.inputPins
               
                 Dim pin As Boolean
                 For Each pin In  pins
                     Console.WriteLine(("GPIO Pins : " + pin.ToString()))
                 Next pin
             End Sub 'OnGPIOEvt
             </code>
             </example>
        </member>
        <member name="M:Symbol.RFID2.GPIStatusEventArgs.#ctor(System.String,System.Boolean[])">
             <param name="readerName">string</param>
             <param name="inputPins">Array of booleans indicating status of input pins </param>
             <example>
             <code>
             static void OnGPIOEvt(object sender, ReaderEventArgs args)
             {
                 string tagIDStr = String.Empty;
                 byte[] tagSN = null;
                 
                 GPIStatusEventArgs GPIOArgs = (GPIStatusEventArgs)args;
                 
                 bool[] pins = GPIOArgs.inputPins;
                 
                 foreach (bool pin in pins)
                 {
            				Console.WriteLine("GPIO Pins : " + pin.ToString());
                 }
             } 
             
             // or...stand alone...
             ...
             bool[] inputPins = new bool[6];
             bool[] outputPins = new bool[6]            
             reader.GetIOStatus(out inputPins, out outputPins);
             static OnTagEvent(Object sender, new GPIStatusEventArgs(reader.ReaderName, inputPins))
             {
                 ...
             }
             
             //  Visual Basic .NET
             
             Shared Sub OnGPIOEvt(sender As Object, args As ReaderEventArgs)
                 Dim tagIDStr As String = [String].Empty
                 Dim tagSN As Byte() = Nothing
               
                 Dim GPIOArgs As GPIStatusEventArgs = CType(args, GPIStatusEventArgs)
               
                 Dim pins As Boolean() = GPIOArgs.inputPins
               
                 Dim pin As Boolean
                 For Each pin In  pins
                     Console.WriteLine(("GPIO Pins : " + pin.ToString()))
                 Next pin
             End Sub 'OnGPIOEvt
            
             Shared Sub New(sender As [Object], New GPIStatusEventArgs(reader.ReaderName, inputPins))
             '	…
             End Sub 'New
             </code>
             </example>
        </member>
        <member name="P:Symbol.RFID2.GPIStatusEventArgs.InputStatus">
             <summary>
             Returns array of booleans indicating on/off status of input lines by serial order. 
             </summary>
             <example>
             <code> 
             static void OnGPIOEvt(object sender, ReaderEventArgs args)
             {
                 string tagIDStr = String.Empty;
                 byte[] tagSN = null;
                 
                 GPIStatusEventArgs GPIOArgs = (GPIStatusEventArgs)args;
                 
                 bool[] pins = GPIOArgs.inputPins;
                 
                 foreach (bool pin in GPIOArgs.inputPins)
                 {
            				Console.WriteLine("GPIO Pins : " + pin.ToString());
                 }
             } 
             
             //  Visual Basic .NET
             
            Shared Sub OnGPIOEvt(sender As Object, args As ReaderEventArgs)
                 Dim tagIDStr As String = [String].Empty
                 Dim tagSN As Byte() = Nothing
               
                 Dim GPIOArgs As GPIStatusEventArgs = CType(args, GPIStatusEventArgs)
               
                 Dim pins As Boolean() = GPIOArgs.inputPins
               
                 Dim pin As Boolean
                 For Each pin In  GPIOArgs.inputPins
                     Console.WriteLine(("GPIO Pins : " + pin.ToString()))
                 Next pin
             End Sub 'OnGPIOEvt
             </code>
             </example>
        </member>
        <member name="T:Symbol.RFID2.ManagementEventArgs">
             <summary>
             Provides data for the Reader ManagementEvent
             </summary>
             <example>
             <code> 
             private void SampleMgrEvt(IRFIDReader reader)
             {
                 try
                 {
                     reader.ReadMode = ReadMode.AUTONOMOUS;
                     reader.ManagementEvent += new ReaderEventHandler(OnMgrEvt);
                     Console.WriteLine("Autonomous Mode Set");
                 }
                 catch (Exception e)
                 {
                     Console.WriteLine("Error in Setting AutoMode" + e.Message);
                 }
             }
             
             static void OnMgrEvt(object sender, ReaderEventArgs args)
             {
                 int j=0;
                 string tagIDStr = String.Empty;
                 byte[] tagSN = null;
                 
                 ManagementEventArgs MgrArgs = (ManagementEventArgs)args;
                 
                 AntennaConfig[] AntStatus = MgrArgs.AntennaStatus;
                 
                 console.WriteLine("ReaderStatus : " + MgrArgs.readerStatus.ToString());
                 
                 foreach (AntennaConfig[] ant in AntStatus )
                 {
            				++j;
            				Console.WriteLine("Antenna["+j.ToString()+"] Status: " + ant.ToString());
                 }
             } 
             
             //  Visual Basic .NET
             
             Private Sub SampleMgrEvt(reader As IRFIDReader)
                 Try
                     reader.ReadMode = ReadMode.AUTONOMOUS
                     AddHandler reader.ManagementEvent, AddressOf OnMgrEvt
                     Console.WriteLine("Autonomous Mode Set")
                 Catch e As Exception
                     Console.WriteLine(("Error in Setting AutoMode" + e.Message))
                 End Try
             End Sub 'SampleMgrEvt
            
             Shared Sub OnMgrEvt(sender As Object, args As ReaderEventArgs)
                 Dim j As Integer = 0
                 Dim tagIDStr As String = [String].Empty
                 Dim tagSN As Byte() = Nothing
               
                 Dim MgrArgs As ManagementEventArgs = CType(args, ManagementEventArgs)
               
                 Dim AntStatus As AntennaConfig() = MgrArgs.AntennaStatus
               
                 console.WriteLine(("ReaderStatus : " + MgrArgs.readerStatus.ToString()))
               
                 Dim ant As AntennaConfig()
                 For Each ant In  AntStatus
                     Console.WriteLine(("Antenna[" + j.ToString() + "] Status: " + ant.ToString()))
                 Next ant
             End Sub 'OnMgrEvt
             </code>
             </example>
        </member>
        <member name="M:Symbol.RFID2.ManagementEventArgs.#ctor(System.String,Symbol.RFID2.ReaderStatus,Symbol.RFID2.AntennaConfig[])">
            <summary>
            Initializes the object of ManagementEventArgs
            </summary>
            <param name="readerName">string</param>
            <param name="readerStatus">ReaderStatus</param>
            <param name="antennae">Array of AntennaConfig objects</param>
            <example>
            <code> 
            static void OnMgrEvt(object sender, ReaderEventArgs args)
            {
                int j=0;
                string tagIDStr = String.Empty;
                byte[] tagSN = null;
                
                ManagementEventArgs MgrArgs = (ManagementEventArgs)args;
                
                AntennaConfig[] AntStatus = MgrArgs.AntennaStatus;
                
                console.WriteLine("ReaderStatus : " + MgrArgs.readerStatus.ToString());
                
                foreach (AntennaConfig[] ant in AntStatus )
                {
            		++j;
            		Console.WriteLine("Antenna["+j.ToString()+"] Status: " + ant.ToString());
                }
            } 
            
            // or...stand alone...
            
            static OnMgrEvt(Object sender, new ManagementEventArgs(reader.ReaderName,
                                                                   reader.ReaderStatus,
                                                                   reader.Antennas))
                                
            {
                ...
            }
            
            //  Visual Basic .NET
            		
            Shared Sub OnMgrEvt(sender As Object, args As ReaderEventArgs)
                Dim j As Integer = 0
                Dim tagIDStr As String = [String].Empty
                Dim tagSN As Byte() = Nothing
                          
                Dim MgrArgs As ManagementEventArgs = CType(args, ManagementEventArgs)
               
                Dim AntStatus As AntennaConfig() = MgrArgs.AntennaStatus
               
                console.WriteLine(("ReaderStatus : " + MgrArgs.readerStatus.ToString()))
               
                Dim ant As AntennaConfig()
                For Each ant In  AntStatus
                    Console.WriteLine(("Antenna[" + j.ToString() + "] Status: " + ant.ToString()))
                Next ant
            End Sub 'OnMgrEvt
            
            Shared Sub OnMgrEvt (sender As [Object], New ManagementEventArgs(reader.ReaderName, reader.ReaderStatus,reader.Antennas))
            // ...
            End Sub 'New
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.ManagementEventArgs.ReaderStatus">
            <summary>
            Returns readerStatus
            </summary>
            <example>
            <code> 
            static void OnMgrEvt(object sender, ReaderEventArgs args)
            {
                int j=0;
                string tagIDStr = String.Empty;
                byte[] tagSN = null;
                
                ManagementEventArgs MgrArgs = (ManagementEventArgs)args;
                
                AntennaConfig[] AntStatus = MgrArgs.AntennaStatus;
                
                console.WriteLine("ReaderStatus : " + MgrArgs.readerStatus.ToString());
                
            } 
            
            //  Visual Basic .NET
                
            Shared Sub OnMgrEvt(sender As Object, args As ReaderEventArgs)
                Dim j As Integer = 0
                Dim tagIDStr As String = [String].Empty
                Dim tagSN As Byte() = Nothing
              
                Dim MgrArgs As ManagementEventArgs = CType(args, ManagementEventArgs)
              
                Dim AntStatus As AntennaConfig() = MgrArgs.AntennaStatus
              
                console.WriteLine(("ReaderStatus : " + MgrArgs.readerStatus.ToString()))
            End Sub 'OnMgrEvt
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.ManagementEventArgs.AntennaStatus">
            <summary>
            Returns array of AntennaConfig giving current antennae status
            </summary>
            <example>
            <code> 
            static void OnMgrEvt(object sender, ReaderEventArgs args)
            {
                int j=0;
                string tagIDStr = String.Empty;
                byte[] tagSN = null;
                
                ManagementEventArgs MgrArgs = (ManagementEventArgs)args;
                
                AntennaConfig[] AntStatus = MgrArgs.AntennaStatus;
                
                foreach (AntennaConfig[] ant in AntStatus )
                {
            		++j;
            		Console.WriteLine("Antenna["+j.ToString()+"] Status: " + ant.ToString());
                }
            } 
            
            //  Visual Basic .NET
            
            Shared Sub OnMgrEvt(sender As Object, args As ReaderEventArgs)
                Dim j As Integer = 0
                Dim tagIDStr As String = [String].Empty
                Dim tagSN As Byte() = Nothing
              
                Dim MgrArgs As ManagementEventArgs = CType(args, ManagementEventArgs)
              
                Dim AntStatus As AntennaConfig() = MgrArgs.AntennaStatus
              
                Dim ant As AntennaConfig()
                For Each ant In  AntStatus
                    Console.WriteLine(("Antenna[" + j.ToString() + "] Status: " + ant.ToString()))
                Next ant
            End Sub 'OnMgrEvt
            </code>
            </example>
        </member>
        <member name="T:Symbol.RFID2.ProximityEventArgs">
             <summary>
             Provides data for the Reader ProximitySensorEvent
             </summary>
             <example>
             <code> 
             private void SampleProxEvt(IRFIDReader reader)
             {
                 try
                 {
            	        reader.ReadMode = ReadMode.AUTONOMOUS;
                     reader.ProximitySensorEvent += new ReaderEventHandler(OnProximityEvt);
                     Console.WriteLine("Autonomous Mode Set");
                 }
                 catch (Exception e)
                 {
                     Console.WriteLine("Error in Setting AutoMode" + e.Message);
                 }
             }
             
             static void OnProximityEvt(object sender, ReaderEventArgs args)
             {
                 int j=0;
                 
                 ProximityEventArgs PrxArgs = (ProximityEventArgs)args;
                 
                 UInt16 proximity = PrxArgs.proximity ;
                 
                 console.WriteLine("Proximity : " + proximity.ToString());
             } 
             
             //  Visual Basic .NET
             
             Private Sub SampleProxEvt(reader As IRFIDReader)
                 Try
                     reader.ReadMode = ReadMode.AUTONOMOUS
                     AddHandler reader.ProximitySensorEvent, AddressOf OnProximityEvt
                     Console.WriteLine("Autonomous Mode Set")
                 Catch e As Exception
                     Console.WriteLine(("Error in Setting AutoMode" + e.Message))
                 End Try
             End Sub 'SampleProxEvt
            
             Shared Sub OnProximityEvt(sender As Object, args As ReaderEventArgs)
                 Dim j As Integer = 0
               
                 Dim PrxArgs As ProximityEventArgs = CType(args, ProximityEventArgs)
               
                 Dim proximity As UInt16 = PrxArgs.proximity
               
                 console.WriteLine(("Proximity : " + proximity.ToString()))
             End Sub 'OnProximityEvt
             </code>
             </example>
        </member>
        <member name="M:Symbol.RFID2.ProximityEventArgs.#ctor(System.String,System.UInt16)">
             <summary>
             Initializes the object of ProximityEventArgs
             </summary>
             <param name="readerName">string</param>
             <param name="proximity">UInt16</param>
             <example>
             <code> 
             static void OnProximityEvt(object sender, ReaderEventArgs args)
             {
                 int j=0;
                 
                 ProximityEventArgs PrxArgs = (ProximityEventArgs)args;
                 
                 UInt16 proximity = PrxArgs.proximity ;
                 
                 console.WriteLine("Proximity : " + PrxArgs.proximity.ToString());
             } 
             
             // or...stand alone...
             
             static OnMgrEvt(Object sender, new ProximityEventArgs(reader.ReaderName, 125))
             {
                 ...
             }
             
             //  Visual Basic .NET
             
             Shared Sub OnProximityEvt(sender As Object, args As ReaderEventArgs)
                 Dim j As Integer = 0
               
                 Dim PrxArgs As ProximityEventArgs = CType(args, ProximityEventArgs)
               
                 Dim proximity As UInt16 = PrxArgs.proximity
               
                 console.WriteLine(("Proximity : " + PrxArgs.proximity.ToString()))
             End Sub 'OnProximityEvt
            
             Shared Sub OnMgrEvt (sender As [Object], New ProximityEventArgs(reader.ReaderName, 125))
             End Sub 'New
             </code>
             </example>
        </member>
        <member name="P:Symbol.RFID2.ProximityEventArgs.Proximity">
            <summary>
            Returns proximity
            </summary>
            <example>
            <code> 
            static void OnProximityEvt(object sender, ReaderEventArgs args)
            {
                int j=0;
                
                ProximityEventArgs PrxArgs = (ProximityEventArgs)args;
                
                console.WriteLine("Proximity : " + PrxArgs.proximity.ToString());
            } 
            
            //  Visual Basic .NET
            
            Shared Sub OnProximityEvt(sender As Object, args As ReaderEventArgs)
                Dim j As Integer = 0
              
                Dim PrxArgs As ProximityEventArgs = CType(args, ProximityEventArgs)
              
                console.WriteLine(("Proximity : " + PrxArgs.proximity.ToString()))
            End Sub 'OnProximityEvt
            </code>
            </example>
        </member>
        <member name="T:Symbol.RFID2.MotionEventArgs">
             <summary>
             Provides data for the Reader MotionSensorEvent
             </summary>
             <example>
             <code> 
            private void SampleMotionEvt(IRFIDReader reader)
            {
                 try
                 {
            		    reader.ReadMode = ReadMode.AUTONOMOUS;
                     reader.MotionSensorEvent += new ReaderEventHandler(OnMotionEvt);
                     Console.WriteLine("Autonomous Mode Set");
                 }
                 catch (Exception e)
                 {
                     Console.WriteLine("Error in Setting AutoMode" + e.Message);
                 }
             }
             
             static void OnMotionEvt(object sender, ReaderEventArgs args)
             {
                 MotionEventArgs MotionArgs = (MotionEventArgs)args;
                 
                 UInt16  xMotion= MotionArgs.xMotion ;
                 UInt16  yMotion= MotionArgs.yMotion ;
                 UInt16  zMotion= MotionArgs.zMotion ;
                 console.WriteLine("X-Motion : " + MotionArgs.xMotion.ToString());
                 console.WriteLine("Y-Motion : " + MotionArgs.yMotion.ToString());
                 console.WriteLine("Z-Motion : " + MotionArgs.zMotion.ToString());
             } 
             
             //  Visual Basic .NET
             
             Private Sub SampleMotionEvt(reader As IRFIDReader)
                 Try
                     reader.ReadMode = ReadMode.AUTONOMOUS
                     AddHandler reader.MotionSensorEvent, AddressOf OnMotionEvt
                     Console.WriteLine("Autonomous Mode Set") '
                 Catch e As Exception
                     Console.WriteLine(("Error in Setting AutoMode" + e.Message))
                 End Try
             End Sub 'SampleMotionEvt
            
             Shared Sub OnMotionEvt(sender As Object, args As ReaderEventArgs)
                 Dim MotionArgs As MotionEventArgs = CType(args, MotionEventArgs)
               
                 Dim xMotion As UInt16 = MotionArgs.xMotion
                 Dim yMotion As UInt16 = MotionArgs.yMotion
                 Dim zMotion As UInt16 = MotionArgs.zMotion
                 console.WriteLine(("X-Motion : " + MotionArgs.xMotion.ToString()))
                 console.WriteLine(("Y-Motion : " + MotionArgs.yMotion.ToString()))
                 console.WriteLine(("Z-Motion : " + MotionArgs.zMotion.ToString()))
             End Sub 'OnMotionEvt
             </code>
             </example>
        </member>
        <member name="M:Symbol.RFID2.MotionEventArgs.#ctor(System.String,System.UInt16,System.UInt16,System.UInt16)">
             <summary>
             Initializes the object of MotionEventArgs
             </summary>
             <param name="readerName">string</param>
             <param name="xMotion">UInt16</param>
             <param name="yMotion">UInt16</param>
             <param name="zMotion">UInt16</param>
             <example>
             <code> 
             static void SampleMotionEvt(object sender, ReaderEventArgs args)
             {
                 MotionEventArgs MotionArgs = (MotionEventArgs)args;
                 
                 UInt16  xMotion= MotionArgs.xMotion ;
                 UInt16  yMotion= MotionArgs.yMotion ;
                 UInt16  zMotion= MotionArgs.zMotion ;
                 console.WriteLine("X-Motion : " + MotionArgs.xMotion.ToString());
                 console.WriteLine("Y-Motion : " + MotionArgs.yMotion.ToString());
                 console.WriteLine("Z-Motion : " + MotionArgs.zMotion.ToString());
             } 
             
             // or...stand alone...
             
             static SampleMotionEvt(Object sender, new MotionEventArgs(reader.ReaderName, 25, 50, 75))
             {
                 ...
             }
             
             //  Visual Basic .NET
             
             Shared Sub SampleMotionEvt(sender As Object, args As ReaderEventArgs)
                 Dim MotionArgs As MotionEventArgs = CType(args, MotionEventArgs)
               
                 Dim xMotion As UInt16 = MotionArgs.xMotion
                 Dim yMotion As UInt16 = MotionArgs.yMotion
                 Dim zMotion As UInt16 = MotionArgs.zMotion
                 console.WriteLine(("X-Motion : " + MotionArgs.xMotion.ToString()))
                 console.WriteLine(("Y-Motion : " + MotionArgs.yMotion.ToString()))
                 console.WriteLine(("Z-Motion : " + MotionArgs.zMotion.ToString()))
             End Sub 'SampleMotionEvt
            
            ' or...stand alone...
             
            Shared Sub New(sender As [Object], New MotionEventArgs(reader.ReaderName, 25, 50, 75))'
            '    ...
            End Sub 'New
             </code>
             </example>
        </member>
        <member name="P:Symbol.RFID2.MotionEventArgs.XMotion">
            <summary>
            Returns XMotion
            </summary>
            <example>
            <code> 
            static void OnMotionEvt(object sender, ReaderEventArgs args)
            {
                MotionEventArgs MotionArgs = (MotionEventArgs)args;
                
                UInt16  xMotion= MotionArgs.xMotion ;
                
                console.WriteLine("X-Motion : " + MotionArgs.xMotion.ToString());
            } 
            
            //  Visual Basic .NET
            
            Shared Sub OnMotionEvt(sender As Object, args As ReaderEventArgs)
                Dim MotionArgs As MotionEventArgs = CType(args, MotionEventArgs)
              
                Dim xMotion As UInt16 = MotionArgs.xMotion
              
                console.WriteLine(("X-Motion : " + MotionArgs.xMotion.ToString()))
            End Sub 'OnMotionEvt
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.MotionEventArgs.YMotion">
            <summary>
            Returns YMotion
            </summary>
            <example>
            <code> 
            static void OnMotionEvt(object sender, ReaderEventArgs args)
            {
                MotionEventArgs MotionArgs = (MotionEventArgs)args;
                
                UInt16  yMotion= MotionArgs.yMotion ;
                
                console.WriteLine("Y-Motion : " + MotionArgs.yMotion.ToString());
            } 
            
            //  Visual Basic .NET
            				
            Shared Sub OnMotionEvt(sender As Object, args As ReaderEventArgs)
                Dim MotionArgs As MotionEventArgs = CType(args, MotionEventArgs)
              
                Dim yMotion As UInt16 = MotionArgs.yMotion
              
                console.WriteLine(("Y-Motion : " + MotionArgs.yMotion.ToSt))
            End Sub 'OnMotionEvt '
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.MotionEventArgs.ZMotion">
            <summary>
            Returns ZMotion
            </summary>
            <example>
            <code> 
            static void OnMotionEvt(object sender, ReaderEventArgs args)
            {
                MotionEventArgs MotionArgs = (MotionEventArgs)args;
                
                UInt16  zMotion= MotionArgs.zMotion ;
                
                console.WriteLine("Z-Motion : " + MotionArgs.zMotion.ToString());
            } 
            
            //  Visual Basic .NET
            
            Shared Sub OnMotionEvt(sender As Object, args As ReaderEventArgs)
                Dim MotionArgs As MotionEventArgs = CType(args, MotionEventArgs)
              
                Dim zMotion As UInt16 = MotionArgs.zMotion
              
                console.WriteLine(("Z-Motion : " + MotionArgs.zMotion.ToString()))
            End Sub 'OnMotionEvt
            </code>
            </example>
        </member>
        <member name="T:Symbol.RFID2.TriggerEventArgs">
             <summary>
             Provides information about the trigger event whether the
             trigger state is pressed or released
             </summary>
             <example>
             <code> 
             private void SampleTrigPEvt(IRFIDReader reader)
             {
                 try
                 {
                     reader.ReadMode = ReadMode.AUTONOMOUS;
                     reader.TriggerPressedEvent += new ReaderEventHandler(OnTriggerEvt);
                     Console.WriteLine("Autonomous Mode Set");
                 }
                 catch (Exception e)
                 {
                     Console.WriteLine("Error in Setting AutoMode" + e.Message);
                 }
             }
             
             static void OnTriggerEvt(object sender, ReaderEventArgs args)
             {
                 TriggerEventArgs TrigArgs = (TriggerEventArgs)args;
                 
                 TriggerState trigger = TrigArgs.TriggerState;
                 
                 console.WriteLine("Trigger : " + trigger.ToString());
             } 
             
             //  Visual Basic .NET
             
             Private Sub SampleTrigPEvt(reader As IRFIDReader)
                 Try
                     reader.ReadMode = ReadMode.AUTONOMOUS
                     AddHandler reader.TriggerPressedEvent, AddressOf OnTriggerEvt
                     Console.WriteLine("Autonomous Mode Set")
                 Catch e As Exception
                     Console.WriteLine(("Error in Setting AutoMode" + e.Message))
                 End Try
             End Sub 'SampleTrigPEvt
            
             Shared Sub OnTriggerEvt(sender As Object, args As ReaderEventArgs)
                 Dim TrigArgs As TriggerEventArgs = CType(args, TriggerEventArgs)
               
                 Dim trigger As TriggerState = TrigArgs.TriggerState
               
                 console.WriteLine(("Trigger : " + trigger.ToString()))
             End Sub 'OnTriggerEvt
             </code>
             </example>
        </member>
        <member name="M:Symbol.RFID2.TriggerEventArgs.#ctor(System.String,Symbol.RFID2.TriggerState)">
             <summary>
             Initializes the object of TriggerEventArgs
             </summary>
             <param name="readerName">string</param>
             <param name="triggerState">UInt16</param>
             <example>
             <code> 
             static void OnTriggerEvt(object sender, ReaderEventArgs args)
             {
                 TriggerEventArgs TrigArgs = (TriggerEventArgs)args;
                 
                 console.WriteLine("Trigger : " + TrigArgs.TriggerState.ToString());
             } 
             
             // or...stand alone...
             
             static OnTriggerEvt(Object sender, new TriggerEventArgs(reader.ReaderName, reader.TriggerState))
             {
                 ...
             }
             
             //  Visual Basic .NET
             
             Shared Sub OnTriggerEvt(sender As Object, args As ReaderEventArgs)
                 Dim TrigArgs As TriggerEventArgs = CType(args, TriggerEventArgs)
               
                 console.WriteLine(("Trigger : " + TrigArgs.TriggerState.ToString()))
             End Sub 'OnTriggerEvt
            
             Shared Sub New(sender As [Object], New TriggerEventArgs(reader.ReaderName, reader.TriggerState))
                 ...
             End Sub 'New
             </code>
             </example>
        </member>
        <member name="P:Symbol.RFID2.TriggerEventArgs.TriggerState">
            <summary>
            Returns trigger status
            </summary>
            <example>
            <code> 
            static void OnTriggerEvt(object sender, ReaderEventArgs args)
            {
              TriggerEventArgs TrigArgs = (TriggerEventArgs)args;
                
              console.WriteLine("Trigger : " + TrigArgs.TriggerState.ToString());
            } 
            
            //  Visual Basic .NET
            
            Shared Sub OnTriggerEvt(sender As Object, args As ReaderEventArgs)
                Dim TrigArgs As TriggerEventArgs = CType(args, TriggerEventArgs)
              
                console.WriteLine(("Trigger : " + TrigArgs.TriggerState.ToString()))
            End Sub 'OnTriggerEvt
            </code>
            </example>
        </member>
        <member name="T:Symbol.RFID2.RFIDStatusMonitorEventArgs">
             <summary>
             Provides information about the RFID Module Status event whether the
             RFIDModule is enabled or disabled
             </summary>
             <example>
             <code> 
             private void SampleMonitorEvt(IRFIDReader reader)
             {
                 try
                 {
            		    reader.ReadMode = ReadMode.AUTONOMOUS;
                     reader.RFIDStatusMonitorEvent += new ReaderEventHandler(OnEnabRFIDEvt);
                     Console.WriteLine("Autonomous Mode Set");
                 }
                 catch (Exception e)
                 {
                     Console.WriteLine("Error in Setting AutoMode" + e.Message);
                 }
             }
             
             static void OnMonitorEvt(object sender, ReaderEventArgs args)
             {
                 RFIDStatusMonitorEventArgs EnableArgs = (RFIDStatusMonitorEventArgs)args;
                 
                 bool enableRfid = EnableArgs.EnableRFID;
                 
                 console.WriteLine("RFID Enabled ? -- " + (enableRfid) ? "YES" : "NO");
             } 
             
             //  Visual Basic .NET
             
             Private Sub SampleMonitorEvt(reader As IRFIDReader)
                 Try
                     reader.ReadMode = ReadMode.AUTONOMOUS
                     AddHandler reader.RFIDStatusMonitorEvent, AddressOf OnEnabRFIDEvt
                     Console.WriteLine("Autonomous Mode Set")
                 Catch e As Exception
                     Console.WriteLine(("Error in Setting AutoMode" + e.Message))
                 End Try
             End Sub 'SampleMonitorEvt
            
             Shared Sub OnMonitorEvt(sender As Object, args As ReaderEventArgs)
                 Dim EnableArgs As RFIDStatusMonitorEventArgs = CType(args, RFIDStatusMonitorEventArgs)
               
                 Dim enableRfid As Boolean = EnableArgs.EnableRFID
               
                 console.WriteLine((If "RFID Enabled ? -- " + enableRfid Then "YES" Else "NO")) 'ToDo: Unsupported feature: conditional (?) operator.
             End Sub 'OnMonitorEvt
             </code>
             </example>
        </member>
        <member name="M:Symbol.RFID2.RFIDStatusMonitorEventArgs.#ctor(System.String,System.Boolean)">
             <summary>
             Initializes the object of RFIDStatusMonitorEventArgs
             </summary>
             <param name="readerName">string</param>
             <param name="enableRFID">bool</param>
             <example>
             <code> 
             static void OnMonitorEvt(object sender, ReaderEventArgs args)
             {
                 RFIDStatusMonitorEventArgs EnableArgs = (RFIDStatusMonitorEventArgs)args;
                 
                 bool enableRfid = EnableArgs.enableRFID;
                 
                 console.WriteLine("RFID Enabled ? -- " + (enableRfid) ? "YES" : "NO");
             } 
             
             // or...stand alone...
             
             static OnMonitorEvt(Object sender, new RFIDStatusMonitorEventArgs(reader.ReaderName,  true))
             {
                 ...
             }
             
             //  Visual Basic .NET
             
             Shared Sub OnMonitorEvt(sender As Object, args As ReaderEventArgs)
                 Dim EnableArgs As RFIDStatusMonitorEventArgs = CType(args, RFIDStatusMonitorEventArgs)
               
                 Dim enableRfid As Boolean = EnableArgs.enableRFID
               
                 console.WriteLine(("RFID Enabled ? -- " + enableRfid.ToString()))
             End Sub 'OnMonitorEvt
            
             ' or...stand alone...
             
             Shared Sub New(sender As [Object], New RFIDStatusMonitorEventArgs(reader.ReaderName,  true)) 
             End Sub 'New
             </code>
             </example>
        </member>
        <member name="P:Symbol.RFID2.RFIDStatusMonitorEventArgs.EnableRFID">
            <summary>
            Returns rfid module status
            </summary>
            <example>
            <code> 
            static void OnMonitorEvt(object sender, ReaderEventArgs args)
            {
                RFIDStatusMonitorEventArgs EnableArgs = (RFIDStatusMonitorEventArgs)args;
                
                console.WriteLine("RFID Enabled ? -- " + (EnableArgs.enableRFID) ? "YES" : "NO");
            } 
            
            //  Visual Basic .NET
            
            Shared Sub OnMonitorEvt(sender As Object, args As ReaderEventArgs)
                Dim EnableArgs As RFIDStatusMonitorEventArgs = CType(args, RFIDStatusMonitorEventArgs)
              
                console.WriteLine(("RFID Enabled ? -- " + EnableArgs.enableRFID.ToString())
            End Sub OnMonitorEvt 
            </code>
            </example>
        </member>
        <member name="T:Symbol.RFID2.TagType">
            <summary>
            Enlists possible tag types supported by the reader models. 
            </summary>
        </member>
        <member name="F:Symbol.RFID2.TagType.EPCClass0">
            <summary>
            EPC Class0 tag
            </summary>
        </member>
        <member name="F:Symbol.RFID2.TagType.EPCClass1">
            <summary>
            EPC Class1 tag
            </summary>
        </member>
        <member name="F:Symbol.RFID2.TagType.EPClass0_PLUS">
            <summary>
            EPC Class0 Plus tag
            </summary>
        </member>
        <member name="F:Symbol.RFID2.TagType.EPCClass1_GEN2">
            <summary>
            EPC Class1 Gen2 tag
            </summary>
        </member>
        <member name="F:Symbol.RFID2.TagType.ISO180006B">
            <summary>
             ISO 18000 6B tag. IT IS NOT SUPPORTED YET
            </summary>
        </member>
        <member name="T:Symbol.RFID2.MemoryBank">
            <summary>
            Memory banks in Tags
            </summary>
        </member>
        <member name="F:Symbol.RFID2.MemoryBank.RESERVED">
            <summary>
            Reserved memory bank cannot be read/written.it is reserved for access password 
            </summary>
        </member>
        <member name="F:Symbol.RFID2.MemoryBank.EPC">
            <summary>
            EPC bank contains tag Id
            </summary>
        </member>
        <member name="F:Symbol.RFID2.MemoryBank.TID">
            <summary>
            Read only.Cannot write.
            </summary>
        </member>
        <member name="F:Symbol.RFID2.MemoryBank.USER">
            <summary>
            User memory bank is provided to store user data
            </summary>
        </member>
        <member name="T:Symbol.RFID2.TagDataLoc">
            <summary>
            This structure allows user to select the tag data. For the tags that support Tag user data, user 
            will be able to select the desired memory banks based on this structure. 
            </summary>
        </member>
        <member name="M:Symbol.RFID2.TagDataLoc.#ctor(System.UInt16,System.Byte)">
            <summary>
            It is used to specify the tag data location in which to operate. The tag memory bank is defaulted to EPC.
            </summary>
            <param name="aWordPointer"></param>
            <param name="aWordCount"></param>
            <example > 
            <code> 
            private void GetTagsTagDataLoc(IRFIDReader reader)
            {
                try
                { 
                    byte wordCount=96;
                    ushort wordPointer=32;
            
                    TagDataLoc dataLoc = new TagDataLoc(wordPointer, wordCount);
                  
                    IRFIDTag[] tags = reader.GetTags(dataLoc):
            
                    if (tags == null || tags.Length == 0)
                    {
                       Console.WriteLine("No Tags");
                    }
                    else
                    {
                       foreach (IRFIDTag tag in tags)
                       {
                           Console.WriteLine("GetTags : ");
                           Console.WriteLine(tag.TagID);
                           Console.WriteLine(tag.AntennaName);
                           Console.WriteLine(tag.TagType);
                           Console.WriteLine(tag.LastSeen);
                       }
                   }
               }
               catch (Exception e)
               {
                   Console.WriteLine(e.Message);
               }
            }
            
            //  Visual Basic .NET
            
            Private Sub GetTagsTagDataLoc(reader As IRFIDReader)
                Try 
                    Dim wordCount As Byte = 96
                    Dim wordPointer As System.Int = 32      
                    Dim dataLoc As New TagDataLoc(wordPointer, wordCount)
                 
                    Dim tags As IRFIDTag() = reader.GetTags(dataLoc) '
                 
                    If tags Is Nothing Or tags.Length = 0 Then
                        Console.WriteLine("No Tags")
                    Else
                        Dim tag As IRFIDTag
                        For Each tag In  tags
                            Console.WriteLine("GetTags : ")
                            Console.WriteLine(tag.TagID)
                            Console.WriteLine(tag.AntennaName)
                            Console.WriteLine(tag.TagType)
                            Console.WriteLine(tag.LastSeen)
                        Next tag
                    End If
                Catch e As Exception
                    Console.WriteLine(e.Message)
                End Try
            End Sub 'GetTagsTagDataLoc
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.TagDataLoc.#ctor(System.UInt16,System.Byte,Symbol.RFID2.MemoryBank)">
            <summary>
            It is used to specify the tag data location in which to operate.
            </summary>
            <param name="aWordPointer"></param>
            <param name="aWordCount"></param>
            <param name="aMemBank"></param>
            <example> 
            <code> 
            private void GetTagsTagDataLoc(IRFIDReader reader)
            {
                try
                {
                    MemoryBank membk;
                    byte wordCount=96;
                    ushort wordPointer=32;
            
                    TagDataLoc dataLoc = new TagDataLoc(wordPointer, wordCount, membk.USER);
                  
                    IRFIDTag[] tags = reader.GetTags(dataLoc);
            
                    if (tags == null || tags.Length == 0)
                    {
                        Console.WriteLine("No Tags");
                    }
                    else
                    {
                        foreach (IRFIDTag tag in tags)
                        {
                            Console.WriteLine("GetTags : ");
                            Console.WriteLine(tag.TagID);
                            Console.WriteLine(tag.AntennaName);
                            Console.WriteLine(tag.TagType);
                            Console.WriteLine(tag.LastSeen);
                        }
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub GetTagsTagDataLoc(reader As IRFIDReader)
                Try 
                    Dim membk As MemoryBank
                    Dim wordCount As Byte = 96
                    Dim wordPointer As System.UInt16 = 32 'ToDo: Unsigned Integers not supported
                 
                    Dim dataLoc As New TagDataLoc(wordPointer, wordCount, membk.USER)
                 
                    Dim tags As IRFIDTag() = reader.GetTags(dataLoc)
                 
                    If tags Is Nothing Or tags.Length = 0 Then
                        Console.WriteLine("No Tags")
                    Else
                        Dim tag As IRFIDTag
                        For Each tag In  tags
                            Console.WriteLine("GetTags : ")
                            Console.WriteLine(tag.TagID)
                            Console.WriteLine(tag.AntennaName)
                            Console.WriteLine(tag.TagType)
                            Console.WriteLine(tag.LastSeen)
                        Next tag
                    End If
                Catch e As Exception
                    Console.WriteLine(e.Message)
                End Try
            End Sub 'GetTagsTagDataLoc
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.TagDataLoc.MemBank">
            <summary>
            Return memory bank
            </summary>
            <example > 
            <code> 
            private void MyGetTagInfoMemBank(IRFIDReader reader)
            {
                try
                {
                    MemoryBank membk;
                    byte wordCount=96;
                    ushort wordPointer=32;
            
                    TagDataLoc dataLoc = new TagDataLoc(wordPointer, wordCount, membk.USER);
            
                    Console.WriteLine("Memory Bank: " + dataLoc.MemBank.ToString()");
                }
                catch (Exception e)
                {
                    Console.WriteLine("Unable to Get Memory Bank Set"+ e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub MyGetTagInfoMemBank(reader As IRFIDReader)
                Try
                    Dim membk As MemoryBank
                    Dim wordCount As Byte = 96
                    Dim wordPointer As System.UInt16 = 32 'ToDo: Unsigned Integers not supported
                 
                    Dim dataLoc As New TagDataLoc(wordPointer, wordCount, membk.USER)
                 
                    Console.WriteLine(("Memory Bank: " + dataLoc.MemBank.ToString()))
                Catch e As Exception
                    Console.WriteLine(("Unable to Get Memory Bank Set" + e.ToString()))
                End Try
            End Sub 'MyGetTagInfoMemBank
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.TagDataLoc.WordPointer">
            <summary>
            WordPointer indicates the location(word) to start reading the data
            </summary>
            <example > 
            <code> 
            private void MyGetTagInfoWrdPtr(IRFIDReader reader)
            {
                try
                {
                    MemoryBank membk;
                    byte wordCount=96;
                    ushort wordPointer=32;
            
                    TagDataLoc dataLoc = new TagDataLoc(wordPointer, wordCount, membk.USER);
            
                    Console.WriteLine("Word Pointer: " + dataLoc.WordPointer.ToString()");
                }
                catch (Exception e)
                {
                    Console.WriteLine("Unable to Get Word Pointer Set"+ e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub MyGetTagInfoWrdPtr(reader As IRFIDReader)
                Try
                    Dim membk As MemoryBank
                    Dim wordCount As Byte = 96
                    Dim wordPointer As System.UInt16 = 32 'ToDo: Unsigned Integers not supported
                 
                    Dim dataLoc As New TagDataLoc(wordPointer, wordCount, membk.USER)
                 
                    Console.WriteLine(("Word Pointer: " + dataLoc.WordPointer.ToString()))
                Catch e As Exception
                    Console.WriteLine(("Unable to Get Word Pointer Set" + e.ToString()))
                End Try
            End Sub 'MyGetTagInfoWrdPtr
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.TagDataLoc.WordCount">
            <summary>
            Indicates the number of words to read.
            </summary>
            <example > 
            <code> 
            private void MyGetTagInfoWrdCnt(IRFIDReader reader)
            {
                try
                {
                    MemoryBank membk;
                    byte wordCount=96;
                    ushort wordPointer=32;
            
                    TagDataLoc dataLoc = new TagDataLoc(wordPointer, wordCount, membk.USER);
            
                    Console.WriteLine("Word Pointer: " + dataLoc.WordCount.ToString()");
                }
                catch (Exception e)
                {
                    Console.WriteLine("Unable to Get Word Count Set"+ e.ToString());
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub MyGetTagInfoWrdCnt(reader As IRFIDReader)
                Try
                    Dim membk As MemoryBank
                    Dim wordCount As Byte = 96
                    Dim wordPointer As System.UInt16 = 32 'ToDo: Unsigned Integers not supported
                 
                    Dim dataLoc As New TagDataLoc(wordPointer, wordCount, membk.USER)
                 
                    Console.WriteLine(("Word Pointer: " + dataLoc.WordCount.ToString()))
                Catch e As Exception
                    Console.WriteLine(("Unable to Get Word Count Set" + e.ToString()))
                End Try
            End Sub 'MyGetTagInfoWrdCnt
            </code>
            </example>
        </member>
        <member name="T:Symbol.RFID2.Level">
            <summary>
            Defines severity for internal logs.  These are for internal use only
            </summary>
        </member>
        <member name="T:Symbol.RFID2.Antenna">
            <summary>
            Summary description for Antenna.
            </summary>
        </member>
        <member name="T:Symbol.RFID2.ReaderEvent">
            <summary>
            Summary description for ReaderEvent.
            </summary>
        </member>
        <member name="P:Symbol.RFID2.TagEvent.EventSource">
            <summary>
            Name of the source. In this case it would be the antenna name. This is filled up when Reader
            sends notifications and the RFIDReader Object is reported by the transport layer(s) about
            this event as a ManagementEvents.
            </summary>
        </member>
        <member name="P:Symbol.RFID2.TagEvent.EventType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Symbol.RFID2.TagEvent.EventName">
            <summary>
            Name of the event. For example this could be "New Tag", "Tag Not Visible", "Visibility Changed"
            Its a read only property which is populated in the constructor.
            </summary>
        </member>
        <member name="P:Symbol.RFID2.TagEvent.NotificationPriority">
            <summary>
            Represents how often the events is reported. The values are integer representation can should be
            interpreted as follows:
            <para>0 for "Never" report</para>
            <para>1 for "Immediate" reporting</para>
            <para>2 for "Moderated" reporting of events. The time is settable through NotificationFrequency</para>
            </summary>
        </member>
        <member name="P:Symbol.RFID2.TagEvent.NotificationFrequency">
            <summary>
            Integer value to representing the Frequency of reportign of the event, in case the event
            NotificationPriority is set to "Moderated". The value is in seconds.
            </summary>
        </member>
        <member name="P:Symbol.RFID2.TagEvent.EnableEventReporting">
            <summary>
            If true, then it implies that the Event is configured to be "reportable". Hence in case an event is
            generated by the reader, and EnableEventReporting is true, then the reader would attempt to report
            this event asynchronously.
            </summary>
        </member>
        <member name="F:Symbol.RFID2.ExceptionEvent.eventName">
            <summary>
            Name of the event. For example this could be "Antenna", "IO", "TagRead", "DSP"
            </summary>
        </member>
        <member name="F:Symbol.RFID2.ExceptionEvent.eventSource">
            <summary>
            Name of the source. In this case it would be the antenna name, DSP, reader application, io ports etc.
            This is filled up when Reader sends notifications and the RFIDReader Object is reported by the
            transport layer(s) about this event as a ManagementEvents.
            </summary>
        </member>
        <member name="F:Symbol.RFID2.ExceptionEvent.eventReportingStatus">
            <summary>
            By default the event is disabled. One need to enable the reporting of these events for receiving events
            at the Client/Application later.
            </summary>
        </member>
        <member name="P:Symbol.RFID2.ExceptionEvent.EventSource">
            <summary>
            Name of the source. In this case it would be the antenna name. This is filled up when Reader
            sends notifications and the RFIDReader Object is reported by the transport layer(s) about
            this event as a ManagementEvents.
            </summary>
        </member>
        <member name="P:Symbol.RFID2.ExceptionEvent.EventType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Symbol.RFID2.ExceptionEvent.EventName">
            <summary>
            Name of the event. For example this could be "New Tag", "Tag Not Visible", "Visibility Changed"
            Its a read only property which is populated in the constructor.
            </summary>
        </member>
        <member name="P:Symbol.RFID2.ExceptionEvent.NotificationPriority">
            <summary>
            Represents how often the events is reported. The values are integer representation can should be
            interpreted as follows:
            <para>0 for "Never" report</para>
            <para>1 for "Immediate" reporting</para>
            <para>2 for "Moderated" reporting of events. The time is settable through NotificationFrequency</para>
            </summary>
        </member>
        <member name="P:Symbol.RFID2.ExceptionEvent.NotificationFrequency">
            <summary>
            Integer value to representing the Frequency of reportign of the event, in case the event
            NotificationPriority is set to "Moderated". The value is in seconds.
            </summary>
        </member>
        <member name="P:Symbol.RFID2.ExceptionEvent.EnableEventReporting">
            <summary>
            If true, then it implies that the Event is configured to be "reportable". Hence in case an event is
            generated by the reader, and EnableEventReporting is true, then the reader would attempt to report
            this event asynchronously.
            </summary>
        </member>
        <member name="T:Symbol.RFID2.ReaderXR480">
            <summary>
             Implements IRFIDReader interface for reader model XR480 as host based reader .
            </summary>
        </member>
        <member name="T:Symbol.RFID2.ReaderCapability">
            <summary>
            Exposes the different capabilities of the reader
            </summary>
        </member>
        <member name="P:Symbol.RFID2.ReaderCapability.AutoModeSupported">
            <summary>
            Gets a bool value indicating whether AutoMode is supported
            </summary>
            <example>
            <code>
            private void GetReaderCapabilities(IRFIDReader reader)
            {
                try
                {
                    ReaderCapability readerCap = reader.ReaderCapability;
                   
                    Console.WriteLine("AutoModeSupported  :" + readerCap.AutoModeSupported.ToString());
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in Getting Reader Capability :");
                    Console.WriteLine(e.ToString());
                }
            }
               
            //  Visual Basic .NET
            
            Private Sub GetReaderCapabilities(reader As IRFIDReader)
                Try
                    Dim readerCap As ReaderCapability = reader.ReaderCapability
                 
                    Console.WriteLine(("AutoModeSupported  :" + readerCap.AutoModeSupported.ToString()))
                Catch e As Exception
                    Console.WriteLine("Error in Getting Reader Capability :")
                    Console.WriteLine(e.ToString())
                End Try
            End Sub 'GetReaderCapabilities
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.ReaderCapability.OnDemandSupported">
            <summary>
            Gets a bool value indicating whether On Demand Mode is supported
            </summary>
            <example>
            <code>
            private void GetReaderCapabilities(IRFIDReader reader)
            {
                try
                {
                    ReaderCapability readerCap = reader.ReaderCapability;
                   
                    Console.WriteLine("OnDemandSupported  :" + readerCap.OnDemandSupported.ToString());
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in Getting Reader Capability :");
                    Console.WriteLine(e.ToString());
                }
            }
             
            //  Visual Basic .NET
            
            Private Sub GetReaderCapabilities(reader As IRFIDReader)
                Try
                    Dim readerCap As ReaderCapability = reader.ReaderCapability
                 
                    Console.WriteLine(("OnDemandSupported  :" + readerCap.OnDemandSupported.ToString()))
                Catch e As Exception
                    Console.WriteLine("Error in Getting Reader Capability :")
                    Console.WriteLine(e.ToString())
                End Try
            End Sub 'GetReaderCapabilities
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.ReaderCapability.HeartBeatSupported">
            <summary>
            Gets a bool value indicating whether HeartBeat is supported
            </summary>
            <example>
            <code>
            private void GetReaderCapabilities(IRFIDReader reader)
            {
                try
                {
                    ReaderCapability readerCap = reader.ReaderCapability;
                   
                    Console.WriteLine("HeartBeatSupported :" + readerCap.HeartBeatSupported.ToString());
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in Getting Reader Capability :");
                    Console.WriteLine(e.ToString());
                }
            }
             
            //  Visual Basic .NET
                     
            Private Sub GetReaderCapabilities(reader As IRFIDReader)
                Try
                    Dim readerCap As ReaderCapability = reader.ReaderCapability
                 
                    Console.WriteLine(("HeartBeatSupported :" + readerCap.HeartBeatSupported.ToString()))
                Catch e As Exception
                    Console.WriteLine("Error in Getting Reader Capability :")
                    Console.WriteLine(e.ToString())
                End Try
            End Sub 'GetReaderCapabilities
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.ReaderCapability.RFSurveySupported">
            <summary>
            Gets a bool value indicating whether RF Survey is supported
            </summary>
            <example>
            <code>
            private void GetReaderCapabilities(IRFIDReader reader)
            {
                try
                {
                    ReaderCapability readerCap = reader.ReaderCapability;
                   
                    Console.WriteLine("RFSurveySupported  :" + readerCap.RFSurveySupported.ToString());
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in Getting Reader Capability :");
                    Console.WriteLine(e.ToString());
                }
            }
             
            //  Visual Basic .NET
             				
            Private Sub GetReaderCapabilities(reader As IRFIDReader)
                Try
                    Dim readerCap As ReaderCapability = reader.ReaderCapability
                 
                    Console.WriteLine(("RFSurveySupported  :" + readerCap.RFSurveySupported.ToString()))
                Catch e As Exception
                    Console.WriteLine("Error in Getting Reader Capability :")
                    Console.WriteLine(e.ToString())
                End Try
            End Sub 'GetReaderCapabilities
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.ReaderCapability.HoppingSupported">
            <summary>
            Gets a bool value indicating whether Hopping is supported
            </summary>
            <example>
            <code>
            private void GetReaderCapabilities(IRFIDReader reader)
            {
                try
                {
                    ReaderCapability readerCap = reader.ReaderCapability;
                   
                    Console.WriteLine("HoppingSupported   :" + readerCap.HoppingSupported.ToString());
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in Getting Reader Capability :");
                    Console.WriteLine(e.ToString());
                }
            }
             
            //  Visual Basic .NET
            
            Private Sub GetReaderCapabilities(reader As IRFIDReader)
                Try
                    Dim readerCap As ReaderCapability = reader.ReaderCapability
                 
                    Console.WriteLine(("HoppingSupported   :" + readerCap.HoppingSupported.ToString()))
                Catch e As Exception
                    Console.WriteLine("Error in Getting Reader Capability :")
                    Console.WriteLine(e.ToString())
                End Try
            End Sub 'GetReaderCapabilities '/
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.ReaderCapability.GPIOSupported">
            <summary>
            Gets a bool value indicating whether GPIO is supported
            </summary>
            <example>
            <code>
            private void GetReaderCapabilities(IRFIDReader reader)
            {
                try
                {
                    ReaderCapability readerCap = reader.ReaderCapability;
                   
                    Console.WriteLine("GPIOSupported      :" + readerCap.GPIOSupported.ToString());
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in Getting Reader Capability :");
                    Console.WriteLine(e.ToString());
                }
            }
             
            //  Visual Basic .NET
            
            Private Sub GetReaderCapabilities(reader As IRFIDReader)
                Try
                    Dim readerCap As ReaderCapability = reader.ReaderCapability
                 
                    Console.WriteLine(("GPIOSupported      :" + readerCap.GPIOSupported.ToString()))
                Catch e As Exception
                    Console.WriteLine("Error in Getting Reader Capability :")
                    Console.WriteLine(e.ToString())
                End Try
            End Sub 'GetReaderCapabilities
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.ReaderCapability.UTCClockSupported">
            <summary>
            Gets a bool value indicating whether UTCClock is supported
            </summary>
            <example>
            <code>
            private void GetReaderCapabilities(IRFIDReader reader)
            {
                try
                {
                    ReaderCapability readerCap = reader.ReaderCapability;
                   
                    Console.WriteLine("UTCClockSupported  :" + readerCap.UTCClockSupported.ToString());
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in Getting Reader Capability :");
                    Console.WriteLine(e.ToString());
                }
            }
             
            //  Visual Basic .NET
            
            Private Sub GetReaderCapabilities(reader As IRFIDReader)
                Try
                    Dim readerCap As ReaderCapability = reader.ReaderCapability
                 
                    Console.WriteLine(("UTCClockSupported  :" + readerCap.UTCClockSupported.ToString()))
                Catch e As Exception
                    Console.WriteLine("Error in Getting Reader Capability :")
                    Console.WriteLine(e.ToString())
                End Try
            End Sub 'GetReaderCapabilities
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.ReaderCapability.NTPClientSupported">
            <summary>
            Gets a bool value indicating whether NTPClient is supported
            </summary>
            <example>
            <code>
            private void GetReaderCapabilities(IRFIDReader reader)
            {
                try
                {
                    ReaderCapability readerCap = reader.ReaderCapability;
                   
                    Console.WriteLine("NTPClientSupported :" + readerCap.NTPClientSupported.ToString());
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in Getting Reader Capability :");
                    Console.WriteLine(e.ToString());
                }
            }
             
            //  Visual Basic .NET
            
            Private Sub GetReaderCapabilities(reader As IRFIDReader)
                Try
                    Dim readerCap As ReaderCapability = reader.ReaderCapability
                 
                    Console.WriteLine(("NTPClientSupported :" + readerCap.NTPClientSupported.ToString()))
                Catch e As Exception
                    Console.WriteLine("Error in Getting Reader Capability :")
                    Console.WriteLine(e.ToString())
                End Try
            End Sub 'GetReaderCapabilities
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.ReaderCapability.LoggingSupported">
            <summary>
            Gets a bool value indicating whether Logging is supported
            </summary>
            <example>
            <code>
            private void GetReaderCapabilities(IRFIDReader reader)
            {
                try
                {
                    ReaderCapability readerCap = reader.ReaderCapability;
                   
                    Console.WriteLine("LoggingSupported   :" + readerCap.LoggingSupported.ToString());
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in Getting Reader Capability :");
                    Console.WriteLine(e.ToString());
                }
            }
             
            //  Visual Basic .NET
            
            Private Sub GetReaderCapabilities(reader As IRFIDReader)
                Try
                    Dim readerCap As ReaderCapability = reader.ReaderCapability
                 
                    Console.WriteLine(("LoggingSupported   :" + readerCap.LoggingSupported.ToString()))
                Catch e As Exception
                    Console.WriteLine("Error in Getting Reader Capability :")
                    Console.WriteLine(e.ToString())
                End Try
            End Sub 'GetReaderCapabilities
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.ReaderCapability.TriggerSupported">
            <summary>
            Gets a bool value indicating whether trigger is supported
            </summary>
            <example>
            <code>
            private void GetReaderCapabilities(IRFIDReader reader)
            {
                try
                {
                    ReaderCapability readerCap = reader.ReaderCapability;
                   
                    Console.WriteLine("TriggerSupported   :" + readerCap.TriggerSupported.ToString());
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in Getting Reader Capability :");
                    Console.WriteLine(e.ToString());
                }
            }
             
            //  Visual Basic .NET
            
            Private Sub GetReaderCapabilities(reader As IRFIDReader)
                Try
                    Dim readerCap As ReaderCapability = reader.ReaderCapability
                 
                    Console.WriteLine(("TriggerSupported   :" + readerCap.TriggerSupported.ToString()))
                Catch e As Exception
                    Console.WriteLine("Error in Getting Reader Capability :")
                    Console.WriteLine(e.ToString())
                End Try
            End Sub 'GetReaderCapabilities
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.ReaderCapability.SensorSupported">
            <summary>
            Gets a bool value indicating whether sensor is supported
            </summary>
            <example>
            <code>
            private void GetReaderCapabilities(IRFIDReader reader)
            {
                try
                {
                    ReaderCapability readerCap = reader.ReaderCapability;
                   
                    Console.WriteLine("SensorSupported   :" + readerCap.SensorSupported.ToString());
                }
                catch(Exception e)
                {
                    Console.WriteLine("Error in Getting Reader Capability :");
                    Console.WriteLine(e.ToString());
                }
            }
             
            //  Visual Basic .NET
            
            Private Sub GetReaderCapabilities(reader As IRFIDReader)
                Try
                    Dim readerCap As ReaderCapability = reader.ReaderCapability
                 
                    Console.WriteLine(("SensorSupported   :" + readerCap.SensorSupported.ToString()))
                Catch e As Exception
                    Console.WriteLine("Error in Getting Reader Capability :")
                    Console.WriteLine(e.ToString())
                End Try
            End Sub 'GetReaderCapabilities
            </code>
            </example>
        </member>
        <member name="T:Symbol.RFID2.ReaderInfo">
             <summary>
            Exposes the parameters giving the information about the reader
             </summary>
        </member>
        <member name="P:Symbol.RFID2.ReaderInfo.FirmwareVersion">
            <summary>
            Gets the details about reader's FirmwareVersion
            </summary>
            <example>
            <code>
            private void GetReaderInfo(IRFIDReader reader)
            {
                try
                {
                    ReaderInfo readerInfo = reader.ReaderInfo;
                   
                    Console.WriteLine("Firmware Version    :" + readerInfo.FirmwareVersion);
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error in Getting Reader Info");
                    Console.WriteLine(e.ToString());
                }
            }
             
            //  Visual Basic .NET
             				
            Private Sub GetReaderInfo(reader As IRFIDReader)
                Try
                    Dim readerInfo As ReaderInfo = reader.ReaderInfo
                 
                    Console.WriteLine(("Firmware Version    :" + readerInfo.FirmwareVersion))
                Catch e As Exception
                    Console.WriteLine("Error in Getting Reader Info")
                    Console.WriteLine(e.ToString())
                End Try
            End Sub 'GetReaderInfo
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.ReaderInfo.DeviceSerialNumber">
            <summary>
            Gets the details about reader's DeviceSerialNumber
            </summary>
            <example>
            <code>
            private void GetReaderInfo(IRFIDReader reader)
            {
                try
                {
                    ReaderInfo readerInfo = reader.ReaderInfo;
                   
                    Console.WriteLine("Device Serial Number:" + readerInfo.DeviceSerialNumber);
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error in Getting Reader Info");
                    Console.WriteLine(e.ToString());
                }
            }
             
            //  Visual Basic .NET
            
            Private Sub GetReaderInfo(reader As IRFIDReader)
                Try
                    Dim readerInfo As ReaderInfo = reader.ReaderInfo
                 
                    Console.WriteLine(("Device Serial Number:" + readerInfo.DeviceSerialNumber))
                Catch e As Exception
                    Console.WriteLine("Error in Getting Reader Info")
                    Console.WriteLine(e.ToString())
                End Try
            End Sub 'GetReaderInfo
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.ReaderInfo.DeviceModelNumber">
            <summary>
            Gets the details about reader's DeviceModelNumber
            </summary>
            <example>
            <code>
            private void GetReaderInfo(IRFIDReader reader)
            {
                try
                {
                    ReaderInfo readerInfo = reader.ReaderInfo;
                   
                    Console.WriteLine("Device Model Number :" + readerInfo.DeviceModelNumber);
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error in Getting Reader Info");
                    Console.WriteLine(e.ToString());
                }
            }
             
            //  Visual Basic .NET
            
            Private Sub GetReaderInfo(reader As IRFIDReader)
                Try
                    Dim readerInfo As ReaderInfo = reader.ReaderInfo
                 
                    Console.WriteLine(("Device Model Number :" + readerInfo.DeviceModelNumber))
                Catch e As Exception
                    Console.WriteLine("Error in Getting Reader Info")
                    Console.WriteLine(e.ToString())
                End Try
            End Sub 'GetReaderInfo
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.ReaderInfo.ManufacturerName">
            <summary>
            Gets the details about reader's Manufacturer Name
            </summary>
            <example>
            <code>
            private void GetReaderInfo(IRFIDReader reader)
            {
                try
                {
                    ReaderInfo readerInfo = reader.ReaderInfo;
                   
                    Console.WriteLine("Manufacturer Name   :" + readerInfo.ManufacturerName);
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error in Getting Reader Info");
                    Console.WriteLine(e.ToString());
                }
            }
             
            //  Visual Basic .NET
            
            Private Sub GetReaderInfo(reader As IRFIDReader)
                Try
                    Dim readerInfo As ReaderInfo = reader.ReaderInfo
                 
                    Console.WriteLine(("Manufacturer Name   :" + readerInfo.ManufacturerName))
                Catch e As Exception
                    Console.WriteLine("Error in Getting Reader Info")
                    Console.WriteLine(e.ToString())
                End Try
            End Sub 'GetReaderInfo
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.ReaderInfo.ManufactureDate">
            <summary>
            Gets the details about reader's Manufacture Date
            </summary>
            <example>
            <code>
            private void GetReaderInfo(IRFIDReader reader)
            {
                try
                {
                    ReaderInfo readerInfo = reader.ReaderInfo;
                   
                    Console.WriteLine("Manufacture Date    :" + readerInfo.ManufactureDate);
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error in Getting Reader Info");
                    Console.WriteLine(e.ToString());
                }
            }
             
            //  Visual Basic .NET
            
            Private Sub GetReaderInfo(reader As IRFIDReader)
                Try
                    Dim readerInfo As ReaderInfo = reader.ReaderInfo
                 
                    Console.WriteLine(("Manufacture Date    :" + readerInfo.ManufactureDate))
                Catch e As Exception
                    Console.WriteLine("Error in Getting Reader Info")
                    Console.WriteLine(e.ToString())
                End Try
            End Sub 'GetReaderInfo
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.ReaderInfo.HardwareVersion">
            <summary>
            Gets the details about reader's Hardware Version
            </summary>
            <example>
            <code>
            private void GetReaderInfo(IRFIDReader reader)
            {
                try
                {
                    ReaderInfo readerInfo = reader.ReaderInfo;
                   
                    Console.WriteLine("HardwareVersion     :" + readerInfo.HardwareVersion);
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error in Getting Reader Info");
                    Console.WriteLine(e.ToString());
                }
            }
             
            //  Visual Basic .NET
            
            Private Sub GetReaderInfo(reader As IRFIDReader)
                Try
                    Dim readerInfo As ReaderInfo = reader.ReaderInfo
                 
                    Console.WriteLine(("HardwareVersion     :" + readerInfo.HardwareVersion))
                Catch e As Exception
                    Console.WriteLine("Error in Getting Reader Info")
                    Console.WriteLine(e.ToString())
                End Try
            End Sub 'GetReaderInfo
            </code>
            </example>
        </member>
        <member name="P:Symbol.RFID2.ReaderInfo.BootLoaderVersion">
            <summary>
            Gets the details about reader's BootLoader Version
            </summary>
            <example>
            <code>
            private void GetReaderInfo(IRFIDReader reader)
            {
                try
                {
                    ReaderInfo readerInfo = reader.ReaderInfo;
                   
                    Console.WriteLine("BootLoader Version  :" + readerInfo.BootLoaderVersion);
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error in Getting Reader Info");
                    Console.WriteLine(e.ToString());
                }
            }
             
            //  Visual Basic .NET
            
            Private Sub GetReaderInfo(reader As IRFIDReader)
                Try
                    Dim readerInfo As ReaderInfo = reader.ReaderInfo
                 
                    Console.WriteLine(("BootLoader Version  :" + readerInfo.BootLoaderVersion))
                Catch e As Exception
                    Console.WriteLine("Error in Getting Reader Info")
                    Console.WriteLine(e.ToString())
                End Try
            End Sub 'GetReaderInfo
            </code>
            </example>
        </member>
        <member name="T:Symbol.RFID2.ReaderException">
            <summary>
            The exception that is thrown when an error occurs in the execution of any 
            command of the reader
            </summary>
            <example>
            <code>
            private void SampleRdrExcep(IRFIDReader reader)
            {
                try
                {
                    reader.TagEvent += new ReaderEventHandler(OnTagEvent);
                }
                catch (Exception e)
                {
                    Console.WriteLine("Invalid IRFIDReader Parameter" + e.Message);
            
                    throw new ReaderException("Invalid IRFIDReader Parameter", e);
                }
                }
            
            //  Visual Basic .NET
            
            Private Sub SampleRdrExcep(reader As IRFIDReader)
                Try
                    AddHandler reader.TagEvent, AddressOf OnTagEvent
                Catch e As Exception
                    Console.WriteLine(("Invalid IRFIDReader Parameter" + e.Message))
                 
                    Throw New ReaderException("Invalid IRFIDReader Parameter", e)
                End Try
            End Sub 'SampleRdrExcep
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.ReaderException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <example>
            <code>
            private void SampleRdrExcep(IRFIDReader reader)
            {
                try
                {
                    reader.TagEvent += new ReaderEventHandler(OnTagEvent);
                }
                catch (Exception e)
                {
                    Console.WriteLine("Invalid IRFIDReader Parameter" + e.Message);
            
                    throw new ReaderException("Invalid IRFIDReader Parameter", e);
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub SampleRdrExcep(reader As IRFIDReader)
                Try
                    AddHandler reader.TagEvent, AddressOf OnTagEvent
                Catch e As Exception
                    Console.WriteLine(("Invalid IRFIDReader Parameter" + e.Message))
                 
                    Throw New ReaderException("Invalid IRFIDReader Parameter", e)
                End Try
            End Sub 'SampleRdrExcep
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.ReaderException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
            <example>
            <code>
            private void SampleRdrExcep(IRFIDReader reader)
            {
                try
                {
                    reader.TagEvent += new ReaderEventHandler(OnTagEvent);
                }
                catch (Exception e)
                {
                    Console.WriteLine("Invalid IRFIDReader Parameter" + e.Message);
            
                    throw new ReaderException("Invalid IRFIDReader Parameter", e);
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub SampleRdrExcep(reader As IRFIDReader)
                Try
                    AddHandler reader.TagEvent, AddressOf OnTagEvent
                Catch e As Exception
                    Console.WriteLine(("Invalid IRFIDReader Parameter" + e.Message))
                 
                    Throw New ReaderException("Invalid IRFIDReader Parameter", e)
                End Try
            End Sub 'SampleRdrExcep
            </code>
            </example>
        </member>
        <member name="T:Symbol.RFID2.InvalidParameterException">
            <summary>
            The exception that is thrown when the required parameters are missing
            or not in proper format
            </summary>
            <example>
            <code>
            private void SampleParmExcep(IRFIDReader reader)
            {
                try
                {
                    reader.TagEvent += new ReaderEventHandler(OnTagEvent);
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error in Setting AutoMode" + e.Message);
            
                    throw new InvalidParameterException("Invalid IRFIDReader Parameter", e);
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub SampleParmExcep(reader As IRFIDReader)
                Try
                    AddHandler reader.TagEvent, AddressOf OnTagEvent
                Catch e As Exception
                    Console.WriteLine(("Error in Setting AutoMode" + e.Message))
                 
                    Throw New InvalidParameterException("Invalid IRFIDReader Parameter", e)
                End Try
            End Sub 'SampleParmExcep
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.InvalidParameterException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="desc"></param>
            <example>
            <code>
            private void SampleParmExcep(IRFIDReader reader)
            {
                if (reader!= NULL)
                {
                    reader.TagEvent += new ReaderEventHandler(OnTagEvent);
                    Console.WriteLine("Autonomous Mode Set");
                }
                else
                {
                    throw new InvalidParameterException("Invalid IRFIDReader Parameter");
                }
            }
            
            //  Visual Basic .NET
            		
            Private Sub SampleParmExcep(reader As IRFIDReader)
                If reader <![CDATA[ <> ]]>  NULL Then
                    AddHandler reader.TagEvent, AddressOf OnTagEvent
                    Console.WriteLine("Autonomous Mode Set")
                Else
                    Throw New InvalidParameterException("Invalid IRFIDReader Parameter")
                End If
            End Sub 'SampleParmExcep
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.InvalidParameterException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
            <example>
            <code>
            private void SampleParmExcep(IRFIDReader reader)
            {
                try
                {
                    reader.TagEvent += new ReaderEventHandler(OnTagEvent);
                    Console.WriteLine("Autonomous Mode Set");
                }
                catch (Exception e)
                {
                    Console.WriteLine("Invalid IRFIDReader Parameter" + e.Message);
            
                    throw new InvalidParameterException("Invalid IRFIDReader Parameter", e);
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub SampleParmExcep(reader As IRFIDReader)
                Try
                    AddHandler reader.TagEvent, AddressOf OnTagEvent
                    Console.WriteLine("Autonomous Mode Set")
                Catch e As Exception
                    Console.WriteLine(("Invalid IRFIDReader Parameter" + e.Message))
                 
                    Throw New InvalidParameterException("Invalid IRFIDReader Parameter", e)
                End Try
            End Sub 'SampleParmExcep
            </code>
            </example>
        </member>
        <member name="T:Symbol.RFID2.CommunicationException">
             <summary>
             The exception that is thrown when there is an error during communication
             with the device
             </summary>
             <example>
             <code>
             private void SampleCommExcep(IRFIDReader reader)
             {
                 try
                 {
                     Connect();
                 }
                 catch (Exception e)
                 {
                     Console.WriteLine("Connection Problem" + e.Message);
             
                     throw new CommunicationException("Lost connectivity to the reader", e);
                 }
             }
             
             //  Visual Basic .NET
             
             Private Sub SampleCommExcep(reader As IRFIDReader)
                 Connect()
            
                 Try
                     Console.WriteLine(("Connection Problem" + e.Message))
                 Catch e As Exception
                     Console.WriteLine("Connection Problem" + e.Message);
                     Throw New CommunicationException("Lost connectivity to the reader", e)
                 End If
             End Sub 'SampleCommExcep
             </code>
             </example>
        </member>
        <member name="M:Symbol.RFID2.CommunicationException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="desc"></param>
            <example>
            <code>
            private void SampleCommExcep()
            {
                try
                {
                    Connect();
                }
                catch (Exception e)
                {
                    Console.WriteLine("Connection Problem" + e.Message);
            
                    throw new CommunicationException("Lost connectivity to the reader");
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub SampleCommExcep()
                Try
                    Connect()
                Catch e As Exception
                    Console.WriteLine(("Connection Problem" + e.Message))
                 
                    Throw New CommunicationException("Lost connectivity to the reader")
                End Try
            End Sub 'SampleCommExcep
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.CommunicationException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
            <example>
            <code>
            private void SampleCommExcep()
            {
                try
                {
                    Connect();
                }
                catch (Exception e)
                {
                    Console.WriteLine("Connection Problem" + e.Message);
            
                    throw new CommunicationException("Lost connectivity to the reader", e);
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub SampleCommExcep()
                Try
                    Connect()
                Catch e As Exception
                    Console.WriteLine(("Connection Problem" + e.Message))
                 
                    Throw New CommunicationException("Lost connectivity to the reader", e)
                End Try
            End Sub 'SampleCommExcep
            </code>
            </example>
        </member>
        <member name="T:Symbol.RFID2.InternalErrorException">
            <summary>
            The exception that is thrown when there is an error while receiving the response 
            from a reader.
            </summary>
            <example>
            <code>
            private void SampleInternalExcep()
            {
                try
                {
                    EnableMotionSensors();
                }
                catch (Exception e)
                {
                    Console.WriteLine("Motion Sensor Problem" + e.Message);
            
                    throw new InternalErrorException("Failed to Enable Motion Sensor ", e);
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub SampleInternalExcep()
                Try
                    EnableMotionSensors()
                Catch e As Exception
                    Console.WriteLine(("Motion Sensor Problem" + e.Message))
                 
                    Throw New InternalErrorException("Failed to Enable Motion Sensor ", e)
                End Try
            End Sub 'SampleInternalExcep
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.InternalErrorException.#ctor(System.String)">
            <summary>
            Constructor for raising direct exceptions
            </summary>
            <param name="desc">Description of error</param>
            <example>
            <code>
            private void SampleInternalExcep()
            {
                try
                {
                    EnableMotionSensors();
                }
                catch (Exception e)
                {
                    Console.WriteLine("Motion Sensor Problem" + e.Message);
            
                    throw new InternalErrorException("Failed to Enable Motion Sensor");
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub SampleInternalExcep()
                Try
                    EnableMotionSensors()
                Catch e As Exception
                    Console.WriteLine(("Motion Sensor Problem" + e.Message))
                 
                    Throw New InternalErrorException("Failed to Enable Motion Sensor")
                End Try
            End Sub 'SampleInternalExcep
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.InternalErrorException.#ctor(System.String,System.Exception)">
            <summary>
            Device internal exception messages
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
            <example>
            <code>
            private void SampleInternalExcep()
            {
                try
                {
                    EnableMotionSensors();
                }
                catch (Exception e)
                {
                    Console.WriteLine("Motion Sensor Problem" + e.Message);
            
                    throw new InternalErrorException("Failed to Enable Motion Sensor: ", e);
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub SampleInternalExcep()
                Try
                    EnableMotionSensors()
                Catch e As Exception
                    Console.WriteLine(("Motion Sensor Problem" + e.Message))
                 
                    Throw New InternalErrorException("Failed to Enable Motion Sensor: ", e)
                End Try
            End Sub 'SampleInternalExcep
            </code>
            </example>
        </member>
        <member name="T:Symbol.RFID2.NotSupportedException">
            <summary>
             The exception that is thrown when the method or property is not supproted
             by the reader model.
            </summary>
            <example>
            <code>
            private void SampleUnSuppExcep(IRFIDReader reader)
            {
                try
                {
                    reader.GetTags(antennaPort);
                }
                catch (Exception e)
                {
                    Console.WriteLine("Reader function not supported" + e.Message);
            
                    throw new NotSupportedException("Unsupported reader function on this model", e);
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub SampleUnSuppExcep(reader As IRFIDReader)
                Try
                    reader.GetTags(antennaPort) '
                Catch e As Exception
                    Console.WriteLine(("Reader function not supported" + e.Message))
                    Throw New NotSupportedException("Unsupported reader function on this model", e)
                End Try
            End Sub 'SampleUnSuppExcep
            </code>
            </example>
        </member>
        <member name="M:Symbol.RFID2.NotSupportedException.#ctor(System.String)">
             <summary>
             
             </summary>
             <param name="desc"></param>
             <example>
             <code>
             private void SampleUnSuppExcep(IRFIDReader reader)
             {
                 try
                 {
                     reader.GetTags(antennaPort);
                 }
                 catch (Exception e)
                 {
                     Console.WriteLine("Reader function not supported" + e.Message);
             
                     throw new NotSupportedException("Unsupported reader function on this model");
                 }
             }
             
             //  Visual Basic .NET
             
             Private Sub SampleUnSuppExcep(reader As IRFIDReader)
                 Try
                     reader.GetTags(antannaPort) '
            
                 Catch e As Exception
                     Console.WriteLine(("Reader function not supported" + e.Message))
                  
                     Throw New NotSupportedException("Unsupported reader function on this model")
                 End Try
             End Sub 'SampleUnSuppExcep
             </code>
             </example>
        </member>
        <member name="M:Symbol.RFID2.NotSupportedException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
            <example>
            <code>
            private void SampleUnSuppExcep(IRFIDReader reader)
            {
                try
                {
                    reader.GetTags(antennaPort);
                }
                catch (Exception e)
                {
                    Console.WriteLine("Reader function not supported" + e.Message);
            
                    throw new NotSupportedException("Unsupported reader function on this model", e);
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub SampleUnSuppExcep(reader As IRFIDReader)
                Try
                    reader.GetTags(antennaPort)
                Catch e As Exception
                    Console.WriteLine(("Reader function not supported" + e.Message))
                    Throw New NotSupportedException("Unsupported reader function on this model", e)
                End Try
            End Sub 'SampleUnSuppExcep
            </code>
            </example>
        </member>
        <member name="F:Symbol.RFID2.Tag.serverTime">
            <summary>
            Tag creation time in server
            </summary>
        </member>
        <member name="F:Symbol.RFID2.Tag.deletePending">
            <summary>
            Tag has to be deleted after reporting
            </summary>
        </member>
        <member name="F:Symbol.RFID2.Tag.deleted">
            <summary>
            Tag is "deleted" but in the cache to avoid unnecessary reporting
            in between duplicate elimination time
            This bool is to maintain the state where the time interval between
            the tag invisible and visibility changed is less than the Dup Elimination.
            </summary>
        </member>
        <member name="P:Symbol.RFID2.Tag.Deleted">
            <summary>
            Tag is "deleted" but in the cache to avoid unnecessary reporting
            in between duplicate elimination time
            This bool is to maintain the state where the time interval between
            the tag invisible and visibility changed is less than the Dup Elimination.
            </summary>
        </member>
        <member name="P:Symbol.RFID2.Tag.IsDeletePending">
            <summary>
            Tag has to be deleted after reporting
            </summary>
        </member>
        <member name="T:Symbol.RFID2.ApiException">
            <summary>
            Summary description for ApiException.
            </summary>
        </member>
        <member name="T:Symbol.RFID2.ReaderEventHandler">
            <summary>
            Delegate used to raise all the Reader Events
            </summary>
        </member>
        <member name="T:Symbol.RFID2.Gen2ParameterSel">
            <summary>
            Whether to inventory tags with SL bit set or unset. This is specific to Gen 2 tags.
            0x00: ignore SL
            0x01: SL NOT set
            0x02: SL SET
            </summary>
        </member>
        <member name="F:Symbol.RFID2.Gen2ParameterSel.Ignore_SL">
            <summary>
             Ingnore SL flag
            </summary>
        </member>
        <member name="F:Symbol.RFID2.Gen2ParameterSel.SL_Not_Set">
            <summary>
            Inventory tags with SL not set
            </summary>
        </member>
        <member name="F:Symbol.RFID2.Gen2ParameterSel.SL_Set">
            <summary>
            Inventory tags with SL set
            </summary>
        </member>
        <member name="T:Symbol.RFID2.Gen2ParameterSession">
            <summary>
            Which session to use for inventory (applies only to Gen 2 tags):
            0x00: S0
            0x01: S1
            0x02: S2
            0x03: S3
            </summary>
        </member>
        <member name="F:Symbol.RFID2.Gen2ParameterSession.S0">
            <summary>
            Session 0
            </summary>
        </member>
        <member name="F:Symbol.RFID2.Gen2ParameterSession.S1">
            <summary>
            Session 1
            </summary>
        </member>
        <member name="F:Symbol.RFID2.Gen2ParameterSession.S2">
            <summary>
            Session 2
            </summary>
        </member>
        <member name="F:Symbol.RFID2.Gen2ParameterSession.S3">
            <summary>
            Session 3
            </summary>
        </member>
        <member name="T:Symbol.RFID2.Gen2ParameterTarget">
            <summary>
            Only inventory tags with inventoried bit set to Gen2ParameterTarget value. Applies only to Gen2 tags.
            0x00: Only inventory tags with inventoried bit set to A for session.
            0x01: Only inventory tags with inventoried bit set to B for session.
            </summary>
        </member>
        <member name="F:Symbol.RFID2.Gen2ParameterTarget.Bit_A">
            <summary>
            Inventory state A
            </summary>
        </member>
        <member name="F:Symbol.RFID2.Gen2ParameterTarget.Bit_B">
            <summary>
            Inventory state B
            </summary>
        </member>
        <member name="T:Symbol.RFID2.Gen2Parameters">
            <summary>
            Parameters to be used for the read write operation on EPC Class1 Gen2 tags
            </summary>
        </member>
        <member name="F:Symbol.RFID2.Gen2Parameters.sel">
            <summary>
            Whether to inventory tags with SL bit set or unset or either.
            0x00: ignore SL
            0x01: SL NOT set
            0x02: SL SET
            </summary>
        </member>
        <member name="F:Symbol.RFID2.Gen2Parameters.session">
            <summary>
            Which session to use for inventory:
            0x00: S0
            0x01: S1
            0x02: S2
            0x03: S3
            </summary>
        </member>
        <member name="F:Symbol.RFID2.Gen2Parameters.target">
            <summary>
            0x00: Only inventory tags with inventoried bit set to A for session.
            0x01: Only inventory tags with inventoried bit set to B for session.
            </summary>
        </member>
        <member name="F:Symbol.RFID2.Gen2Parameters.startingQ">
            <summary>
            0-15: Sets the number of slots (=2Q) in the first Inventory Round of the Inventory Algorithm. 
            The starting Q should be chosen higher for a larger expected number of tags in the field.
            </summary>
        </member>
        <member name="M:Symbol.RFID2.Gen2Parameters.#ctor(Symbol.RFID2.Gen2ParameterSel,Symbol.RFID2.Gen2ParameterSession,Symbol.RFID2.Gen2ParameterTarget,System.Byte)">
            <summary>
            Construct the Gen2Parameters.
            </summary>
            <param name="sel">SL set or not?</param>
            <param name="session">Which session?</param>
            <param name="target">Inventoried flag set to A or B for session.</param>
            <param name="startingQ">Initial Q for first Inventory Round.</param>
            <example>
            <code> 
            private void MyUsageOfGen2Parms(IRFIDReader reader)
            {
                try
                {
                    MemoryBank membk;
                    byte wordCount=6;
                    ushort wordPointer=2;
                    Gen2Parameters g2Params = new Gen2Parameters(Gen2Parameters.Ignore_SL, 
                                                                 Gen2Parameters.S0,
                                                                 Gen2Parameters.Bit_A,
                                                                 0);
                    uint accPswd=0x12345678;
                    byte *TagID = “\x01\x02\x03\x04\x05\x06\x07\x08”;
            
                    // possible mem banks --> Reserved, EPC, TID, USER
                
                    TagDataLoc dataLoc = new TagDataLoc(wordPointer, wordCount, membk.USER);
                  
                    IRFIDTag[] tags = reader.WriteTag(dataLoc, g2Params, accPswd, TagID);
            
                    if (tags == null || tags.Length == 0)
                    {
                        Console.WriteLine("No Tags");
                    }
                    else
                    {
                        foreach (IRFIDTag tag in tags)
                        {
                            Console.WriteLine("GetTags : ");
                            Console.WriteLine(tag.TagID);
                            Console.WriteLine(tag.AntennaName);
                            Console.WriteLine(tag.TagType);
                            Console.WriteLine(tag.LastSeen);
                        }
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }
            }
            
            //  Visual Basic .NET
            
            Private Sub MyUsageOfGen2Parms(reader As IRFIDReader)
                Try  
                    Dim membk As MemoryBank
                    Dim wordCount As Byte = 6
                    Dim wordPointer As Int = 2
                    Dim g2Params As New Gen2Parameters(Gen2Parameters.Ignore_SL, 
                                                       Gen2Parameters.S0, 
                                                       Gen2Parameters.Bit_A, 
                                                       0)
                    Dim accPswd As Int = <![CDATA[&]]>H12345678
                    Dim TagID As String 
                    TagID = “\x01\x02\x03\x04\x05\x06\x07\x08”
            
                    Dim dataLoc As New TagDataLoc(wordPointer, wordCount, membk.USER)
            
                    Dim tags As IRFIDTag() = reader.WriteTag(dataLoc, g2Params, accPswd, TagID)
                  
                    If tags Is Nothing Or tags.Length = 0 Then
                        Console.WriteLine("No Tags")
                    Else
                        Dim tag As IRFIDTag
                        For Each tag In  tags
                            Console.WriteLine("GetTags : ")
                            Console.WriteLine(tag.TagID)
                            Console.WriteLine(tag.AntennaName)
                            Console.WriteLine(tag.TagType)
                            Console.WriteLine(tag.LastSeen)
                        Next tag
                    End If
                Catch e As Exception
                    Console.WriteLine(e.Message)
                End Try
            End Sub 'MyUsageOfGen2Parms
            </code>
            </example>   
        </member>
        <member name="T:Symbol.RFID2.IOPins">
            <summary>
            This enum lists the Input/Output pins of the reader.
            Supported only in XR series.
            </summary>
        </member>
        <member name="F:Symbol.RFID2.IOPins.PIN_0">
            <summary>
            Pin0
            </summary>
        </member>
        <member name="F:Symbol.RFID2.IOPins.PIN_1">
            <summary>
            Pin1
            </summary>
        </member>
        <member name="F:Symbol.RFID2.IOPins.PIN_2">
            <summary>
            Pin2
            </summary>
        </member>
        <member name="F:Symbol.RFID2.IOPins.PIN_3">
            <summary>
            Pin3
            </summary>
        </member>
        <member name="F:Symbol.RFID2.IOPins.PIN_4">
            <summary>
            Pin4
            </summary>
        </member>
        <member name="F:Symbol.RFID2.IOPins.PIN_5">
            <summary>
            Pin5
            </summary>
        </member>
        <member name="T:Symbol.RFID2.ReaderModel">
            <summary>
            Symbol Reader models supported by the SDK
            </summary>
        </member>
        <member name="F:Symbol.RFID2.ReaderModel.XR480">
            <summary>
            Model XR480
            Supported only on host SDK
            </summary>
        </member>
        <member name="F:Symbol.RFID2.ReaderModel.XR400">
            <summary>
            Model XR400
            Supported only on host SDK
            </summary>
        </member>
        <member name="F:Symbol.RFID2.ReaderModel.XR440">
            <summary>
            Model XR440
            Supported only on host SDK
            </summary>
        </member>
        <member name="F:Symbol.RFID2.ReaderModel.RD5000">
            <summary>
            Model RD5000
            </summary>
        </member>
        <member name="F:Symbol.RFID2.ReaderModel.MC9090">
            <summary>
            Handheld reader model MC9090
            Supported only on deviceSDK
            </summary>
        </member>
        <member name="T:Symbol.RFID2.IOPinStatus">
            <summary>
            Holds informations of Input/Output pin status. 
            Supported only in XR series.
            </summary>
        </member>
        <member name="F:Symbol.RFID2.IOPinStatus.pin">
            <summary>
            indicates pin name/number. 
            </summary>
        </member>
        <member name="F:Symbol.RFID2.IOPinStatus.pinStatus">
            <summary>
            indicates the status:On/Off of the pin(true corresponds to On while false corresponds to Off).
            </summary>
        </member>
        <member name="M:Symbol.RFID2.IOPinStatus.#ctor(Symbol.RFID2.IOPins,System.Boolean)">
            <summary>
            Constructor intializes the member variables.
            </summary>
            <param name="pin">IOPins</param>
            <param name="pinStatus">bool reprenting pin status</param>
            <example>
            <code> 
            private void MyIOPins(IRFIDReader reader)
            {
                try
                {
                    IOPinStatus[] inputPinsStatus;
                    IOPinStatus[] outputPinsStatus;
            
                    Console.WriteLine();
                    reader.GetIOStatus(out inputPinsStatus, out outputPinsStatus);
                    Console.WriteLine();
                    foreach (IOPinStatus pininfo in inputPinsStatus)
                    {
                        try
                        {
                            IOPinsStatus iopins = new IOPinsStatus(pininfo.pin, pininfo.pinStatus);
                            Console.WriteLine();
                            Console.WriteLine("Inp Pin Number :" + pininfo.pin.ToString());
                            Console.WriteLine("Inp PinStatus  :" + pininfo.pinStatus.ToString());
                            Console.WriteLine();
                        }
                        catch { }
                    }
                    Console.WriteLine();
                    foreach (IOPinStatus pininfo in outputPinsStatus)
                    {
                        try
                        {
                            IOPinsStatus iopins = new IOPinsStatus(pininfo.pin, pininfo.pinStatus);
                            Console.WriteLine();
                            Console.WriteLine("Oup Pin Number :" + pininfo.pin.ToString());
                            Console.WriteLine("Oup PinStatus  :" + pininfo.pinStatus.ToString());
                            Console.WriteLine();
                        }
                        catch { }
                    }
                }
                catch { }
            }
            
            //  Visual Basic .NET
            
            Private Sub MyIOPins(reader As IRFIDReader)
                Try
                    Dim inputPinsStatus() As IOPinStatus
                    Dim outputPinsStatus() As IOPinStatus
                  
                    Console.WriteLine()
                    reader.GetIOStatus(inputPinsStatus, outputPinsStatus)
                    Console.WriteLine()
                    Dim pininfo As IOPinStatus
                    For Each pininfo In  inputPinsStatus
                        Try
                            Dim iopins As New IOPinsStatus(pininfo.pin, pininfo.pinStatus)
                            Console.WriteLine()
                            Console.WriteLine(("Inp Pin Number :" + pininfo.pin.ToString()))
                            Console.WriteLine(("Inp PinStatus  :" + pininfo.pinStatus.ToString()))
                            Console.WriteLine()
                        Catch
                        End Try
                    Next pininfo
                    Console.WriteLine()
                    Dim pininfo As IOPinStatus
                    For Each pininfo In  outputPinsStatus
                        Try
                            Dim iopins As New IOPinsStatus(pininfo.pin, pininfo.pinStatus)
                            Console.WriteLine()
                            Console.WriteLine(("Oup Pin Number :" + pininfo.pin.ToString()))
                            Console.WriteLine(("Oup PinStatus  :" + pininfo.pinStatus.ToString()))
                            Console.WriteLine()
                        Catch
                        End Try
                    Next pininfo
                Catch
                End Try
            End Sub 'MyIOPins
            </code>
            </example>
        </member>
        <member name="T:Symbol.RFID2.ReadMode">
            <summary>
            Modes of reader operation. 
            Autonomous - In this mode, the TagEvent event gets fired to indicate added, removed or seen tag. 
                        The reader can be set in this mode by setting ReadMode property of the reader. 
                        The tags can be filtered (their data and ID both) by defining the Tag Filter in 
                        TagDataSelector parameters. 
            ONDemand - This is the default mode. In this mode, user gets tag inventory by calling one of 
                        the GetTags() API call.
            Triggered - In this mode TagEvent event gets fired after reading the tags on pressing the trigger. 
            (This mode is supported by MC9090 series readers only)
            </summary>
        </member>
        <member name="F:Symbol.RFID2.ReadMode.AUTONOMOUS">
            <summary>
            Continuous Read Mode
            To get XR reader to work in autonomous mode, manual intervention in the reader web interface may be required to configure read points (antennas) properly; that is, read points in web interface must set to POLLED.
            </summary>
        </member>
        <member name="F:Symbol.RFID2.ReadMode.ONDEMAND">
            <summary>
            On Demand Read Mode
            </summary>
        </member>
        <member name="F:Symbol.RFID2.ReadMode.TRIGGERED">
            <summary>
            Triggered read mode
            </summary>
        </member>
        <member name="T:Symbol.RFID2.ReaderStatus">
            <summary>
            Enlists connection Status of the Reader.
            </summary>
        </member>
        <member name="F:Symbol.RFID2.ReaderStatus.ONLINE">
            <summary>
            Indicates that reader is connected.
            </summary>
        </member>
        <member name="F:Symbol.RFID2.ReaderStatus.OFFLINE">
            <summary>
            Indicates that reader is not connected.
            </summary>
        </member>
        <member name="F:Symbol.RFID2.ReaderStatus.USER_OFFLINE">
            <summary>
            Indicates that the user is offline.
            </summary>
        </member>
        <member name="F:Symbol.RFID2.ReaderStatus.ERROR">
            <summary>
            Indicates some error has occured while connecting to the reader. 
            </summary>
        </member>
        <member name="T:Symbol.RFID2.TriggerState">
            <summary>
            Enlists connection Status of the Trigger.
            </summary>
        </member>
        <member name="F:Symbol.RFID2.TriggerState.PRESSED">
            <summary>
            Trigger is pressed
            </summary>
        </member>
        <member name="F:Symbol.RFID2.TriggerState.RELEASED">
            <summary>
            Trigger is released
            </summary>
        </member>
    </members>
</doc>
